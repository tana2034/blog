<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>tana2034&#39;s Blog on tana2034</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in tana2034&#39;s Blog on tana2034</description>
    <image>
      <title>tana2034</title>
      <url>http://localhost:1313/icon.jpg</url>
      <link>http://localhost:1313/icon.jpg</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 27 Jan 2021 18:53:27 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Go]GoでHello world</title>
      <link>http://localhost:1313/docs/2020/02/go_helloworld/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/02/go_helloworld/</guid>
      <description>&lt;h1 id=&#34;gogoでhello-world&#34;&gt;[Go]GoでHello, world&lt;/h1&gt;
&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;macOS Catalina(10.15.2)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://formulae.brew.sh/formula/go&#34;&gt;brew&lt;/a&gt;のstableが1.13.8（20/2/15現在）、これをいれる&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# go version go1.13.8 darwin/amd64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;hello-world&#34;&gt;Hello, world&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/install#testing&#34;&gt;https://golang.org/doc/install#testing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これ通りにやってみる&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir $HOME/go/src/hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd $_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch hello.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// hello.go&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello, world\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# hello    hello.go&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# hello, world&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>[Go]Go言語を学ぶ（初級編）</title>
      <link>http://localhost:1313/docs/2020/01/getting_started_go_lang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/01/getting_started_go_lang/</guid>
      <description>&lt;h1 id=&#34;gogo言語を学ぶ初級編&#34;&gt;[Go]Go言語を学ぶ（初級編）&lt;/h1&gt;
&lt;p&gt;業務でGoを使うことになったので、Go言語を学んでみました&lt;/p&gt;
&lt;h2 id=&#34;どうやって学ぶかの展望&#34;&gt;どうやって学ぶかの展望&lt;/h2&gt;
&lt;p&gt;とにかくまだ一回も触ったことがないので、どうやって学ぶか考えてみました&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E7%B5%8C%E9%A8%93%E8%80%85%E3%81%8CGo%E8%A8%80%E8%AA%9E%E3%82%92%E6%9C%AC%E6%A0%BC%E7%9A%84%E3%81%AB%E5%8B%89%E5%BC%B7%E3%81%99%E3%82%8B%E5%89%8D%E3%81%AB%E8%AA%AD%E3%82%80%E3%81%9F%E3%82%81%E3%81%AE%E6%9C%AC-%E5%A4%A9%E7%94%B0%E5%A3%AB%E9%83%8E-ebook/dp/B06XJ86BFZ&#34;&gt;プログラミング経験者がGo言語を本格的に勉強する前に読むための本&lt;/a&gt;を読む&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tour.golang.org/welcome/1&#34;&gt;A Tour of Go&lt;/a&gt;で実際に動かしてみる&lt;/li&gt;
&lt;li&gt;自分の環境にGoをインストールし、簡易的なアプリケーションを作成する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;プログラミング経験者がgo言語を本格的に勉強する前に読むための本&#34;&gt;プログラミング経験者がGo言語を本格的に勉強する前に読むための本&lt;/h2&gt;
&lt;p&gt;基本的な文法を学びました&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;30分位でサクっと読める&lt;/li&gt;
&lt;li&gt;他の言語とこんなところが同じ、と付記してくれるので他言語学習者に伝わりやすい&lt;/li&gt;
&lt;li&gt;でもこれだけでGoを使おうとするのは結構無謀な感じがあるので、本当に入り口という気がする&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;a-tour-of-go&#34;&gt;A Tour of Go&lt;/h2&gt;
&lt;p&gt;A Tour of GoはオンラインのGoの実行環境(&lt;a href=&#34;https://play.golang.org/&#34;&gt;Go Playground&lt;/a&gt;)で実際にGoを動かしながら、Goの基本的な文法を学ぶことができます&lt;/p&gt;
&lt;p&gt;以下はやった時の自分用メモ&lt;/p&gt;
&lt;h4 id=&#34;packages-variables-and-functions&#34;&gt;Packages, variables, and functions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Packages&lt;/li&gt;
&lt;li&gt;Imports&lt;/li&gt;
&lt;li&gt;Exported names&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 変数名の後ろに型を書く！&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Functions continue&lt;/li&gt;
&lt;li&gt;Multiple results&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;複数の戻り値を返すことができる（返す値の型の指定は以下の通り）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swap&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Named Return Value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;戻り値に名前をつけられる&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Variables with initializers&lt;/li&gt;
&lt;li&gt;Short variables declarations
&lt;code&gt;var&lt;/code&gt;を使う代わりに&lt;code&gt;:=&lt;/code&gt;で暗黙的な型宣言ができる&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;python&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;java&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;python&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;java&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Basic types&lt;/li&gt;
&lt;li&gt;Zero values&lt;/li&gt;
&lt;li&gt;Type conversions&lt;/li&gt;
&lt;li&gt;Type interface&lt;/li&gt;
&lt;li&gt;Constants&lt;/li&gt;
&lt;li&gt;Numeric Constants&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;flow-control-statements-for-if-else-switch-and-defer&#34;&gt;Flow Control statements: for, if, else, switch and defer&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;For&lt;/li&gt;
&lt;li&gt;For continued&lt;/li&gt;
&lt;li&gt;For is Go&amp;rsquo;s &amp;ldquo;while&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Forever&lt;/li&gt;
&lt;li&gt;If with a short statement&lt;/li&gt;
&lt;li&gt;If and else&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://go-tour-jp.appspot.com/flowcontrol/8&#34;&gt;Exercise: Loops and Functions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;あとで考える&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Switch&lt;/li&gt;
&lt;li&gt;Switch evaluation order&lt;/li&gt;
&lt;li&gt;Switch with no condition&lt;/li&gt;
&lt;li&gt;Defer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;関数の終わりまで処理を遅延させる&lt;/p&gt;</description>
    </item>
    <item>
      <title>[rails]ActiveRecord::Calculations</title>
      <link>http://localhost:1313/docs/2020/02/rails_activerecord_calculations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/02/rails_activerecord_calculations/</guid>
      <description>&lt;h1 id=&#34;railsactiverecordcalculations&#34;&gt;[rails]ActiveRecord::Calculations&lt;/h1&gt;
&lt;p&gt;pluckについて知りたいと思っていたので、pluckについて学ぶついでに、pluckが入っているCalculationsのmoduleについて学びました&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html&#34;&gt;ActiveRecord::Calculations&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;calculationモジュールはcalculate系とpluck系に分けられる&#34;&gt;Calculationモジュールはcalculate系とpluck系に分けられる&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;calculate系：最終的にcalculateを使う（average, count, maximum, minimum, sum)&lt;/li&gt;
&lt;li&gt;pluck系：最終的にpluckを使う（pick, ids)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;calculate系&#34;&gt;calculate系&lt;/h3&gt;
&lt;h4 id=&#34;average&#34;&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-average&#34;&gt;average&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;average(&lt;span style=&#34;color:#e6db74&#34;&gt;:age&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 35.8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;count&#34;&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-count&#34;&gt;count&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 234&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;groupと一緒に使うと、groupごとに集計したHashを返す&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#e6db74&#34;&gt;:city&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; { &amp;#39;Rome&amp;#39; =&amp;gt; 5, &amp;#39;Paris&amp;#39; =&amp;gt; 3 }&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;maximum&#34;&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-maximum&#34;&gt;maximum&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;maximum(&lt;span style=&#34;color:#e6db74&#34;&gt;:age&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 93&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;minimum&#34;&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-minimum&#34;&gt;minimum&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;minimum(&lt;span style=&#34;color:#e6db74&#34;&gt;:age&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;sum&#34;&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-sum&#34;&gt;sum&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum(&lt;span style=&#34;color:#e6db74&#34;&gt;:age&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 4562&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pluck系&#34;&gt;pluck系&lt;/h3&gt;
&lt;h4 id=&#34;pluck&#34;&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-pluck&#34;&gt;pluck&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://railsguides.jp/active_record_querying.html#pluck&#34;&gt;https://railsguides.jp/active_record_querying.html#pluck&lt;/a&gt;
&lt;a href=&#34;https://techracho.bpsinc.jp/hachi8833/2018_09_26/62333&#34;&gt;https://techracho.bpsinc.jp/hachi8833/2018_09_26/62333&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:name&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# instead of &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:name&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;pluckはデータベースから受け取った結果を直接Rubyの配列に変換するので、ActiveRecordオブジェクトを用意する必要がない&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:name&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# SELECT people.name FROM people&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [&amp;#39;David&amp;#39;, &amp;#39;Jeremy&amp;#39;, &amp;#39;Jose&amp;#39;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;pluckは直接クエリをトリガーするので、pluckの後に条件をチェインできないが、pluckの前に追加することはできる&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# これはダメ&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Client&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:name&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;limit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# これはOK&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Client&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;limit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:name&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;ids&#34;&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-ids&#34;&gt;ids&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://railsguides.jp/active_record_querying.html#ids&#34;&gt;https://railsguides.jp/active_record_querying.html#ids&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[rails]ActiveSupport::Concern</title>
      <link>http://localhost:1313/docs/2020/02/rails_active_concern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/02/rails_active_concern/</guid>
      <description>&lt;h1 id=&#34;railsactivesupportconcern&#34;&gt;[rails]ActiveSupport::Concern&lt;/h1&gt;
&lt;h2 id=&#34;moduleの問題点&#34;&gt;Moduleの問題点&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:1313/docs/2020/02/ruby_module/&#34;&gt;module&lt;/a&gt;をmix-inするときに、&lt;code&gt;include&lt;/code&gt;, &lt;code&gt;extend&lt;/code&gt;が使えることを学んだけれど、
別に全部が全部クラスメソッドにしたいわけじゃない、もしくはmodule自体をどっちで読み込めば良いのか悩むことがあると思う&lt;/p&gt;
&lt;p&gt;そういう時は下記のように書く&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Module自体はincludeで読み込む&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# ここでクラスメソッドに指定したいものをextendsで読み込む&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# includedはmoduleがincludeされた時に呼び出されるRubyのメソッド&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;included&lt;/span&gt;(base)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;extend &lt;span style=&#34;color:#66d9ef&#34;&gt;ClassMethods&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;class_eval &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      scope &lt;span style=&#34;color:#e6db74&#34;&gt;:disabled&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; { where(&lt;span style=&#34;color:#e6db74&#34;&gt;disabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; ClassMethods
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://docs.ruby-lang.org/ja/latest/method/Module/i/included.html&#34;&gt;Module#included&lt;/a&gt;&#39;&lt;/p&gt;
&lt;h2 id=&#34;activesupportconcernを使って簡略化&#34;&gt;ActiveSupport::Concernを使って簡略化&lt;/h2&gt;
&lt;p&gt;上記のような例を、ActiveSupport::Concernを使うことで簡略化できます。
簡略化ポイントとしては２点で、①extendする部分をわざわざ書かなくて良い、②読み込み先のクラスが依存関係を書かなくて良い、です。&lt;/p&gt;
&lt;h3 id=&#34;extendをわざわざ書かなくて良い&#34;&gt;extendをわざわざ書かなくて良い&lt;/h3&gt;
&lt;p&gt;上記の例は、以下のように書けるようです&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;active_support/concern&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Concernをextendする&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;extend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveSupport&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Concern&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# includedのブロックとして渡すと、includeされた時に定義される&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  included &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    scope &lt;span style=&#34;color:#e6db74&#34;&gt;:disabled&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; { where(&lt;span style=&#34;color:#e6db74&#34;&gt;disabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Concernのclass_methodsにブロックを渡して評価する、すなわちクラスメソッドして扱えるようになる&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  class_methods &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;includedやclass_methodにブロックとしてメソッドや変数を渡すことによって、自分でクラスメソッドのモジュールを作成して読み込むみたいな面倒なことをしなくて良い&lt;/p&gt;
&lt;h3 id=&#34;読み込み先のクラスが依存関係を書かなくて良い&#34;&gt;読み込み先のクラスが依存関係を書かなくて良い&lt;/h3&gt;
&lt;p&gt;module Fooに依存しているmodule Barをclass Hostにmix-inしたい時、Hostは二つのmoduleをどちらもincludeしないといけない、面倒ですね&lt;/p&gt;</description>
    </item>
    <item>
      <title>[rails]config.eager_load</title>
      <link>http://localhost:1313/docs/2020/02/rails_config_eager_load/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/02/rails_config_eager_load/</guid>
      <description>&lt;h1 id=&#34;railsconfigeager_load&#34;&gt;[rails]config.eager_load&lt;/h1&gt;
&lt;p&gt;railsを使っていてたまに聞く言葉としてeager_loadがあり、どういうものなのかよく認識していなかったので調査しました。
ActiveRecordでの関連テーブルの一括読み込みのeager loadingはまた別でまとめます。&lt;/p&gt;
&lt;h2 id=&#34;configeager_loadは何か&#34;&gt;&lt;code&gt;config.eager_load&lt;/code&gt;は何か&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://railsguides.jp/configuring.html&#34;&gt;Rails Applicationを設定する&lt;/a&gt;で&lt;code&gt;config.eager_load&lt;/code&gt;にbool値が設定できます&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config.eager_load: trueにすると、config.eager_load_namespacesに登録された事前一括読み込み(eager loading)用の名前空間をすべて読み込みます。ここにはアプリケーション、エンジン、Railsフレームワ ークを含むあらゆる登録済み名前空間が含まれます。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Railsのアプリケーションを作成した時、デフォルトでは、&lt;code&gt;development.rb&lt;/code&gt;は&lt;code&gt;false&lt;/code&gt;, &lt;code&gt;production.rb&lt;/code&gt;は&lt;code&gt;true&lt;/code&gt;になっています。本番は迅速なレスポンスを返し、開発環境ではメモリ消費を抑えることを意識しているものと思います。&lt;/p&gt;
&lt;h3 id=&#34;configeager_load--falseのとき何が起こるのか&#34;&gt;&lt;code&gt;config.eager_load = false&lt;/code&gt;のとき、何が起こるのか&lt;/h3&gt;
&lt;p&gt;参考）&lt;a href=&#34;https://qiita.com/shakemurasan/items/305bd3d78d67b646bc06&#34;&gt;Railsの config.eager_load はModelやControllerを読み込むタイミングを制御できる&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;config.eager_load = false&lt;/code&gt;の場合、クラスが呼び出されるまでクラスが定義として存在しません&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用するまでUserクラスは存在しない&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Object&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;const_defined?(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Load&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;ms)  &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;* &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;LIMIT&lt;/span&gt; $1  &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LIMIT&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; #&amp;lt;ActiveRecord::Relation [#&amp;lt;User id: 1, name: &amp;#34;Rails Tutorial&amp;#34;,... ]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Object&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;const_defined?(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;試しに&lt;code&gt;config.eager_load = true&lt;/code&gt;にして再度&lt;code&gt;rails console&lt;/code&gt;を立ち上げてみます&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Object&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;const_defined?(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Userクラスを実際に使用する前に、定義を確認することができました&lt;/p&gt;
&lt;h3 id=&#34;コードリーディング&#34;&gt;コードリーディング&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;railties/lib/rails/application/finisher.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# initializerに名前とブロックを渡す&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      initializer &lt;span style=&#34;color:#e6db74&#34;&gt;:eager_load!&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eager_load
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveSupport&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run_load_hooks(&lt;span style=&#34;color:#e6db74&#34;&gt;:before_eager_load&lt;/span&gt;, self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# Checks defined?(Zeitwerk) instead of zeitwerk_enabled? because we&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# want to eager load any dependency managed by Zeitwerk regardless of&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# the autoloading mode of the application.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;Zeitwerk&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Loader&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eager_load_all &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; defined?(&lt;span style=&#34;color:#66d9ef&#34;&gt;Zeitwerk&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eager_load_namespaces&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:eager_load!&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このZeitwerkを使ったeager_load_allは&lt;a href=&#34;https://railsguides.jp/autoloading_and_reloading_constants.html#zeitwerk%E3%83%A2%E3%83%BC%E3%83%89%E3%82%92%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B&#34;&gt;Zeitwerkモード&lt;/a&gt;で使用される処理で、これはRails6.0以降で導入されたもの。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[rails]Enumについて学ぶ</title>
      <link>http://localhost:1313/docs/2020/10/rails_enum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/10/rails_enum/</guid>
      <description>&lt;h1 id=&#34;railsenumについて学ぶ&#34;&gt;[rails]Enumについて学ぶ&lt;/h1&gt;
&lt;p&gt;railsの仕様として用意されているenumについてメモ&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://railsguides.jp/active_record_querying.html#enums&#34;&gt;https://railsguides.jp/active_record_querying.html#enums&lt;/a&gt;
&lt;a href=&#34;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html&#34;&gt;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;整数のカラムを値の集合にマッピングできる。
下記の例で言うと、&lt;code&gt;availability&lt;/code&gt;と言う整数のカラムに対して、&lt;code&gt;:available&lt;/code&gt;, &lt;code&gt;:unavailable&lt;/code&gt;と言う値をマッピングさせている&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Book&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ApplicationRecord&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  enum &lt;span style=&#34;color:#e6db74&#34;&gt;availability&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:available&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:unavailable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こうすると、検索の時以下のように書ける&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 下の両方の例で、利用可能な本を問い合わせている&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Book&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;available
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# または&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Book&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;availability&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:available&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;book &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Book&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;availability&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:available&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;available?   &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unavailable! &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;available?   &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;割り当てられる整数は自動で0から始まるけれど、一応任意で指定もできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Conversation&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  enum &lt;span style=&#34;color:#e6db74&#34;&gt;status&lt;/span&gt;: { &lt;span style=&#34;color:#e6db74&#34;&gt;active&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;archived&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>[rake]初めてのrake</title>
      <link>http://localhost:1313/docs/2020/04/rake_getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/04/rake_getting_started/</guid>
      <description>&lt;h1 id=&#34;rake初めてのrake&#34;&gt;[rake]初めてのrake&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://ruby.github.io/rake/&#34;&gt;RAKE – Ruby Make&lt;/a&gt;について調べました&lt;/p&gt;
&lt;h2 id=&#34;rakeとは&#34;&gt;Rakeとは&lt;/h2&gt;
&lt;p&gt;Rakeとは、MakeのようなことをするためのRubyの実装、
Ruby + makeでrake&lt;/p&gt;
&lt;h3 id=&#34;とにかく使ってみる&#34;&gt;とにかく使ってみる&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ruby/rake#label-Simple+Example&#34;&gt;simple example&lt;/a&gt;を実行してみる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Rakefile&lt;/code&gt;を作成&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;task &lt;span style=&#34;color:#e6db74&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;%w[test]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;task &lt;span style=&#34;color:#e6db74&#34;&gt;:test&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ruby &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test/unittest.rb&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下記コマンドを実行すると…unittest.rbが実行される&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rake
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ruby test/unittest.rb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rake test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ruby test/unittest.rb &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# これも同じ結果になる&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;rake-taskを増やしたい&#34;&gt;rake taskを増やしたい&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;task &lt;span style=&#34;color:#e6db74&#34;&gt;:test&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;task &lt;span style=&#34;color:#e6db74&#34;&gt;:md_to_html&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  md_file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new.md&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  html_file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new.html&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sh &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pandoc -o &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;html_file&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;md_file&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rake md_to_html
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# pandoc -o new.html new.md&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;追加できた、&lt;a href=&#34;https://github.com/ruby/rake/blob/master/doc/rakefile.rdoc#label-Multiple+Definitions&#34;&gt;色々描けるみたい&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;file-task-を追加する&#34;&gt;file task を追加する&lt;/h3&gt;
&lt;p&gt;ファイルの作成をするためのタスクは、&lt;code&gt;task&lt;/code&gt; ~ でなく、&lt;code&gt;file&lt;/code&gt; ~　で始める。
&lt;a href=&#34;https://github.com/ruby/rake/blob/master/doc/rakefile.rdoc#label-File+Tasks&#34;&gt;https://github.com/ruby/rake/blob/master/doc/rakefile.rdoc#label-File+Tasks&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#Rakefile&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;foo.txt&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  touch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;foo.txt&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rake foo.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# touch foo.txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rake foo.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 二回目はもうやらない&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm foo.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rake foo.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# touch foo.txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正直、通常のtaskと何が違うのかよくわからなかった&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Rspec] 定数のスタブ</title>
      <link>http://localhost:1313/docs/2020/10/rspec_stub_constants/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/10/rspec_stub_constants/</guid>
      <description>&lt;h1 id=&#34;rspec-定数のスタブ&#34;&gt;[Rspec] 定数のスタブ&lt;/h1&gt;
&lt;p&gt;RSpecでは定数をスタブすることができる.
テストの時のみ、変更したい定数がある時など有効だと思う&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-mocks/docs/mutating-constants&#34;&gt;https://relishapp.com/rspec/rspec-mocks/docs/mutating-constants&lt;/a&gt;
これを読む&lt;/p&gt;
&lt;h2 id=&#34;stubする&#34;&gt;stubする&lt;/h2&gt;
&lt;h3 id=&#34;基本&#34;&gt;基本&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stub_const(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Foo&amp;#34;&lt;/span&gt;, fake_foo)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Foo&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; fake_foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;ネスト&#34;&gt;ネスト&lt;/h4&gt;
&lt;p&gt;moduleのネストは考慮されないので、ネストされている場合はそれを書く必要がある&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    describe &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        it { stub_const(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new) }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# B classが対象にならない&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        it { stub_const(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A::B&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new) }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# ちゃんとフルで書く&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;スタブしたclassの定数だけ参照する-transfer_nested_constants&#34;&gt;スタブしたClassの定数だけ参照する &lt;code&gt;:transfer_nested_constants&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;これは、サイトに載っているサンプルがわかりやすいのでそのまま参照しているのだけど、
スタブしたClassについて、定数を参照したい場合、&lt;code&gt;:transfer_nested_constants&lt;/code&gt;を利用するとその定数が使えるようになる。
例えば、外部ライブラリをモックした時などに使えそう&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CardDeck&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;SUITS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:Spades&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:Diamonds&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:Clubs&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:Hearts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;NUM_CARDS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fake_class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stub_const(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CardDeck&amp;#34;&lt;/span&gt;, fake_class)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CardDeck&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; fake_class&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CardDeck&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SUITS&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; raises uninitialized constant error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CardDeck&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NUM_CARDS&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; raises uninitialized constant error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stub_const(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CardDeck&amp;#34;&lt;/span&gt;, fake_class, &lt;span style=&#34;color:#e6db74&#34;&gt;:transfer_nested_constants&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CardDeck&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SUITS&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [:Spades, :Diamonds, :Clubs, :Hearts]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CardDeck&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NUM_CARDS&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 52&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stub_const(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CardDeck&amp;#34;&lt;/span&gt;, fake_class, &lt;span style=&#34;color:#e6db74&#34;&gt;:transfer_nested_constants&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:SUITS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CardDeck&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SUITS&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [:Spades, :Diamonds, :Clubs, :Hearts]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CardDeck&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NUM_CARDS&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; raises uninitialized constant error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;定数を隠す-hide_const&#34;&gt;定数を隠す &lt;code&gt;hide_const&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;環境変数が存在する場合/しない場合のテストに使えそう&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Rspec]Mocks Basics</title>
      <link>http://localhost:1313/docs/2020/03/rspec_mocks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/03/rspec_mocks/</guid>
      <description>&lt;h1 id=&#34;rspecmocks-basics&#34;&gt;[Rspec]Mocks Basics&lt;/h1&gt;
&lt;p&gt;RSpecのmockについて学びました&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/basics/&#34;&gt;https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/basics/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;test-doubles&#34;&gt;Test Doubles&lt;/h2&gt;
&lt;p&gt;Doubleオブジェクトは、本当のオブジェクトの代替として使用できる。
ただし、このままだとメソッドを呼ぶことはできない。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;describe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A test double&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;raises errors when messages not allowed or expected are received&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dbl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; double(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Some Collaborator&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# これはエラーになる&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dbl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;foo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;allowing-messages&#34;&gt;Allowing messages&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;double()&lt;/code&gt;でモックオブジェクトを作っただけだと、メソッドを代替して呼べたりはしないので、メッセージングがしたい場合は、&lt;code&gt;allow().to receive&lt;/code&gt;を使う必要がある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;describe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;allow&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;returns nil from allowed messages&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dbl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; double(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Some Collaborator&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# dblのオブジェクトがfooメソッドを呼べるようになる&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    allow(dbl)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to receive(&lt;span style=&#34;color:#e6db74&#34;&gt;:foo&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expect(dbl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;foo)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to be_nil
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;expecting-messages&#34;&gt;Expecting messages&lt;/h2&gt;
&lt;p&gt;メッセージを受け取れる（≒メソッドを呼べる）ようになったdoubleオブジェクトに対して、実際に呼ばれたかをテストすることができる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;describe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A fulfilled positive message expectation&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;passes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dbl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; double(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Some Collaborator&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expect(dbl)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to receive(&lt;span style=&#34;color:#e6db74&#34;&gt;:foo&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dbl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;foo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;spies&#34;&gt;Spies&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;double()&lt;/code&gt;の代わりに、&lt;code&gt;spy()&lt;/code&gt;を使うことで、全てのメソッドの使用を追うことができる。これは、&lt;code&gt;allow&lt;/code&gt;が不要。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Rspec]Spyについて</title>
      <link>http://localhost:1313/docs/2020/03/rspec_spies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/03/rspec_spies/</guid>
      <description>&lt;h1 id=&#34;rspecspyについて&#34;&gt;[Rspec]Spyについて&lt;/h1&gt;
&lt;p&gt;RspecのSpyという機能について調査しました&lt;/p&gt;
&lt;h2 id=&#34;spyとは何か&#34;&gt;Spyとは何か&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/basics/spies&#34;&gt;公式ドキュメント&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;You can use any test double (or partial double) as a spy, but the double must be setup to spy on the messages you care about. Spies automatically spy on all messages, or you can allow a message to spy on it.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;説明文の&lt;code&gt;message&lt;/code&gt;というのが意味が取りづらい…けど、&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0#%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8&#34;&gt;オブジェクト指向でいうところのmessage&lt;/a&gt;なのかな。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;double&lt;/code&gt;オブジェクトの呼び出されたメソッドを全て監視することもできるし、特定のメソッドを監視することができる機能がSpy機能として捉えてます。&lt;/p&gt;
&lt;h3 id=&#34;オブジェクトの挙動の監視&#34;&gt;オブジェクトの挙動の監視&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/basics/spies#using-a-spy&#34;&gt;https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/basics/spies#using-a-spy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;spyのオブジェクトが実行したどんなメソッドも追えていて、have_receivedで実行したことを確認できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;describe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;have_received&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;passes when the message has been received&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    spy_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; spy(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;spy_object&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    spy_object&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;do_something
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    spy_object&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;do_something_else
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expect(spy_object)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to have_received(&lt;span style=&#34;color:#e6db74&#34;&gt;:do_something&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expect(spy_object)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to have_received(&lt;span style=&#34;color:#e6db74&#34;&gt;:do_something_else&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;特定のメソッドの実行を追う&#34;&gt;特定のメソッドの実行を追う&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/basics/spies#spy-on-a-method-on-a-partial-double&#34;&gt;https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/basics/spies#spy-on-a-method-on-a-partial-double&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Rspec]Verifying doubles</title>
      <link>http://localhost:1313/docs/2020/07/rspec_verifying_double/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/07/rspec_verifying_double/</guid>
      <description>&lt;h1 id=&#34;rspecverifying-doubles-について学ぶ&#34;&gt;[Rspec]Verifying doubles について学ぶ&lt;/h1&gt;
&lt;p&gt;Relishのドキュメントを読んで、Verifying doublesについて学びました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/verifying-doubles&#34;&gt;https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/verifying-doubles&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;verifying-doublesとはなんなのか&#34;&gt;Verifying doublesとはなんなのか&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;When using verifying doubles, RSpec will check that the methods
being stubbed are actually present on the underlying object if it is available.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;元となるオブジェクトがあるかを検証しているので、検証doublesらしい。
通常のdoublesは代替元となるオブジェクトの存在有無を確かめずにテストを通すが、verifying doublesの場合、指定したオブジェクトやクラスが存在しない場合はfailする。&lt;/p&gt;
&lt;h2 id=&#34;verifying-doublesの種類について&#34;&gt;Verifying doublesの種類について&lt;/h2&gt;
&lt;h3 id=&#34;instance-double&#34;&gt;instance double&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/verifying-doubles/using-an-instance-double&#34;&gt;https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/verifying-doubles/using-an-instance-double&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;instance_double()&lt;/code&gt;で&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unit_helper&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;describe &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#suspend!&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;notifies the console&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 引数にオブジェクトを渡しても良い&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    notifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; instance_double(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ConsoleNotifier&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expect(notifier)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to receive(&lt;span style=&#34;color:#e6db74&#34;&gt;:notify&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;suspended as&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(notifier)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;suspend!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;class-double&#34;&gt;class double&lt;/h3&gt;
&lt;p&gt;instance doubleと異なり、クラスメソッドの実装を保証する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[RSpec]メモ</title>
      <link>http://localhost:1313/docs/2020/07/rspec_memo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/07/rspec_memo/</guid>
      <description>&lt;h1 id=&#34;rspecメモ&#34;&gt;[RSpec]メモ&lt;/h1&gt;
&lt;p&gt;参考リンク）
&lt;a href=&#34;https://magazine.rubyist.net/articles/0035/0035-RSpecInPractice.html&#34;&gt;https://magazine.rubyist.net/articles/0035/0035-RSpecInPractice.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;rspecとは&#34;&gt;RSpecとは&lt;/h2&gt;
&lt;p&gt;Rubyのテスティングフレームワーク。minitestと比べて何がいいのかや、使い方について悩むところがあったのでメモ。&lt;/p&gt;
&lt;h3 id=&#34;describeとcontext&#34;&gt;describeとcontext&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://magazine.rubyist.net/articles/0035/0035-RSpecInPractice.html#describe-%E3%81%A8-context&#34;&gt;参考リンク&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;テストコードに構造を作るために, itの上位階層としてdescribeとcontextを使用する&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;describe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;テストする対象（メソッド名など）&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    context &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;テストするときの状況(〜の場合）&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;求める結果&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            expect(subject)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to be &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;subject&#34;&gt;subject&lt;/h3&gt;
&lt;p&gt;shouldレシーバが省略できるというメリットの他に、subjectを利用することで、何をテストしているか？が明確になる&lt;/p&gt;
&lt;h3 id=&#34;letで可変部分を共通化&#34;&gt;letで可変部分を共通化&lt;/h3&gt;
&lt;h3 id=&#34;shared_contextの利用&#34;&gt;shared_contextの利用&lt;/h3&gt;
&lt;p&gt;複数のテストケースで共通のコンテキストを利用したい場合、&lt;code&gt;shared_context&lt;/code&gt;を利用するとDRYにかける。
shared_contextを利用する箇所に&lt;code&gt;include_context&lt;/code&gt;を含めるとOK&lt;/p&gt;
&lt;h3 id=&#34;コードの実行回数を数える&#34;&gt;コードの実行回数を数える&lt;/h3&gt;
&lt;p&gt;ちゃんとメソッドが利用されているか？それは期待する数か？（メモ化されているか？）
などを確認するために、メソッドの実行回数をテストできる&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://techracho.bpsinc.jp/hachi8833/2018_04_02/54350&#34;&gt;https://techracho.bpsinc.jp/hachi8833/2018_04_02/54350&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# class_instanceのmethod_nameが一回以上呼ばれていることをテスト&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;expect(class_instance)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to have_received(&lt;span style=&#34;color:#e6db74&#34;&gt;:method_name&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;at_least(&lt;span style=&#34;color:#e6db74&#34;&gt;:once&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;個人的な感覚だと先にclass_instanceをmock化するパターンが多いように思う&lt;/p&gt;
&lt;h2 id=&#34;終わり&#34;&gt;終わり&lt;/h2&gt;
&lt;p&gt;RSpecの書き方を忘れているので復習中&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Ruby]Bundler周り調査</title>
      <link>http://localhost:1313/docs/2020/04/ruby_bundler_and_gemfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/04/ruby_bundler_and_gemfile/</guid>
      <description>&lt;h1 id=&#34;rubybundler周り調査&#34;&gt;[Ruby]Bundler周り調査&lt;/h1&gt;
&lt;h2 id=&#34;bundlerとはなんなのか&#34;&gt;Bundlerとはなんなのか&lt;/h2&gt;
&lt;p&gt;Gemの依存関係を解決するためのgem。
プロジェクトの依存関係を宣言した&lt;code&gt;Gemfile&lt;/code&gt;を元に、それらを取得する。&lt;/p&gt;
&lt;h3 id=&#34;どうやって取得するの&#34;&gt;どうやって取得するの？&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;rubygems.org&lt;/code&gt;（またはsourceに指定されている箇所）に接続して、&lt;code&gt;Gemfile&lt;/code&gt;で指定した条件をすべて満たす必要なGemのリストを見つけてインストールします。
既に同じものがあった場合はそれを利用し、インストールしたすべてのバージョンを&lt;code&gt;Gemfile.lock&lt;/code&gt;に書き込む。&lt;/p&gt;
&lt;h3 id=&#34;gemfilelockと環境の共有&#34;&gt;Gemfile.lockと環境の共有&lt;/h3&gt;
&lt;p&gt;Gemfile.lockが作成されることによって、他ユーザの環境や、開発環境に同じGemを入れることの保証ができる。
例えば、Gemfileにバージョン指定を&lt;code&gt;&amp;gt;= 0.4&lt;/code&gt;として記載していた時、
&lt;code&gt;1.5.2&lt;/code&gt;がインストールされたとする.
これがGemfile.lockに記載され、それを元にインストールされるので、他の環境で勝手に&lt;code&gt;2.0.0&lt;/code&gt;が入ったりしないということになる。&lt;/p&gt;
&lt;h3 id=&#34;bundle-install-bundle-update&#34;&gt;&lt;code&gt;bundle install&lt;/code&gt; &lt;code&gt;bundle update&lt;/code&gt;&lt;/h3&gt;
&lt;h4 id=&#34;bundle-install&#34;&gt;&lt;code&gt;bundle install&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://bundler.io/v2.0/man/bundle-install.1.html&#34;&gt;https://bundler.io/v2.0/man/bundle-install.1.html&lt;/a&gt;
bundle installは、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Gemfile.lock&lt;/code&gt;がなければ、依存関係を解決してGemをinstallする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Gemfile.lock&lt;/code&gt;があって、&lt;code&gt;Gemfile&lt;/code&gt;に更新がなければ、&lt;code&gt;Gemfile.lock&lt;/code&gt;にしたがってGemをinstallする&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;bundle-update&#34;&gt;&lt;code&gt;bundle update&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;bundle updateは、&lt;code&gt;Gemfile.lock&lt;/code&gt;を無視して対象のGemの依存関係を解決してGemをインストールする&lt;/p&gt;
&lt;h5 id=&#34;bundle-update---conservativeの方がいい場合があるのはどうして&#34;&gt;&lt;code&gt;bundle update --conservative&lt;/code&gt;の方がいい場合があるのはどうして？&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;bundle update&lt;/code&gt;は複数のGemが依存しているGemの更新も行ってしまうので、そのようなことを意図していない時は&lt;code&gt;--conservative&lt;/code&gt;オプションをつけた方が良い。（&lt;a href=&#34;https://bundler.io/v2.0/man/bundle-update.1.html#OVERLAPPING-DEPENDENCIES&#34;&gt;この辺&lt;/a&gt;が参考になる)&lt;/p&gt;
&lt;p&gt;リンク先の例に基づくと、gemの&lt;code&gt;thin&lt;/code&gt;と&lt;code&gt;rack-perftools-profiler&lt;/code&gt;はどちらも&lt;code&gt;rack&lt;/code&gt;に依存している&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://rubygems.org&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gem &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thin&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gem &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rack-perftools-profiler&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このGemfileがある状態で&lt;code&gt;bundle install&lt;/code&gt;すると、&lt;code&gt;thin&lt;/code&gt;は&lt;code&gt;rack &amp;gt;= 1.0&lt;/code&gt;で、&lt;code&gt;rack-perftools-profiler&lt;/code&gt;は&lt;code&gt;rack ~&amp;gt; 1.0&lt;/code&gt;が条件なので、それを満たす&lt;code&gt;rack&lt;/code&gt;がインストールされる&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Fetching source index &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; https://rubygems.org/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Installing daemons &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1.1.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Installing eventmachine &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.12.10&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; with native extensions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Installing open4 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1.0.1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Installing perftools.rb &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.4.7&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; with native extensions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Installing rack &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1.2.1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Installing rack-perftools_profiler &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.0.2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Installing thin &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1.2.7&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; with native extensions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Using bundler &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1.0.0.rc.3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;その後、&lt;code&gt;thin&lt;/code&gt;のバージョンを上げたくなって、&lt;code&gt;bundle update thin&lt;/code&gt;を実行すると、&lt;code&gt;thin&lt;/code&gt;が依存しているGemである&lt;code&gt;daemons&lt;/code&gt; &lt;code&gt;eventmachine&lt;/code&gt; &lt;code&gt;rack&lt;/code&gt;もアップデートされる。ただし、&lt;code&gt;rack-perftools_profiler&lt;/code&gt;が依存している他の&lt;code&gt;open4&lt;/code&gt;や&lt;code&gt;perftools.rb&lt;/code&gt;はアップデートされない。なので、&lt;code&gt;rack-perftools_profiler&lt;/code&gt;が依存しているGemのバージョンを意図せず上げてしまった可能性がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Ruby]Moduleとは</title>
      <link>http://localhost:1313/docs/2020/02/ruby_module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/02/ruby_module/</guid>
      <description>&lt;h1 id=&#34;rubymoduleとは&#34;&gt;[Ruby]Moduleとは&lt;/h1&gt;
&lt;p&gt;Moduleの使い方に悩んだので学んでみました&lt;/p&gt;
&lt;h2 id=&#34;moduleとclassの違い&#34;&gt;ModuleとClassの違い&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Moduleのインスタンスは作ることができない&lt;/li&gt;
&lt;li&gt;Moduleのサブクラスは作れない（継承できない）&lt;/li&gt;
&lt;li&gt;ClassはModuleのサブクラス
&lt;ul&gt;
&lt;li&gt;Moduleはサブクラス作れないはずなのだが…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;moduleの用途&#34;&gt;Moduleの用途&lt;/h2&gt;
&lt;h3 id=&#34;1-名前空間として利用&#34;&gt;1. 名前空間として利用&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# これは下記と同じなんだけど、よくない感じ&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://github.com/rubocop-hq/ruby-style-guide#namespace-definition&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;B&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;C
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-mix-inとしての利用&#34;&gt;2. mix-inとしての利用&lt;/h3&gt;
&lt;h4 id=&#34;moduleの機能をclassから呼べる&#34;&gt;moduleの機能をClassから呼べる&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;module was called&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; C&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;foo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; &amp;#34;module was called&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;foo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; NameError (undefined local variable or method `i&amp;#39; for main:Object)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;あれ、クラスメソッドとしては使えない…と思ったけど、そもそもクラスメソッドとして定義していなかった&lt;/p&gt;</description>
    </item>
    <item>
      <title>[ruby]Object#itself</title>
      <link>http://localhost:1313/docs/2020/07/ruby_object_itself/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/07/ruby_object_itself/</guid>
      <description>&lt;h1 id=&#34;rubyobjectitself&#34;&gt;[ruby]Object#itself&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.ruby-lang.org/ja/latest/method/Object/i/itself.html&#34;&gt;https://docs.ruby-lang.org/ja/latest/method/Object/i/itself.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;selfを返します…と書いてあるけれど、用途があまりわかっていない。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itself       &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itself &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; &amp;#39;Hello&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Object&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;object&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;object_id &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; object&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itself&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;object_id &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.techscore.com/blog/2014/09/29/ruby-2-2-0-preview1-%E3%81%A4%E3%81%84%E3%81%AB%E6%9D%A5%E3%81%BE%E3%81%97%E3%81%9F%EF%BC%81%E6%81%92%E7%AD%89%E9%96%A2%E6%95%B0-kernelitself-%E3%81%AA%E3%81%A9%E3%81%AA%E3%81%A9/&#34;&gt;ついに来ました！恒等関数: Kernel#itself&lt;/a&gt;
に例があって、自分自身の値でグループ化したい時など綺麗にかける。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Ruby 2.2.0 未満&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group_by{&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; x} &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; {5=&amp;gt;[5, 5], 7=&amp;gt;[7, 7, 7], 3=&amp;gt;[3], 1=&amp;gt;[1, 1, 1], 0=&amp;gt;[0]}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Ruby 2.2.0 以降&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group_by(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:itself&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; {5=&amp;gt;[5, 5], 7=&amp;gt;[7, 7, 7], 3=&amp;gt;[3], 1=&amp;gt;[1, 1, 1], 0=&amp;gt;[0]}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;恒等関数とはなんぞやと思ったけれど、数学用語で&lt;code&gt;f(x) = x&lt;/code&gt;となるfを恒等関数というみたい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Ruby]Procとlambda</title>
      <link>http://localhost:1313/docs/2020/01/proc_and_lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/01/proc_and_lambda/</guid>
      <description>&lt;h1 id=&#34;rubyprocとlambdaについて学ぶ&#34;&gt;[Ruby]Procとlambdaについて学ぶ&lt;/h1&gt;
&lt;h2 id=&#34;procとは&#34;&gt;Procとは&lt;/h2&gt;
&lt;p&gt;ブロックをオブジェクト化したもの。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Proc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x, y&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# こういう書き方もできる&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proc { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x, y&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# callで呼び出せる&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;class
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; Proc &amp;lt; Object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;lambdaとは&#34;&gt;lambdaとは&lt;/h2&gt;
&lt;p&gt;同じようにProc型のオブジェクト。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lambda { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x, y&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# こういう書き方もできる&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;(x, y) {x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;class
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; Proc &amp;lt; Object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;procとlambdaの違いとは&#34;&gt;Procとlambdaの違いとは&lt;/h2&gt;
&lt;h3 id=&#34;1-引数の制限があるかないか&#34;&gt;1. 引数の制限があるかないか&lt;/h3&gt;
&lt;h4 id=&#34;procは引数の厳密な制限はない&#34;&gt;Procは引数の厳密な制限はない&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Proc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x, y&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; print x, y}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 1nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 3は無視される&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;lambdaは引数の個数が違うと使えない&#34;&gt;lambdaは引数の個数が違うと使えない&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lambda { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x, y&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; print x, y}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# どちらもだめ&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ArgumentError: wrong number of arguments (given 3, expected 2)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-return-break時の挙動が違う&#34;&gt;2. return, break時の挙動が違う&lt;/h3&gt;
&lt;h4 id=&#34;procではreturn-breakはブロック同様字句的に囲われている処理が終了する&#34;&gt;Procではreturn, breakはブロック同様、字句的に囲われている処理が終了する&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_proc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Proc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doing&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test_proc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; start&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; doing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# endは出力されない&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;lambdaではreturnするとlambda自身から戻る&#34;&gt;lambdaではreturnするとlambda自身から戻る&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_lambda&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lambda { puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doing&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test_lambda
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; &amp;#34;start&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; &amp;#34;doing&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; &amp;#34;end&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ちゃんとendまで出力される！&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;結局どちらを使うのが良いのか&#34;&gt;結局どちらを使うのが良いのか&lt;/h2&gt;
&lt;p&gt;どちらがよいという話は検索しても見当たらなく、どちらかというと性質の違いに触れたものが多かった。
特徴を大きくまとめると、Procはブロック的で、lambdaはメソッド的。
ブロックを持ち運べるオブジェクトを作るならProc,他の言語で期待されるようなラムダ式を作るときにはlambdaを使う方が近そう&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Ruby]Rubyのprivateメソッド</title>
      <link>http://localhost:1313/docs/2020/03/ruby_private_method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/03/ruby_private_method/</guid>
      <description>&lt;h1 id=&#34;rubyrubyのprivateメソッド&#34;&gt;[Ruby]Rubyのprivateメソッド&lt;/h1&gt;
&lt;h2 id=&#34;rubyのprivateメソッドが思っていたのと違った&#34;&gt;Rubyのprivateメソッドが思っていたのと違った&lt;/h2&gt;
&lt;p&gt;元々Javaをやっていたので、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public -&amp;gt; 外部からアクセス可能&lt;/li&gt;
&lt;li&gt;protected -&amp;gt; 外部からはアクセスできないが、サブクラスからアクセス可能&lt;/li&gt;
&lt;li&gt;private -&amp;gt; クラス内のみ利用可能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;と思っていたのですが、コーディングしていると、privateメソッドにサブクラスからアクセスできていて、あれ？となったので、改めてRubyのprivateメソッドについて調べました。&lt;/p&gt;
&lt;h3 id=&#34;確認&#34;&gt;確認&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;public_method&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;public&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protected_method&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;protected&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;private_method&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;private&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        public_method
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        protected_method
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        private_method
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; B&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;public_method
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; public_method&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;protected_method
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; NoMethodError&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;private_method
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; NoMethodError&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; public_method&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; protected_method&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; private_method&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;やっぱりサブクラスから&lt;code&gt;private&lt;/code&gt;メソッド呼べている&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Ruby]メソッドの引数</title>
      <link>http://localhost:1313/docs/2020/02/ruby_function_args/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/02/ruby_function_args/</guid>
      <description>&lt;h1 id=&#34;rubyメソッドの引数&#34;&gt;[Ruby]メソッドの引数&lt;/h1&gt;
&lt;h2 id=&#34;通常&#34;&gt;通常&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;foo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;good&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; good&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ブロック引数&#34;&gt;ブロック引数&lt;/h2&gt;
&lt;p&gt;ブロックは通常引数に指定しなくてもどんなメソッドにも渡せる&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;foo &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yield block&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; &amp;#34;yield block&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ただし引数の中で明示する場合は下記のように指定する&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;amp;をつけた引数の指定でブロックを受け取る。ブロックの指定は必ず引数の順番として一番後ろにする&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;need_block&lt;/span&gt;(a, b, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;my_block)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    my_block&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;need_block(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;num&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;block called! &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;num&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; &amp;#34;block called! 3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;need_block(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; NoMethodError (undefined method `call&amp;#39; for nil:NilClass)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ただし、&amp;amp;をつけても必須になるというわけじゃないので、使わなかったら使わないでも良い&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;non_need_block&lt;/span&gt;(a, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# blockを呼ばない&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    puts a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;non_need_block(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;needless&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; &amp;#34;needless&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# block以外のものを渡すとArgumentErrorになる&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;non_need_block(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; ArgumentError (wrong number of arguments (given 2, expected 1))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;可変長引数&#34;&gt;可変長引数&lt;/h2&gt;
&lt;h3 id=&#34;配列に展開する&#34;&gt;配列に展開する&lt;/h3&gt;
&lt;p&gt;引数に*をつけると配列として受け取れる&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Ruby]メモ化</title>
      <link>http://localhost:1313/docs/2020/01/memoization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/01/memoization/</guid>
      <description>&lt;h1 id=&#34;rubyメモ化とは&#34;&gt;[Ruby]メモ化とは&lt;/h1&gt;
&lt;p&gt;たまにメモ化という言葉を聞くので、なんだろうと思って調査してみました&lt;/p&gt;
&lt;h2 id=&#34;メモ化とは&#34;&gt;メモ化とは&lt;/h2&gt;
&lt;p&gt;関数呼び出しの結果をキャッシュすることを指す関数プログラミング用語&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%A1%E3%83%A2%E5%8C%96&#34;&gt;Wikipedia メモ化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rubyの機能ではなく、実装方針というか、開発手法の一つのようです&lt;/p&gt;
&lt;h3 id=&#34;lambdaを使ったメモ化&#34;&gt;lambdaを使ったメモ化&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# すごく雑にかくとこういう感じと思う&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cache &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cubed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lambda { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cache&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;has_key?(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;use cache&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cache&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cache&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cubed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# この時点でキャッシュはないので、計算された値が帰ってくる&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 27&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cubed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# キャッシュが既に作られているため、計算せずに帰ってくる&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; &amp;#34;use cache&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 27&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cubed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# この値はキャッシュがないので、また計算された値が帰ってくる&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;モジュールでメモ化&#34;&gt;モジュールでメモ化&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://mickey24.hatenablog.com/entry/20100906/1283769623&#34;&gt;こちら&lt;/a&gt;でやっていたのが参考になった&lt;/p&gt;
&lt;h2 id=&#34;railsにおけるメモ化&#34;&gt;Railsにおけるメモ化&lt;/h2&gt;
&lt;h3 id=&#34;activesupportmemoizable&#34;&gt;ActiveSupport::Memoizable&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;こちらは現在は&lt;a href=&#34;https://apidock.com/rails/ActiveSupport/Memoizable&#34;&gt;非推奨のモジュール&lt;/a&gt;になっており、代わりに &lt;code&gt;@var ||= pattern instead...&lt;/code&gt; のような書き方を推奨している&lt;/li&gt;
&lt;li&gt;モジュールとしてどうしても使用したい場合、&lt;a href=&#34;https://apidock.com/rails/ActiveSupport/Memoizable/memoize#1317-this-has-been-deprecated-replace-with-Memoist&#34;&gt;おすすめされている&lt;/a&gt;のは、&lt;a href=&#34;https://github.com/matthewrudy/memoist&#34;&gt;memoist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# memoistを使用した実装例&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;memoist&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;extend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Memoist&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;social_security&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;execute!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    decrypt_social_security
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  memoize &lt;span style=&#34;color:#e6db74&#34;&gt;:social_security&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こんな感じで使える&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Ruby]自己代入</title>
      <link>http://localhost:1313/docs/2020/01/ruby_selfassign/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/01/ruby_selfassign/</guid>
      <description>&lt;h1 id=&#34;ruby自己代入&#34;&gt;[Ruby]自己代入&lt;/h1&gt;
&lt;h2 id=&#34;自己代入でよくみるのは&#34;&gt;自己代入でよくみるのは…&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こんな例をよくみると思う&lt;/p&gt;
&lt;h2 id=&#34;いろんな自己代入&#34;&gt;いろんな自己代入&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.ruby-lang.org/ja/latest/doc/spec=2foperator.html#selfassign&#34;&gt;https://docs.ruby-lang.org/ja/latest/doc/spec=2foperator.html#selfassign&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;自己代入の例&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;展開&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x += y&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x = x + y&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x -= y&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x = x - y&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x *= y&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x = x * y&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x /= y&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x = x / y&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x %= y&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x = x % y&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x **= y&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x = x ** y&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x &amp;amp;&amp;amp;= y&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x = x &amp;amp;&amp;amp; y&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x ||= y&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x = x || y&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x &amp;amp;= y&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x = x &amp;amp; y&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x |= y&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x = x | y&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x ^= y&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x = x ^ y&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x &amp;laquo;= y&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x = x &amp;laquo; y&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x &amp;raquo;= y&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;x = x &amp;raquo; y&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;x--y&#34;&gt;x += y&lt;/h3&gt;
&lt;p&gt;最もよく使われそう&lt;/p&gt;</description>
    </item>
    <item>
      <title>ペアプロ／モブプロについて学ぶ</title>
      <link>http://localhost:1313/docs/2021/01/pair_programming_mob_programming/</link>
      <pubDate>Wed, 27 Jan 2021 18:53:27 +0900</pubDate>
      <guid>http://localhost:1313/docs/2021/01/pair_programming_mob_programming/</guid>
      <description>&lt;h1 id=&#34;ペアプロモブプロについて学ぶ&#34;&gt;ペアプロ／モブプロについて学ぶ&lt;/h1&gt;
&lt;p&gt;WEB+DB Press vol.102の特集「はじめてのペアプロ・モブプロ」を参考に、ペアプロ・モブプロについて学びました。&lt;/p&gt;
&lt;h2 id=&#34;ペアプログラミングモブプログラミングとは&#34;&gt;ペアプログラミング・モブプログラミングとは&lt;/h2&gt;
&lt;p&gt;プログラミングとプログラムの改良を2人で行うことをペアプログラミングという。
これを複数人（3〜5人）でやる場合、モブプログラミングという。&lt;/p&gt;
&lt;h3 id=&#34;ロールについて&#34;&gt;ロールについて&lt;/h3&gt;
&lt;p&gt;キーボードの前に実際に座っている人は「ドライバー」、ドライバーの隣に座り、ドライバーと会話しながら導く人を「ナビゲーター」と呼び、この「ドライバー」がメインでコーディングをしていく。「ナビゲーター」はドライバーと会話をしながら、ドライバーを導く。「ドライバー」は一人でずっとこなすのではなく、交代するのが普通。&lt;/p&gt;
&lt;h3 id=&#34;ペアプロモブプロのメリット&#34;&gt;ペアプロ／モブプロのメリット&lt;/h3&gt;
&lt;h4 id=&#34;作業への集中と質の向上&#34;&gt;作業への集中と質の向上&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;一人ではないので緊張感が生まれ、集中することができる&lt;/li&gt;
&lt;li&gt;考えていることを口に出しながらプログラミングを行うため、発話による思考の整理ができる&lt;/li&gt;
&lt;li&gt;リアルタイムで指摘できるため、コードの可読性、保守性が向上する&lt;/li&gt;
&lt;li&gt;他の人の目にふれるため、軽微なミスが減る&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;知識と学びの共有&#34;&gt;知識と学びの共有&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;新人教育などで利用すると、リアルタイムで知見が共有できる&lt;/li&gt;
&lt;li&gt;コードからだけでなく、コーディングの過程から学ぶことができる&lt;/li&gt;
&lt;li&gt;複数人でコーディングするため、実装内容について情報が共有できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;楽しさとチームビルディング&#34;&gt;楽しさとチームビルディング&lt;/h4&gt;
&lt;h4 id=&#34;在庫を減らしスループットを最大化できる&#34;&gt;在庫を減らし、スループットを最大化できる&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Pull Requestのレビューはプロジェクトの進行においてボトルネックになりがち&lt;/li&gt;
&lt;li&gt;Pull Requestがいくつも貯まると、以下の事象が発生する
&lt;ul&gt;
&lt;li&gt;ベテランはコードを書くのをやめ、レビューに専念する&lt;/li&gt;
&lt;li&gt;レビュー速度を上げるため、一つ一つのレビュー時間をへらす&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その結果、ベテランがコードを書いて価値を還元できなくなったり、レビュー時間の短縮によって深い指摘ができなくなってしまう&lt;/li&gt;
&lt;li&gt;Pull Requestの在庫を作ることなく、リアルタイムにリリース可能なコードを作っていくことによって、スループットが最大化できるという考え方に基づいて、ペアプロ／モブプロが推進されている&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ペアプログラミング&#34;&gt;ペアプログラミング&lt;/h2&gt;
&lt;h3 id=&#34;ペアプログラミングの進め方&#34;&gt;ペアプログラミングの進め方&lt;/h3&gt;
&lt;h4 id=&#34;コードを書く前に方向づけを行う&#34;&gt;コードを書く前に方向づけを行う&lt;/h4&gt;
&lt;p&gt;盛り上がりすぎて脱線したり、そもそもの目標を忘れたり…ということが発生するので、最初に方向付けを行う。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最終目標を決める
&lt;ul&gt;
&lt;li&gt;機能の実装の区切りやバグの修正が完了するまで…など&lt;/li&gt;
&lt;li&gt;大体二時間くらいで達成できそうな目標がよさそう&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TODOリストを作る
&lt;ul&gt;
&lt;li&gt;スムーズに走り出すため、やることをTODOリストとして書き出す&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# TODOリストのイメージ
- [x]複数ファイルをコマンドラインから指定する方法を決める
- [x]ファイルの中身をマージするか個別に処理するか決める
- [ ]コマンドライン引数の処理
- [ ]単一実績ファイル処理部分の切り出し
- [ ]テストを書く
- [ ]ステージングで動作確認
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;TODOリストから最初の目標を決める&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;コードを書きながら会話し考えを共有する&#34;&gt;コードを書きながら会話し、考えを共有する&lt;/h4&gt;
&lt;p&gt;ペアプログラミングで一番大事なのは会話。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ドライバーはコードを書くだけでなく、喋りながらコードを書く&lt;/li&gt;
&lt;li&gt;しゃべる内容は「今考えていること」
&lt;ul&gt;
&lt;li&gt;これから書こうと思っているコードのことや、迷ってモヤモヤしている設計判断のことなどをナビゲーターに喋りかける&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ナビゲーターの仕事は、まずドライバーの仕事をよく聞いて協力すること
&lt;ul&gt;
&lt;li&gt;いい意見は褒め、あいまいさがあれば視点を変えて聞き返したりなど&lt;/li&gt;
&lt;li&gt;コーディング中に入る間違いは、隣で見ているナビゲーターのほうが気づきやすいので、些細なミスやtypoなどもすぐいう&lt;/li&gt;
&lt;li&gt;設計に関して先回りしてかんがえておくことで、プログラミングを順調にすすめることができる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ロールを交代する&#34;&gt;ロールを交代する&lt;/h4&gt;
&lt;p&gt;ドライバーはとにかく疲れるので、一定期間やステップ毎などの区切りで、交代するのがよい&lt;/p&gt;
&lt;h4 id=&#34;tddをするとなおよい&#34;&gt;TDDをするとなおよい&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;テストで予め目標をわかりやすくできる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;モブプログラミング&#34;&gt;モブプログラミング&lt;/h2&gt;
&lt;p&gt;ペアのデメリットとして、情報がペア内で収まってしまうという点がある。プログラミングを通して得られる情報を多くのメンバーで共有するため、多人数で行うモブプログラミングがある&lt;/p&gt;</description>
    </item>
    <item>
      <title>[ruby]begin</title>
      <link>http://localhost:1313/docs/2020/12/ruby_begin/</link>
      <pubDate>Tue, 08 Dec 2020 18:54:54 +0900</pubDate>
      <guid>http://localhost:1313/docs/2020/12/ruby_begin/</guid>
      <description>&lt;h1 id=&#34;rubybegin&#34;&gt;[ruby]begin&lt;/h1&gt;
&lt;p&gt;rubyの例外処理について学ぶ&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  do_something
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;rescue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  recover
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  xxx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ensure&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  must_to_do
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;rescue&lt;/code&gt;の後ろには、エラータイプが指定できる。
エラータイプが省略された場合は、StandardErrorのサブクラスである全ての例外を補足する。&lt;/p&gt;
&lt;h2 id=&#34;else節&#34;&gt;else節&lt;/h2&gt;
&lt;p&gt;本体の実行でエラーが発生しなかった場合に評価される&lt;/p&gt;
&lt;h2 id=&#34;ensure節&#34;&gt;ensure節&lt;/h2&gt;
&lt;p&gt;begin 式を終了する直前に必ず ensure 節の本体を評価する
begin式全体の評価値は、&lt;strong&gt;本体／rescue節／else節のうち最後に評価された文の値&lt;/strong&gt;となる
各節において文が存在しなかったときの値はnilで、いずれにしてもensure節の値は無視される&lt;/p&gt;
&lt;h2 id=&#34;beginはなしでもできる&#34;&gt;beginはなしでもできる&lt;/h2&gt;
&lt;p&gt;クラスやmoduleの定義の中では、begin句がなくてもrescue句を書くことができる&lt;/p&gt;</description>
    </item>
    <item>
      <title>[rails]N&#43;1クエリ問題と解決方法</title>
      <link>http://localhost:1313/docs/2020/12/rails_active_record_n_plus_1/</link>
      <pubDate>Mon, 07 Dec 2020 17:51:39 +0900</pubDate>
      <guid>http://localhost:1313/docs/2020/12/rails_active_record_n_plus_1/</guid>
      <description>&lt;h1 id=&#34;railsn1クエリ問題と解決方法&#34;&gt;[Rails]N+1クエリ問題と解決方法&lt;/h1&gt;
&lt;p&gt;N+1クエリ問題について、よくわかっていなかったので調査してみました。&lt;/p&gt;
&lt;h2 id=&#34;n1クエリ問題とは&#34;&gt;N+1クエリ問題とは&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;N+1クエリ問題とは、Tree 状の情報を DB から読み出す際、全レコードの取得に一つ＋各レコード分だけ SQL を発行してしまう問題&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://akasata.com/articles/103&#34;&gt;http://akasata.com/articles/103&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Users&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;active&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;item&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# この時、select * from items where id = ... というクエリがレコード数だけ投げられる&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    puts item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;railsでの対処方法includes-preload-eager_load&#34;&gt;railsでの対処方法(includes, preload, eager_load)&lt;/h2&gt;
&lt;p&gt;この問題は、railsの公式ドキュメントでも触れられています。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://railsguides.jp/active_record_querying.html#%E9%96%A2%E9%80%A3%E4%BB%98%E3%81%91%E3%82%92%E4%B8%80%E6%8B%AC%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E3%81%99%E3%82%8B&#34;&gt;N+1クエリ問題を解決する&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://moneyforward.com/engineers_blog/2019/04/02/activerecord-includes-preload-eagerload/&#34;&gt;https://moneyforward.com/engineers_blog/2019/04/02/activerecord-includes-preload-eagerload/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;includes&#34;&gt;includes&lt;/h3&gt;
&lt;p&gt;公式ドキュメントでは、このN+1クエリ問題を解決するためにこのincludesを利用することを紹介しています。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;includesを指定すると、Active Recordは指定されたすべての関連付けが最小限のクエリ回数で読み込まれるようにしてくれます。&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clients &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Client&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;includes(&lt;span style=&#34;color:#e6db74&#34;&gt;:address&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;limit(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clients&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;client&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  puts client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;postcode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このとき発行されるクエリは&lt;code&gt;SELECT * FROM clients LIMIT 10&lt;/code&gt;と &lt;code&gt;SELECT addresses.* FROM addresses WHERE (addresses.client_id IN (1,2,3,4,5,6,7,8,9,10))&lt;/code&gt;の2件なので、相当減ったと言えると思います。&lt;/p&gt;
&lt;p&gt;しかし、&lt;code&gt;最小限のクエリ回数で読み込まれる&lt;/code&gt;というのはどういうことなのでしょうか。&lt;/p&gt;
&lt;p&gt;これは、内部で&lt;code&gt;preload&lt;/code&gt; と&lt;code&gt;eager_load&lt;/code&gt;を場面によって使い分けているため、このように書かれているようです。&lt;/p&gt;
&lt;p&gt;そうなると、&lt;code&gt;preload&lt;/code&gt;と&lt;code&gt;eager_load&lt;/code&gt;とはなんなのか、という話になってきます。&lt;/p&gt;
&lt;h3 id=&#34;preload&#34;&gt;preload&lt;/h3&gt;
&lt;p&gt;preloadは、関連テーブルを別クエリで取得する&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;preload(&lt;span style=&#34;color:#e6db74&#34;&gt;:posts&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# SELECT &amp;#34;posts&amp;#34;.* FROM &amp;#34;posts&amp;#34; WHERE &amp;#34;posts&amp;#34;.&amp;#34;user_id&amp;#34; IN (1, 2, 3)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;メモリ使用量の点でeager_loadより有利なため、基本的にincludesを利用した際はpreloadが採用されるようです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[rails]Service Objectの導入と実装</title>
      <link>http://localhost:1313/docs/2020/07/rails_service_object/</link>
      <pubDate>Wed, 15 Jul 2020 22:02:50 +0900</pubDate>
      <guid>http://localhost:1313/docs/2020/07/rails_service_object/</guid>
      <description>&lt;h1 id=&#34;railsservice-objectの導入と実装&#34;&gt;[rails]Service Objectの導入と実装&lt;/h1&gt;
&lt;p&gt;Railsで実装を追加していてServiceというのを使っているのを発見したので、これについて調査&lt;/p&gt;
&lt;h2 id=&#34;導入する目的はなにか&#34;&gt;導入する目的はなにか&lt;/h2&gt;
&lt;p&gt;ActiveRecordモデルが肥大化して分割したい場合に使用する。
ModelがFatになった場合、たいてい「&lt;a href=&#34;http://objectclub.jp/technicaldoc/object-orientation/principle/principle03&#34;&gt;単一責任の原則&lt;/a&gt;」に反している場合が多いと思われる。（単一責任の原則とは、「1つのクラスは1つの責務を持つ」考え方で、「クラスに変更が起こる理由は、一つであるべき」とされている。変更に複数の理由があるような場合、それは複数のクラスに分割したほうが、責務が凝集する、この辺はよくわかっていないので、あとでやる）&lt;/p&gt;
&lt;h2 id=&#34;どういった場合に導入するのがよいか&#34;&gt;どういった場合に導入するのがよいか&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アクションが複雑になる場合&lt;/li&gt;
&lt;li&gt;アクションが複数のモデルに渡って動作する場合&lt;/li&gt;
&lt;li&gt;アクションから外部サービスとやり取りする場合&lt;/li&gt;
&lt;li&gt;アクションが背後のモデルの中核をなすものでない場合
&lt;ul&gt;
&lt;li&gt;一定期間ごとに古くなったデータを消去する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アクションの実行方法が多岐に渡る場合&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;どうやって導入するか&#34;&gt;どうやって導入するか&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/chrischris0801/items/58a12d17a440b842db02&#34;&gt;Railsにおけるサービスクラスのオリジナルルール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考にした記事でも、他の記事でも、ルールの通りに実装することが推奨される。
これは、このあとに示すようにアンチパターンに&lt;/p&gt;
&lt;h3 id=&#34;命名規則を1つに定める&#34;&gt;命名規則を1つに定める&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Service ObjectのClass命名ルールを定める。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;or&lt;/code&gt;をつける (例　)&lt;/li&gt;
&lt;li&gt;動詞+名詞+&lt;code&gt;Service&lt;/code&gt;をつける&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;直接インスタンス化しない&#34;&gt;直接インスタンス化しない&lt;/h3&gt;
&lt;p&gt;基本的には呼び出し方法が固定なので、インスタンスを作ることに意義がない
また、呼び出す動作を統一するためにも直接&lt;code&gt;call&lt;/code&gt;を呼べるような実装にする&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この挙動をモジュール化して各Serviceに読み込ませるとより処理が統一できてよい&lt;/p&gt;
&lt;h3 id=&#34;呼び出し方法を1つに定める&#34;&gt;呼び出し方法を1つに定める&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;call&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;perform&lt;/code&gt;, &lt;code&gt;execute&lt;/code&gt;など、いずれかに呼びだし方法を統一する&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;責務を一つに絞り込む&#34;&gt;責務を一つに絞り込む&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;呼び出し方法が統一されているので、絞り込まざるを得ない&lt;/li&gt;
&lt;li&gt;例えば、DeleteやCreateなどいろんな動作をさせたい場合は、&lt;code&gt;ManageUser&lt;/code&gt;のような汎用的な名前でなく、&lt;code&gt;DeleteUser&lt;/code&gt;や&lt;code&gt;CreateUser&lt;/code&gt;などの複数のServiceに分けたほうがよい&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;コンストラクタを複雑にしない&#34;&gt;コンストラクタを複雑にしない&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;引数をserviceのインスタンス変数に保存する、など、限定的な動作に留める&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;user_id&lt;/span&gt;:)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @user_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; user_id
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;callメソッドの引数をシンプルにする&#34;&gt;&lt;code&gt;call&lt;/code&gt;メソッドの引数をシンプルにする&lt;/h3&gt;
&lt;h3 id=&#34;結果はステートリーダー経由で返す&#34;&gt;結果はステートリーダー経由で返す&lt;/h3&gt;
&lt;p&gt;callメソッドがServiceObject自身を返すようにするとより柔軟になる&lt;/p&gt;
&lt;h3 id=&#34;callメソッドの可読性を下げないようにする&#34;&gt;&lt;code&gt;call&lt;/code&gt;メソッドの可読性を下げないようにする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;callメソッドはService Objectの中心となるメソッドのため、できるだけ読みやすく保つ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;アンチパターンを考える&#34;&gt;アンチパターンを考える&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://techracho.bpsinc.jp/hachi8833/2018_04_16/55130&#34;&gt;Service Objectがアンチパターンである理由とよりよい代替手段（翻訳）&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service Objectを縛るルールが特にないので、メソッドが複雑化しやすい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/joker1007/items/25de535cd8bb2857a685&#34;&gt;俺が悪かった。素直に間違いを認めるから、もうサービスクラスとか作るのは止めてくれ&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;無秩序になると、ただただロジックが蓄積していくだけの場所になりかねず、そうするとController, Modelとの差別化ができず、ソースコードを追うことが辛くなる。
これはModelに書くべきことじゃない、とわかっているものを、ルールにそってService Objectとして扱うのがよいと思う。&lt;/p&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Service Objectは、Modelの責務外と思われるロジックを書くのに使うと良い&lt;/li&gt;
&lt;li&gt;その際には、各Service Objectには単一の責務だけを追わせるようにし、ルールに従うことで過剰なロジックを背負わないように気をつける&lt;/li&gt;
&lt;li&gt;Service Objectが肥大すると可読性が落ちるのはModelの肥大化と一緒、Classの責務について考えつつ実装をすすめる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;おまけservice-objectはどこからきたのか&#34;&gt;おまけ　Service Objectはどこからきたのか&lt;/h2&gt;
&lt;p&gt;使ってみた感想〜みたいな例を除くと、記事となっているのはこの辺り&lt;/p&gt;</description>
    </item>
    <item>
      <title>レビューについて</title>
      <link>http://localhost:1313/docs/2020/07/review/</link>
      <pubDate>Sun, 05 Jul 2020 19:22:08 +0900</pubDate>
      <guid>http://localhost:1313/docs/2020/07/review/</guid>
      <description>&lt;h1 id=&#34;レビューについて&#34;&gt;レビューについて&lt;/h1&gt;
&lt;p&gt;これまであまりレビューしてこなかったので、WEB+DB PRESS vol.96のレビュー実践研修を読んで、レビュー文化について学ぶ&lt;/p&gt;
&lt;h2 id=&#34;レビューの目的&#34;&gt;レビューの目的&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグの早期発見&lt;/li&gt;
&lt;li&gt;コードのクオリティを高める&lt;/li&gt;
&lt;li&gt;チームを強くする&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;レビューをするときに大事なこと&#34;&gt;レビューをするときに大事なこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;人に対してでなく、コードに対してレビューする
&lt;ul&gt;
&lt;li&gt;Gerald Winbergの「エゴレスプログラミング」の考え方を大事にする&lt;/li&gt;
&lt;li&gt;良いものを作ろうというところにレビューする側・される側がお互いにフォーカスすることが大事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;レビューの基本&#34;&gt;レビューの基本&lt;/h2&gt;
&lt;h3 id=&#34;レビュイーがレビューを依頼する前に心がけたいこと&#34;&gt;レビュイーがレビューを依頼する前に心がけたいこと&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自分でも見直して、表記の揺れや改めて修正すべきところがないか見直す&lt;/li&gt;
&lt;li&gt;作業のゴールを明示する
&lt;ul&gt;
&lt;li&gt;これは何をしている実装なのか？がわからないと、レビュワーも困る&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;コミットを意味のある単位で分割する
&lt;ul&gt;
&lt;li&gt;コミットの一単位があまり大きくなりすぎず、レビュイーの思考過程を追えるような内容だと、レビュワーが理解しやすい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;コードを分割する
&lt;ul&gt;
&lt;li&gt;コード量が多すぎるとレビュワーがカバーするのが大変&lt;/li&gt;
&lt;li&gt;また、差し戻された場合の修正量も多くなってしまうため、一度の修正量が1000行などだったら、複数のレビューに分割したほうが双方にとってよい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自分のしないこと、うまくいかなかったことなどもかいておくとよりお互いの認識の齟齬がなくなる
&lt;ul&gt;
&lt;li&gt;必要な実装と思われるものが入っていないと、レビュワーが気になる
&lt;ul&gt;
&lt;li&gt;今回はやらない、次の実装でやる、などがかいてあると、認識が共有できてGood&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「このパターンはどうだろう」「それはやろうとしてできなかった」というやりとりは割と頻繁にある
&lt;ul&gt;
&lt;li&gt;レビュイーの試行錯誤をかいておくと、レビュワーも認識が深まる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;レビュワーがレビューをするときに心がけること&#34;&gt;レビュワーがレビューをするときに心がけること&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;期待する結果を明確に伝える
&lt;ul&gt;
&lt;li&gt;曖昧な言葉でいうと、正確な意図が把握できず、次のアクションが起こしづらくなる&lt;/li&gt;
&lt;li&gt;期待する結果を伝える&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ここ、なんでこうなっちゃったんですかねぇ……。
↓
- プロダクトが仕様を満たしていないので、満たすように変更してほしい
- なぜそのような設計になったのか理解できないので、説明をうけて理解したい
- 問題に対してもっと良い解決策があるので、相手にも知ってほしいし、実装を変更してほしい
- 自分だったらこうするという実装例を示し
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;自分だったら、こういう実装じゃなくて、こうするかなあ。
（案を採用してほしいのか、知見を共有したいのかがわかりづらい）
↓
自分はこんな実装を思いつきました。ですがこの実装も全く問題ないですね。もし私の案のほうがよさそうだったら採用してください。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;認識のズレをへらすために&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FYIやIMO、SHOULD、MUSTなどの定型句を使うと、自分のレビューにあたっての意見が手短に伝わりやすくなる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;フィードバックには必ず理由を添える&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;どういう理由で修正を求めるかわかりづらいと、レビュイーも修正の意図が汲めない&lt;/li&gt;
&lt;li&gt;レビューは命令ではないので、レビュイーの納得を得るための説明が必要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ダメ出しだけではない&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;その他&#34;&gt;その他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;フェーズを意識したレビュー&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;チームで意識すること&#34;&gt;チームで意識すること&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;レビューの負荷が一人によらないようにする&lt;/li&gt;
&lt;li&gt;自分より練度の高い相手もレビューする&lt;/li&gt;
&lt;li&gt;可能な限り属人性を排除する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;全体を通して&#34;&gt;全体を通して&lt;/h2&gt;
&lt;p&gt;レビューでは、レビュワーとレビュイーの目的意識を同じところに持っていくことが大事で、
そのための認識のズレの修正や、コミュニケーションにおける情報伝達を軽視しないようにすると、
よりよいレビューにつながりそうという意識になりました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[circleci]ローカルマシンでcircleciのジョブを動かす</title>
      <link>http://localhost:1313/docs/2020/05/circleci_run_a_job_on_my_machine/</link>
      <pubDate>Mon, 18 May 2020 08:39:22 +0900</pubDate>
      <guid>http://localhost:1313/docs/2020/05/circleci_run_a_job_on_my_machine/</guid>
      <description>&lt;h1 id=&#34;circleciローカルマシンでcircleciのジョブを動かす&#34;&gt;[circleci]ローカルマシンでcircleciのジョブを動かす&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://circleci.com/docs/2.0/local-cli/&#34;&gt;こちら&lt;/a&gt;を参考にCircleCIのジョブをローカルで動かす&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://circleci.com/docs/ja/2.0/local-cli/&#34;&gt;日本語&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;
&lt;p&gt;macOSの場合は下記コマンド&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Starting installation.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Installing CircleCI CLI v0.1.7411&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Installing to /usr/local/bin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# /usr/local/bin/circleci&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;circleci version 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 0.1.7411+93b9d40 (release)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;update&#34;&gt;update&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;circleci update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;circleci switch
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;設定&#34;&gt;設定&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://circleci.com/account/api&#34;&gt;事前にAPI TOKENを作って&lt;/a&gt;から、下記コマンドで自分のアカウントを設定する&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;circleci setup
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;configファイルのバリデーション&#34;&gt;Configファイルのバリデーション&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;circleci config validate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;自分のマシンでコンテナを動かす&#34;&gt;自分のマシンでコンテナを動かす&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://circleci.com/docs/2.0/local-cli/#run-a-job-in-a-container-on-your-machine&#34;&gt;https://circleci.com/docs/2.0/local-cli/#run-a-job-in-a-container-on-your-machine&lt;/a&gt;
やっとここまできた&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;circleci local execute
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これでうまくいけば、万事OK…なのだけど、うまくいかない&lt;/p&gt;
&lt;h3 id=&#34;実行中にエラー&#34;&gt;実行中にエラー&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;====&lt;/span&gt;&amp;gt;&amp;gt; Checkout code
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash -eo pipefail&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p /home/circleci/project &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd /tmp/_circleci_local_build_repo &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git ls-files | tar -T - -c | tar -x -C /home/circleci/project &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cp -a /tmp/_circleci_local_build_repo/.git /home/circleci/project
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar: circle.yml: Cannot stat: No such file or directory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar: Exiting with failure status due to previous errors
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Error:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Exited with code exit status &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Step failed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Error: runner failed &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;exited with 101&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Task failed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Error: task failed
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;設定ファイルをコミットしたら解消した。その後はコミットしなくても反映されたので、謎だけど…&lt;/p&gt;</description>
    </item>
    <item>
      <title>[circleci]1から2へ移行する</title>
      <link>http://localhost:1313/docs/2020/05/circleci_from_1_to_2/</link>
      <pubDate>Sun, 17 May 2020 21:35:16 +0900</pubDate>
      <guid>http://localhost:1313/docs/2020/05/circleci_from_1_to_2/</guid>
      <description>&lt;h1 id=&#34;circleci1から2へ移行する&#34;&gt;[circleci]1から2へ移行する&lt;/h1&gt;
&lt;p&gt;下記のドキュメントを参考に、1から2へ移行する&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://circleci.com/docs/ja/2.0/migrating-from-1-2/&#34;&gt;https://circleci.com/docs/ja/2.0/migrating-from-1-2/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;circleymlの移行&#34;&gt;circle.ymlの移行&lt;/h2&gt;
&lt;p&gt;これまで使用していた&lt;code&gt;circle.yml&lt;/code&gt;ファイルを&lt;a href=&#34;https://circleci.com/docs/2.0/configuration-reference/&#34;&gt;&lt;code&gt;.circleci/config.yml&lt;/code&gt;&lt;/a&gt;に移行していくことになる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://circleci.com/docs/ja/2.0/migrating-from-1-2/#steps-to-configure-required-keys&#34;&gt;このステップ&lt;/a&gt;に従って変更する&lt;/p&gt;
&lt;h3 id=&#34;移行ステップ&#34;&gt;移行ステップ&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;circle.yml&lt;/code&gt;を新しい&lt;code&gt;.circleci&lt;/code&gt;ディレクトリに移動する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;circle.yml&lt;/code&gt; -&amp;gt; &lt;code&gt;config.yml&lt;/code&gt; にリネーム&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version: 2&lt;/code&gt; の記載をファイル先頭に追加する&lt;/li&gt;
&lt;li&gt;versionの記載の下に下記の二行を追加する。もし&lt;code&gt;machine: &lt;/code&gt;という構成があったら、それを以下と置き換える。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;build&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.dockerイメージの記述をする。以下のように言語・バージョンを指定していた場合、dockerイメージとそのバージョンに置き換える。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 移行前&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ruby&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 移行後&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;docker&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;circleci/ruby:2.3-jessie&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;checkoutはstepsの配下にネストする。コマンドは &lt;code&gt;- run:&lt;/code&gt; の後ろにかく&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 移行前&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;checkout&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;post&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - &lt;span style=&#34;color:#ae81ff&#34;&gt;mkdir -p /tmp/test-data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - &lt;span style=&#34;color:#ae81ff&#34;&gt;echo &amp;#34;foo&amp;#34; &amp;gt; /tmp/test-data/foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 移行後&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#ae81ff&#34;&gt;checkout&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mkdir -p /tmp/test-data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;echo &amp;#34;foo&amp;#34; &amp;gt; /tmp/test-data/foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;また、&lt;code&gt;checkout:&lt;/code&gt; の記述がなくても、&lt;code&gt;steps:&lt;/code&gt; は追加しなくてはならない&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;(optional) 必要があれば &lt;code&gt;add_ssh_keys&lt;/code&gt;を追加して、SSHができるようにしておく&lt;/li&gt;
&lt;li&gt;出来上がったYAMLを&lt;a href=&#34;http://codebeautify.org/yaml-validator&#34;&gt;バリデータ&lt;/a&gt; にかけてチェックする。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;workflowsを構成する&#34;&gt;Workflowsを構成する&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://circleci.com/docs/ja/2.0/workflows/&#34;&gt;https://circleci.com/docs/ja/2.0/workflows/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Rubymine][VSCode]デバッガを使う</title>
      <link>http://localhost:1313/docs/2020/03/rubymine_vscode_debug/</link>
      <pubDate>Fri, 20 Mar 2020 09:43:18 +0900</pubDate>
      <guid>http://localhost:1313/docs/2020/03/rubymine_vscode_debug/</guid>
      <description>&lt;h1 id=&#34;rubyminevscodeデバッガを使う&#34;&gt;[Rubymine][VSCode]デバッガを使う&lt;/h1&gt;
&lt;p&gt;RubymineとVSCodeを比較中のため、どちらにもデバッガを導入しています&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;環境
&lt;ul&gt;
&lt;li&gt;MacOS Catalina 10.15.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rubymine&#34;&gt;Rubymine&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://pleiades.io/help/ruby/debugging-code.html&#34;&gt;https://pleiades.io/help/ruby/debugging-code.html&lt;/a&gt;
&lt;a href=&#34;https://pleiades.io/help/ruby/starting-the-debugger-session.html&#34;&gt;https://pleiades.io/help/ruby/starting-the-debugger-session.html&lt;/a&gt;
&lt;a href=&#34;https://pleiades.io/help/ruby/running-applications.html&#34;&gt;https://pleiades.io/help/ruby/running-applications.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;必要なgemのインストール&#34;&gt;必要なgemのインストール&lt;/h3&gt;
&lt;p&gt;私の場合はGemfileには追加できないので直接追加します&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /path/to/project
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gem install debase
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gem install ruby-debug-ide
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;実行デバッグ構成を作成&#34;&gt;実行/デバッグ構成を作成&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://pleiades.io/help/ruby/run-debug-configuration.html&#34;&gt;https://pleiades.io/help/ruby/run-debug-configuration.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;私の場合は環境変数を設定したいので、別でConfigurationを自分で作成&lt;/li&gt;
&lt;li&gt;RAILS_ENVの変更なので選択肢が&lt;code&gt;development&lt;/code&gt; &lt;code&gt;production&lt;/code&gt; &lt;code&gt;test&lt;/code&gt;しか選べないのつらいと思ったけど普通に環境変数として追加すればOKだった&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;実行&#34;&gt;実行&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://pleiades.io/help/ruby/starting-the-debugger-session.html&#34;&gt;https://pleiades.io/help/ruby/starting-the-debugger-session.html&lt;/a&gt;
ブレークポイントをセットして指定のConfigurationでDebug開始すると止まる！&lt;/p&gt;
&lt;h2 id=&#34;vscode&#34;&gt;VSCode&lt;/h2&gt;
&lt;h3 id=&#34;必要なgemのインストール-1&#34;&gt;必要なGemのインストール&lt;/h3&gt;
&lt;p&gt;これはRubymineと同じ&lt;/p&gt;
&lt;h3 id=&#34;configurationを作成&#34;&gt;Configurationを作成&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/editor/debugging#_launch-configurations&#34;&gt;https://code.visualstudio.com/docs/editor/debugging#_launch-configurations&lt;/a&gt;
この辺を参考にlaunch.jsonを作成する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;launch.json&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.2.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;configurations&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Debug fril_api&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ruby&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;launch&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cwd&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${workspaceRoot}&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;program&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${workspaceRoot}/bin/rails&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;showDebuggerOutput&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// useBundlerオプションはGemfileにdebase, ruby-debug-ideを追加している人だけで、gem installで入れたような場合には不要だった
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;useBundler&amp;#34;: true,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pathToRDebugIDE&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Users/USERNAME/.rbenv/versions/2.3.1/bin/rdebug-ide&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;実行-1&#34;&gt;実行&lt;/h3&gt;
&lt;p&gt;うごいた&lt;/p&gt;
&lt;h2 id=&#34;感想など&#34;&gt;感想など&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;導入
&lt;ul&gt;
&lt;li&gt;導入自体はRubymineのほうが設定値も少なくて楽と思う&lt;/li&gt;
&lt;li&gt;とはいえVSCodeもネット上に文献が多いのでそんなに苦労しなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使い心地
&lt;ul&gt;
&lt;li&gt;個人的には、Rubymineのほうが変数の一覧はみやすいかなと思った&lt;/li&gt;
&lt;li&gt;ただ、RubymineでDebuggerを立ち上げるとMacbookが唸りだすので、VSCodeのほうが軽いかなという気はした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>VSCodeを利用してRubyのDebugを行う</title>
      <link>http://localhost:1313/docs/2020/03/vscode_docker_debug/</link>
      <pubDate>Wed, 18 Mar 2020 09:22:58 +0900</pubDate>
      <guid>http://localhost:1313/docs/2020/03/vscode_docker_debug/</guid>
      <description>&lt;h1 id=&#34;vscodeを利用してrubyのdebugを行う&#34;&gt;VSCodeを利用してRubyのDebugを行う&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Remote Development機能でデバッグ試してみる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;うまく行かなかった&#34;&gt;うまく行かなかった&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;docker-compose.ymlの&lt;code&gt;command&lt;/code&gt;を&lt;code&gt;bundle exec rdebug-ide --debug --host 0.0.0.0 --port 1234 -- rails s -p 3000 -b 0.0.0.0&lt;/code&gt;では、Railsサーバは立ち上がっていないようだった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/vscode-recipes/tree/master/debugging-Ruby-on-Rails&#34;&gt;debugging-Ruby-on-Rails&lt;/a&gt;　最も参考になるけどうまくいかなっかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/dnamsons/ruby-debugging-in-vscode-3bkj&#34;&gt;ruby debugging in vscode&lt;/a&gt; 参考になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/vscode-recipes/tree/master/debugging-Ruby-on-Rails&#34;&gt;Debugging a Rails server in Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ruby-debug/ruby-debug-ide&#34;&gt;ruby-debug-ide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/remote/containers#_debugging-in-a-container&#34;&gt;Debugging in a container&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>[Sidekiq]はじめてのSidekiq</title>
      <link>http://localhost:1313/docs/2020/03/sidekiq_getting_started/</link>
      <pubDate>Mon, 16 Mar 2020 15:32:11 +0900</pubDate>
      <guid>http://localhost:1313/docs/2020/03/sidekiq_getting_started/</guid>
      <description>&lt;h1 id=&#34;sidekiqはじめてのsidekiq&#34;&gt;[Sidekiq]はじめてのSidekiq&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Getting-Started&#34;&gt;これ&lt;/a&gt;を参考に学ぶ&lt;/p&gt;
&lt;h2 id=&#34;sidekiqとは&#34;&gt;Sidekiqとは&lt;/h2&gt;
&lt;p&gt;RubyのBackground処理を行うためのフレームワーク。&lt;/p&gt;
&lt;h2 id=&#34;はじめてみる&#34;&gt;はじめてみる&lt;/h2&gt;
&lt;h3 id=&#34;workerを作る&#34;&gt;Workerを作る&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HardWorker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Worker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;perform&lt;/span&gt;(name, count)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# do something&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;workerを実行する&#34;&gt;Workerを実行する&lt;/h3&gt;
&lt;p&gt;呼び出すときは、&lt;code&gt;perform&lt;/code&gt;じゃなく、&lt;code&gt;perform_async&lt;/code&gt;とか&lt;code&gt;perform_in&lt;/code&gt;とかを使う
rails cとかirbで下記のように呼び出すと実行できる&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HardWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;perform_in(interval, *args) 指定した時間後に実行する&lt;/li&gt;
&lt;li&gt;perform_at(timestamp, *args)　指定した時間に実行する&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;basics&#34;&gt;Basics&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/The-Basics&#34;&gt;https://github.com/mperham/sidekiq/wiki/The-Basics&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;client&#34;&gt;Client&lt;/h4&gt;
&lt;p&gt;下記の書き方で、ジョブを追加することができる。
Workerの処理を実行する書き方として、２つは同じ&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;MyWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Client&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;class&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MyWorker&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;args&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# Lower-level generic API&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;redis&#34;&gt;Redis&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Using-Redis&#34;&gt;https://github.com/mperham/sidekiq/wiki/Using-Redis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ジョブをRedisに蓄積します。&lt;/p&gt;
&lt;h5 id=&#34;初期設定&#34;&gt;初期設定&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# config/initializers/sidekiq.rb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;configure_server &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;redis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;url&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;redis://redis.example.com:7372/0&amp;#39;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;configure_client &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;redis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;url&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;redis://redis.example.com:7372/0&amp;#39;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;server&#34;&gt;Server&lt;/h4&gt;
&lt;p&gt;sidekiqサーバがRedisに追加されたジョブを監視して、実行&lt;/p&gt;
&lt;h3 id=&#34;best-practice&#34;&gt;Best Practice&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Workerに渡せる引数は文字列や数値、配列、ハッシュ（Rubyオブジェクトなどは渡せない）&lt;/li&gt;
&lt;li&gt;Workerには冪等性があるべき&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;error-handling&#34;&gt;Error Handling&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Error-Handling&#34;&gt;https://github.com/mperham/sidekiq/wiki/Error-Handling&lt;/a&gt;
あとでよむ&lt;/p&gt;
&lt;h3 id=&#34;advanced-options&#34;&gt;Advanced Options&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Advanced-Options&#34;&gt;https://github.com/mperham/sidekiq/wiki/Advanced-Options&lt;/a&gt;
あとでよむ&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Ruby]ブロックについて学ぶ</title>
      <link>http://localhost:1313/docs/2020/01/about_block/</link>
      <pubDate>Wed, 15 Jan 2020 00:00:00 +0900</pubDate>
      <guid>http://localhost:1313/docs/2020/01/about_block/</guid>
      <description>&lt;h1 id=&#34;rubyブロックについて学ぶ&#34;&gt;[Ruby]ブロックについて学ぶ&lt;/h1&gt;
&lt;h2 id=&#34;ブロック&#34;&gt;ブロック…？&lt;/h2&gt;
&lt;p&gt;Rubyを学び始めて、ブロックという概念が出てきて戸惑ったので、色々調べてみました&lt;/p&gt;
&lt;h2 id=&#34;ブロックってなんだっけ&#34;&gt;ブロックってなんだっけ&lt;/h2&gt;
&lt;p&gt;ブロックというのは、メソッド呼び出しのときに渡すことのできる処理の塊のこと。
一番よく見るのはイテレート&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   puts i 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これの&lt;code&gt;do&lt;/code&gt;から&lt;code&gt;end&lt;/code&gt;の部分がブロック&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;each { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; puts i }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こういう書き方も可能、この場合は&lt;code&gt;{}&lt;/code&gt;内が全てブロック&lt;/p&gt;
&lt;h3 id=&#34;イテレート以外でも&#34;&gt;イテレート以外でも&lt;/h3&gt;
&lt;p&gt;メソッド呼び出しの際に渡す処理なので、イテレートじゃなくてもyieldを使えば、渡したブロックを呼び出してあげられる&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;block_test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;block_test &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;num&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  puts num &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; num
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 10000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;多分なんのメソッドに対しても渡せる、渡しても何も起きないだけと思われる&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aaa&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# yieldがないのでブロックの中身は実行されない&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;Hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ブロックがある時もあればない時もありそう&#34;&gt;ブロックがある時もあれば、ない時もありそう&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;block_given?&lt;/code&gt;でブロックが渡されてるかわかるので、処理を分岐させることも可能&lt;/p&gt;
&lt;h2 id=&#34;ブロックはprocとは違うのか&#34;&gt;ブロックはProcとは違うのか&lt;/h2&gt;
&lt;p&gt;Procはオブジェクトだが、ブロックはオブジェクトでない。
&lt;a href=&#34;https://docs.ruby-lang.org/en/2.6.0/Proc.html&#34;&gt;ブロックをカプセル化したものがProc&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ブロックでのreturnの扱い&#34;&gt;ブロックでのreturnの扱い&lt;/h2&gt;
&lt;p&gt;ブロック内でreturnすると、ブロックを呼び出しているメソッドを字句的に囲っているメソッドが終了する&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count_up_from_1_to_3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  count_up_from_1_to_3 &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    puts i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test_return
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# returnするとそこでtest_returnメソッド自体が終了する...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_next&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  count_up_from_1_to_3 &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# returnをnextに変更&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    puts i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test_next
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# test_nextの最後まで処理が終わった&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>VSCodeでのRuby開発</title>
      <link>http://localhost:1313/docs/2020/01/vscode-with-ruby/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/2020/01/vscode-with-ruby/</guid>
      <description>&lt;h1 id=&#34;vscodeでのruby開発&#34;&gt;VSCodeでのRuby開発&lt;/h1&gt;
&lt;p&gt;VSCodeでRubyの開発をするための環境を整えたいと思います&lt;/p&gt;
&lt;h2 id=&#34;docker環境で開発する&#34;&gt;docker環境で開発する&lt;/h2&gt;
&lt;p&gt;私の場合はローカル環境での開発は、Ruby用のコンテナを作ってそこで動かしているので、その中で作業できると便利と思いました&lt;/p&gt;
&lt;p&gt;VSCodeは少し前に&lt;a href=&#34;https://code.visualstudio.com/docs/remote/remote-overview&#34;&gt;リモート環境での開発環境&lt;/a&gt;についてリリースがあり、これを使ってみたいと思います&lt;/p&gt;
&lt;p&gt;参考リンク
&lt;a href=&#34;https://code.visualstudio.com/docs/remote/containers&#34;&gt;https://code.visualstudio.com/docs/remote/containers&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;やったこと&#34;&gt;やったこと&lt;/h3&gt;
&lt;p&gt;ちなみに mac OSです&lt;/p&gt;
&lt;h4 id=&#34;事前準備&#34;&gt;事前準備&lt;/h4&gt;
&lt;p&gt;下記をinstallしておきます&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;VSCode&lt;/li&gt;
&lt;li&gt;Remote Development extenstion pack&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;早速コンテナにattachする&#34;&gt;早速コンテナにattachする&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;VSCodeのcommand pallet で&lt;code&gt;Remote-Containers: Attach to Running Container&lt;/code&gt;を選択する&lt;/li&gt;
&lt;li&gt;接続したいコンテナを選択する&lt;/li&gt;
&lt;li&gt;終わり&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;かんたん！&lt;/p&gt;
&lt;h4 id=&#34;各extensionをコンテナ内で使えるようにする&#34;&gt;各Extensionをコンテナ内で使えるようにする&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;これはあとの作業になりますが、VSCodeのExtensionをコンテナ内で使うためには、各Extensionを有効にする必要があります&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vscodeにextensionを追加&#34;&gt;VSCodeにExtensionを追加&lt;/h2&gt;
&lt;h3 id=&#34;solargraph&#34;&gt;Solargraph&lt;/h3&gt;
&lt;p&gt;コードの補完機能とか、ジャンプとかドキュメンテーションの参照とかができるようになるRubyのLanguage Serverです&lt;/p&gt;
&lt;h4 id=&#34;gem-install-solargraph&#34;&gt;gem install solargraph&lt;/h4&gt;
&lt;p&gt;事前にsolargraphをgem installしておきます
私の場合はGemfileに追加してインストールします、そうするとdockerなのでイメージをbuildし直す必要があります&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Gemfile

group  :development  do
	gem  &amp;#34;solargraph&amp;#34;
end
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ bundle install
$ bundle exec solargraph -v
0.38 # 入った
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;vscodeにextension追加&#34;&gt;VSCodeにExtension追加&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;VSCodeのExtensionsから「Ruby Solargraph」を選択してインストール&lt;/li&gt;
&lt;li&gt;設定ファイルを修正しておきます&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# setting.json
&amp;#34;solargraph.autoformat&amp;#34;: true, 
&amp;#34;solargraph.useBundler&amp;#34;: true, # bundle経由で使用する場合はtrue
&amp;#34;solargraph.diagnostics&amp;#34;: true # rubocopによる警告など出したい場合はtrue
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;solargraphyml&#34;&gt;.solargraph.yml&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://solargraph.org/guides/configuration&#34;&gt;この辺&lt;/a&gt;を参考に.solargraph.ymlをワークスペースのルートに追加&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# .solargraph.yml
include:
- &amp;#34;**/*.rb&amp;#34;
exclude:
- spec/**/*
- test/**/*
- vendor/**/*
- &amp;#34;.bundle/**/*&amp;#34;
require: []
domains: []
reporters:
- rubocop
- require_not_found
max_files: 5000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;全部終わったらVSCodeを再起動すると使用できると思います&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
