[{"content":"[Go]GoでHello, world 環境 macOS Catalina(10.15.2) インストール brewのstableが1.13.8（20/2/15現在）、これをいれる\nbrew install go go version # go version go1.13.8 darwin/amd64 Hello, world https://golang.org/doc/install#testing\nこれ通りにやってみる\nmkdir $HOME/go/src/hello cd $_ touch hello.go // hello.go package main import \u0026#34;fmt\u0026#34; func main() { fmt.Printf(\u0026#34;hello, world\\n\u0026#34;) } go build ls # hello hello.go ./hello # hello, world ","permalink":"http://localhost:1313/docs/2020/02/go_helloworld/","summary":"\u003ch1 id=\"gogoでhello-world\"\u003e[Go]GoでHello, world\u003c/h1\u003e\n\u003ch2 id=\"環境\"\u003e環境\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003emacOS Catalina(10.15.2)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"インストール\"\u003eインストール\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://formulae.brew.sh/formula/go\"\u003ebrew\u003c/a\u003eのstableが1.13.8（20/2/15現在）、これをいれる\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebrew install go\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego version\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# go version go1.13.8 darwin/amd64\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"hello-world\"\u003eHello, world\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://golang.org/doc/install#testing\"\u003ehttps://golang.org/doc/install#testing\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eこれ通りにやってみる\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-zsh\" data-lang=\"zsh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emkdir $HOME/go/src/hello\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd $_\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etouch hello.go\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// hello.go\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello, world\\n\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-zsh\" data-lang=\"zsh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego build\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003els\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# hello    hello.go\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e./hello\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# hello, world\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[Go]GoでHello world"},{"content":"[Go]Go言語を学ぶ（初級編） 業務でGoを使うことになったので、Go言語を学んでみました\nどうやって学ぶかの展望 とにかくまだ一回も触ったことがないので、どうやって学ぶか考えてみました\nプログラミング経験者がGo言語を本格的に勉強する前に読むための本を読む A Tour of Goで実際に動かしてみる 自分の環境にGoをインストールし、簡易的なアプリケーションを作成する プログラミング経験者がGo言語を本格的に勉強する前に読むための本 基本的な文法を学びました\n30分位でサクっと読める 他の言語とこんなところが同じ、と付記してくれるので他言語学習者に伝わりやすい でもこれだけでGoを使おうとするのは結構無謀な感じがあるので、本当に入り口という気がする A Tour of Go A Tour of GoはオンラインのGoの実行環境(Go Playground)で実際にGoを動かしながら、Goの基本的な文法を学ぶことができます\n以下はやった時の自分用メモ\nPackages, variables, and functions Packages Imports Exported names Functions // 変数名の後ろに型を書く！ func add(x int, y int) int { return x + y } Functions continue Multiple results 複数の戻り値を返すことができる（返す値の型の指定は以下の通り）\nfunc swap(x, y string) (string, string) { return y, x } Named Return Value 戻り値に名前をつけられる\nfunc split(sum int) (x, y int) { x = sum * 4 / 9 y = sum - x return } Variables Variables with initializers Short variables declarations varを使う代わりに:=で暗黙的な型宣言ができる var c, python, java = true, false, \u0026#34;no!\u0026#34; c, python, java := true, false, \u0026#34;no!\u0026#34; Basic types Zero values Type conversions Type interface Constants Numeric Constants Flow Control statements: for, if, else, switch and defer For For continued For is Go\u0026rsquo;s \u0026ldquo;while\u0026rdquo; Forever If with a short statement If and else Exercise: Loops and Functions あとで考える Switch Switch evaluation order Switch with no condition Defer 関数の終わりまで処理を遅延させる\n// helloが出力された後にworldが出力される func main() { defer fmt.Println(\u0026#34;world\u0026#34;) fmt.Println(\u0026#34;hello\u0026#34;) } Stacking defers いくつもあったら…\nfunc main() { defer fmt.Println(1) defer fmt.Println(2) defer fmt.Println(3) defer fmt.Println(4) defer fmt.Println(5) return } // 5, 4, 3, 2, 1の順に出力される More types: structs, slices, and maps. Pointers ポインタは、値のメモリアドレスを指す\ni := 42 fmt.Println(i) // 42 fmt.Println(\u0026amp;i) // 0x40e020 fmt.Println(*\u0026amp;i) // 42 Structs Struct FieldsFields type Vertex struct { X int Y int x int } v := Vertex{1, 2} v.x = 4 Pointers to structs Struct Literals Arrays var a [10]string a[0] = \u0026#34;aaa\u0026#34; Slices arrayとの違いが当初わからなかったけど、サイズを指定しなかったらそれはSliceになるみたい。 // これは配列 a := [3]int{1, 2, 3} // これはスライス b := []int{1, 2, 3} // これもスライスになる c := a[1:2] Slices are like references to arrays Slice literals Slice defaults Slice length and capacity Nil slices Creating a slice with make Slices of slices Appending to a slice Range スライスやマップを一つずつ処理する時に使用する var foo = []string{\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;} for s, t := range foo { fmt.Printf(\u0026#34;%d \u0026#34;, s) fmt.Printf(\u0026#34;%s \u0026#34;, t) } // 0 a 1 b 2 c Range Continued _でインデックスもしくは値の不要な値を捨てることができる（宣言しておいて使わないとxxx declared and not usedとエラーになる）\nExercise Slice https://qiita.com/rock619/items/f412d1f870a022c142d0#exercise-slices ためになる\nMaps make関数は指定された型で初期化\nvar d map[string]string d = make(map[string]string) d[\u0026#34;a\u0026#34;] = \u0026#34;aaa\u0026#34; d[\u0026#34;b\u0026#34;] = \u0026#34;bbb\u0026#34; fmt.Println(d[\u0026#34;b\u0026#34;]) Map literals Map literals continued Mutating Maps m := make(map[string]int) m[\u0026#34;Answer\u0026#34;] = 48 delete(m, \u0026#34;Answer\u0026#34;) v, ok := m[\u0026#34;Answer\u0026#34;] Exercise: Maps Function values 関数も変数として扱える Function closures 関数はクロージャ Exercise: Fibonacci closure Methods and interfaces Methods Methods are function Goにはクラスがないけど、メソッドに型定義できる type Text struct { description string } // Textはレシーバになる func (t Text) Good() bool { return t.description == \u0026#34;Good\u0026#34; } func main() { g := Text{\u0026#34;Good\u0026#34;} fmt.Println(g.Good()) // true b := Text{\u0026#34;Bad\u0026#34;} fmt.Println(b.Good()) // false } // レシーバにならないパターン // Textはレシーバになる func Good(t Text) bool { return t.description == \u0026#34;Good\u0026#34; } func main() { g := Text{\u0026#34;Good\u0026#34;} fmt.Println(Good(g)) // true b := Text{\u0026#34;Bad\u0026#34;} fmt.Println(Good(b)) // false fmt.Println(g.Good()) // g.Good undefined (type Text has no field or method Good) // レシーバとして扱うとエラー } Methods continue structだけでなく、独自のtypeにも対応 Pointer receiver // ポインタを渡すことで元の変数のコピーを操作する func (v *Vertex) Scale(f float64) { v.X = v.X * f v.Y = v.Y * f } Pointers and function ポインタを関数に渡すような場合でも↑と同じようになる Methods and pointer indirection Methods and pointer indirection (2) Choosing a value or pointer receiver ポインタレシーバを使う理由。 Interfaces Interface(インタフェース)型は、メソッドのシグニチャの集まりで定義 type Abser interface { // メソッド Abs() float64 } Interfaces are implemented implicitly type I interface { M() } type T struct { S string } // これでTがIを実装していることになるらしい。。 func (t T) M() { fmt.Println(t.S) } func main() { var i I = T{\u0026#34;hello\u0026#34;} i.M() } Interface values Interface values with nil underlying values レシーバーがnilだと呼び出された値 Nil interface values 実装がないインターフェースを呼び出すとランタイムエラーになる type I interface { M() } var i I i.M() The empty interface 空のインターフェース、未知の型を表す時に使うらしい var i interface{} i = 42 i = \u0026#34;a\u0026#34; // なんでも良いみたい Type assertions var i interface{} = \u0026#34;hello\u0026#34; // iの値が型Tであることを主張する t := i.(T) t, ok := i.(string) // これはokはtrueになる、stringじゃない型を指定するとそのかたの値を持っていないのでfalse Type switch 型によって挙動を変えるためのswitch構文 switch v := i.(type) { case T: // here v has type T case S: // here v has type S default: // no match; here v has the same type as i } Stringers よく使われるインターフェース type Person struct { Name string Age int } // PersonをレシーバにしたStringの関数を作成しておくと、Printlnする時にこれが出力される func (p Person) String() string { return fmt.Sprintf(\u0026#34;%v (%v years)\u0026#34;, p.Name, p.Age) } func main() { a := Person{\u0026#34;Arthur Dent\u0026#34;, 42} z := Person{\u0026#34;Zaphod Beeblebrox\u0026#34;, 9001} fmt.Println(a, z) } Exercise Stringers もっと良い書き方ありそう func (ipaddr IPAddr) String() string { return fmt.Sprintf(\u0026#34;%d.%d.%d.%d\u0026#34;, ipaddr[0], ipaddr[1], ipaddr[2], ipaddr[3]) } Errors error型は組み込みのインターフェース Exercise: Errors あとでやりたい Readers この辺またあとでやる Exercise: Readers Images Exercise: Images Concurrency Goroutines でた！ゴルーチン goroutine (ゴルーチン)は、Goのランタイムに管理される軽量なスレッド func up(start int) { var count int for i := 0; i \u0026lt; 3; i++ { time.Sleep(100 * time.Millisecond) count = start + i fmt.Println(\u0026#34;i: \u0026#34;, i) fmt.Println(\u0026#34;start: \u0026#34;, start) fmt.Println(\u0026#34;count: \u0026#34;, count) } } func main() { go up(1) up(100) } // i: 0 // start: 1 // count: 1 // i: 0 // start: 100 // count: 100 // i: 1 // start: 100 // count: 101 // i: 1 // start: 1 // count: 2 // i: 2 // start: 1 // count: 3 // i: 2 // start: 100 // count: 102 ちなみにgoroutineだけにしておくと勝手に終わってしまう\nChannels チャネル型は値の送受信が可能 func plusone(val int, c chan int) { val = val+1 c \u0026lt;- val } func main() { c := make(chan int) go plusone(1, c) go plusone(100, c) x, y := \u0026lt;-c, \u0026lt;-c fmt.Println(x, y) } 通常、片方が準備できるまで送受信はブロックされます。これにより、明確なロックや条件変数がなくても、goroutineの同期を可能にします。 これで同期するのか\nBuffered Channel チャネルは、 バッファ ( buffer )として使えます。 バッファとして使えるがそもそもわからないな… wikipedia バッファ うーん、 時間的差違を補正する遅延や一時記憶など整合を図り矛盾を解決する機能や手段として使えるということかな。 // 2を1に変えるとエラーになる ch := make(chan int, 2) ch \u0026lt;- 1 ch \u0026lt;- 2 fmt.Println(\u0026lt;-ch) fmt.Println(\u0026lt;-ch) Range Close チャネルはクローズできる close(c) 通常、チャネルはクローズしなくて良い チャネルをクローズするのは受け手じゃなく送り手側 （受け手がcloseして送信するとpanicになる） 受け手は成功したかを受け取れるのでそこで判別する\nv, ok := \u0026lt;-ch Select selectは複数の通信操作で待たせる func fibonacci(c, quit chan int) { x, y := 0, 1 for { select { case c \u0026lt;- x: x, y = y, x+y fmt.Println(\u0026#34;x:\u0026#34;, x) case \u0026lt;-quit: fmt.Println(\u0026#34;quit\u0026#34;) return } } } func main() { c := make(chan int) quit := make(chan int) go func() { for i := 0; i \u0026lt; 10; i++ { fmt.Println(\u0026lt;-c) } quit \u0026lt;- 0 }() fibonacci(c, quit) } // 0 // 1 // 1 // 2 // 3 // 5 // 8 // 13 // 21 // 34 // quit goroutineとして呼び出された関数は、処理全体が終わるまで動く チャネルの数を受け取ってfibonacciの中のselectは待機する、値を取得したら動作\nDefault Selection Exercise: Equivalent Binary Trees Exercise: Equivalent Binary Trees sync.Mutex 通信が必要なく、一度に１つのgoroutineのみを動かしたい、コンフリクトを避けたい場合、sync.MutexのLockとUnlockを使う\n// Inc increments the counter for the given key. func (c *SafeCounter) Inc(key string) { c.mux.Lock() // Lock so only one goroutine at a time can access the map c.v. c.v[key]++ c.mux.Unlock() } Exercise: Web Crawler 自分の環境にGoをインストールし、簡易的なアプリケーションを作成する これは別途やります\n言語習得における今回の知見 A Tour of Goよかったです、読むだけじゃなくて実行してみるのが良い メモに残しながらやることで、色々疑問点が表出してきて、試せたのがよかった とはいえ長いしまだ理解できてないところもある（忘れてるところも）ので、都度復習したり追記したい 参考資料 Documentation Youtube Writing, building, installing, and testing Go code pkgについての Documentation Go言語の仕様 動画　Goの並行処理 Simple Programming Environment ","permalink":"http://localhost:1313/docs/2020/01/getting_started_go_lang/","summary":"\u003ch1 id=\"gogo言語を学ぶ初級編\"\u003e[Go]Go言語を学ぶ（初級編）\u003c/h1\u003e\n\u003cp\u003e業務でGoを使うことになったので、Go言語を学んでみました\u003c/p\u003e\n\u003ch2 id=\"どうやって学ぶかの展望\"\u003eどうやって学ぶかの展望\u003c/h2\u003e\n\u003cp\u003eとにかくまだ一回も触ったことがないので、どうやって学ぶか考えてみました\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E7%B5%8C%E9%A8%93%E8%80%85%E3%81%8CGo%E8%A8%80%E8%AA%9E%E3%82%92%E6%9C%AC%E6%A0%BC%E7%9A%84%E3%81%AB%E5%8B%89%E5%BC%B7%E3%81%99%E3%82%8B%E5%89%8D%E3%81%AB%E8%AA%AD%E3%82%80%E3%81%9F%E3%82%81%E3%81%AE%E6%9C%AC-%E5%A4%A9%E7%94%B0%E5%A3%AB%E9%83%8E-ebook/dp/B06XJ86BFZ\"\u003eプログラミング経験者がGo言語を本格的に勉強する前に読むための本\u003c/a\u003eを読む\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://tour.golang.org/welcome/1\"\u003eA Tour of Go\u003c/a\u003eで実際に動かしてみる\u003c/li\u003e\n\u003cli\u003e自分の環境にGoをインストールし、簡易的なアプリケーションを作成する\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"プログラミング経験者がgo言語を本格的に勉強する前に読むための本\"\u003eプログラミング経験者がGo言語を本格的に勉強する前に読むための本\u003c/h2\u003e\n\u003cp\u003e基本的な文法を学びました\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e30分位でサクっと読める\u003c/li\u003e\n\u003cli\u003e他の言語とこんなところが同じ、と付記してくれるので他言語学習者に伝わりやすい\u003c/li\u003e\n\u003cli\u003eでもこれだけでGoを使おうとするのは結構無謀な感じがあるので、本当に入り口という気がする\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"a-tour-of-go\"\u003eA Tour of Go\u003c/h2\u003e\n\u003cp\u003eA Tour of GoはオンラインのGoの実行環境(\u003ca href=\"https://play.golang.org/\"\u003eGo Playground\u003c/a\u003e)で実際にGoを動かしながら、Goの基本的な文法を学ぶことができます\u003c/p\u003e\n\u003cp\u003e以下はやった時の自分用メモ\u003c/p\u003e\n\u003ch4 id=\"packages-variables-and-functions\"\u003ePackages, variables, and functions\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003ePackages\u003c/li\u003e\n\u003cli\u003eImports\u003c/li\u003e\n\u003cli\u003eExported names\u003c/li\u003e\n\u003cli\u003eFunctions\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 変数名の後ろに型を書く！\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eFunctions continue\u003c/li\u003e\n\u003cli\u003eMultiple results\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e複数の戻り値を返すことができる（返す値の型の指定は以下の通り）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eswap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) (\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eNamed Return Value\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e戻り値に名前をつけられる\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esplit\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) (\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eVariables\u003c/li\u003e\n\u003cli\u003eVariables with initializers\u003c/li\u003e\n\u003cli\u003eShort variables declarations\n\u003ccode\u003evar\u003c/code\u003eを使う代わりに\u003ccode\u003e:=\u003c/code\u003eで暗黙的な型宣言ができる\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003epython\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ejava\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;no!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003epython\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ejava\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;no!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eBasic types\u003c/li\u003e\n\u003cli\u003eZero values\u003c/li\u003e\n\u003cli\u003eType conversions\u003c/li\u003e\n\u003cli\u003eType interface\u003c/li\u003e\n\u003cli\u003eConstants\u003c/li\u003e\n\u003cli\u003eNumeric Constants\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"flow-control-statements-for-if-else-switch-and-defer\"\u003eFlow Control statements: for, if, else, switch and defer\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFor\u003c/li\u003e\n\u003cli\u003eFor continued\u003c/li\u003e\n\u003cli\u003eFor is Go\u0026rsquo;s \u0026ldquo;while\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eForever\u003c/li\u003e\n\u003cli\u003eIf with a short statement\u003c/li\u003e\n\u003cli\u003eIf and else\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://go-tour-jp.appspot.com/flowcontrol/8\"\u003eExercise: Loops and Functions\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003eあとで考える\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSwitch\u003c/li\u003e\n\u003cli\u003eSwitch evaluation order\u003c/li\u003e\n\u003cli\u003eSwitch with no condition\u003c/li\u003e\n\u003cli\u003eDefer\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e関数の終わりまで処理を遅延させる\u003c/p\u003e","title":"[Go]Go言語を学ぶ（初級編）"},{"content":"[rails]ActiveRecord::Calculations pluckについて知りたいと思っていたので、pluckについて学ぶついでに、pluckが入っているCalculationsのmoduleについて学びました\nActiveRecord::Calculations\nCalculationモジュールはcalculate系とpluck系に分けられる calculate系：最終的にcalculateを使う（average, count, maximum, minimum, sum) pluck系：最終的にpluckを使う（pick, ids) calculate系 average Person.average(:age) # =\u0026gt; 35.8 count Person.count # =\u0026gt; 234 groupと一緒に使うと、groupごとに集計したHashを返す\nPerson.group(:city).count # =\u0026gt; { \u0026#39;Rome\u0026#39; =\u0026gt; 5, \u0026#39;Paris\u0026#39; =\u0026gt; 3 } maximum Person.maximum(:age) # =\u0026gt; 93 minimum Person.minimum(:age) # =\u0026gt; 7 sum Person.sum(:age) # =\u0026gt; 4562 pluck系 pluck https://railsguides.jp/active_record_querying.html#pluck https://techracho.bpsinc.jp/hachi8833/2018_09_26/62333\nPerson.pluck(:name) # instead of Person.all.map(\u0026amp;:name) pluckはデータベースから受け取った結果を直接Rubyの配列に変換するので、ActiveRecordオブジェクトを用意する必要がない\nPerson.pluck(:name) # SELECT people.name FROM people # =\u0026gt; [\u0026#39;David\u0026#39;, \u0026#39;Jeremy\u0026#39;, \u0026#39;Jose\u0026#39;] pluckは直接クエリをトリガーするので、pluckの後に条件をチェインできないが、pluckの前に追加することはできる\n# これはダメ Client.pluck(:name).limit(1) # これはOK Client.limit(1).pluck(:name) ids https://railsguides.jp/active_record_querying.html#ids\nprimary keyの配列を返す、内部ではpluckを読んでる\nPerson.ids # SELECT people.id FROM people pick Person.where(id: 1).pick(:name) ","permalink":"http://localhost:1313/docs/2020/02/rails_activerecord_calculations/","summary":"\u003ch1 id=\"railsactiverecordcalculations\"\u003e[rails]ActiveRecord::Calculations\u003c/h1\u003e\n\u003cp\u003epluckについて知りたいと思っていたので、pluckについて学ぶついでに、pluckが入っているCalculationsのmoduleについて学びました\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html\"\u003eActiveRecord::Calculations\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"calculationモジュールはcalculate系とpluck系に分けられる\"\u003eCalculationモジュールはcalculate系とpluck系に分けられる\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ecalculate系：最終的にcalculateを使う（average, count, maximum, minimum, sum)\u003c/li\u003e\n\u003cli\u003epluck系：最終的にpluckを使う（pick, ids)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"calculate系\"\u003ecalculate系\u003c/h3\u003e\n\u003ch4 id=\"average\"\u003e\u003ca href=\"https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-average\"\u003eaverage\u003c/a\u003e\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ePerson\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eaverage(\u003cspan style=\"color:#e6db74\"\u003e:age\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; 35.8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"count\"\u003e\u003ca href=\"https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-count\"\u003ecount\u003c/a\u003e\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ePerson\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecount\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; 234\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003egroupと一緒に使うと、groupごとに集計したHashを返す\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ePerson\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egroup(\u003cspan style=\"color:#e6db74\"\u003e:city\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecount\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; { \u0026#39;Rome\u0026#39; =\u0026gt; 5, \u0026#39;Paris\u0026#39; =\u0026gt; 3 }\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"maximum\"\u003e\u003ca href=\"https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-maximum\"\u003emaximum\u003c/a\u003e\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ePerson\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emaximum(\u003cspan style=\"color:#e6db74\"\u003e:age\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; 93\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"minimum\"\u003e\u003ca href=\"https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-minimum\"\u003eminimum\u003c/a\u003e\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ePerson\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eminimum(\u003cspan style=\"color:#e6db74\"\u003e:age\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; 7\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"sum\"\u003e\u003ca href=\"https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-sum\"\u003esum\u003c/a\u003e\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ePerson\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esum(\u003cspan style=\"color:#e6db74\"\u003e:age\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; 4562\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"pluck系\"\u003epluck系\u003c/h3\u003e\n\u003ch4 id=\"pluck\"\u003e\u003ca href=\"https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-pluck\"\u003epluck\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003e\u003ca href=\"https://railsguides.jp/active_record_querying.html#pluck\"\u003ehttps://railsguides.jp/active_record_querying.html#pluck\u003c/a\u003e\n\u003ca href=\"https://techracho.bpsinc.jp/hachi8833/2018_09_26/62333\"\u003ehttps://techracho.bpsinc.jp/hachi8833/2018_09_26/62333\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ePerson\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epluck(\u003cspan style=\"color:#e6db74\"\u003e:name\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# instead of \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ePerson\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eall\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emap(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e:name\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003epluckはデータベースから受け取った結果を直接Rubyの配列に変換するので、ActiveRecordオブジェクトを用意する必要がない\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ePerson\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epluck(\u003cspan style=\"color:#e6db74\"\u003e:name\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# SELECT people.name FROM people\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; [\u0026#39;David\u0026#39;, \u0026#39;Jeremy\u0026#39;, \u0026#39;Jose\u0026#39;]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003epluckは直接クエリをトリガーするので、pluckの後に条件をチェインできないが、pluckの前に追加することはできる\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# これはダメ\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eClient\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epluck(\u003cspan style=\"color:#e6db74\"\u003e:name\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elimit(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# これはOK\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eClient\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elimit(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epluck(\u003cspan style=\"color:#e6db74\"\u003e:name\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"ids\"\u003e\u003ca href=\"https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-ids\"\u003eids\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003e\u003ca href=\"https://railsguides.jp/active_record_querying.html#ids\"\u003ehttps://railsguides.jp/active_record_querying.html#ids\u003c/a\u003e\u003c/p\u003e","title":"[rails]ActiveRecord::Calculations"},{"content":"[rails]ActiveSupport::Concern Moduleの問題点 moduleをmix-inするときに、include, extendが使えることを学んだけれど、 別に全部が全部クラスメソッドにしたいわけじゃない、もしくはmodule自体をどっちで読み込めば良いのか悩むことがあると思う\nそういう時は下記のように書く\n# Module自体はincludeで読み込む module M # ここでクラスメソッドに指定したいものをextendsで読み込む # includedはmoduleがincludeされた時に呼び出されるRubyのメソッド def self.included(base) base.extend ClassMethods base.class_eval do scope :disabled, -\u0026gt; { where(disabled: true) } end end module ClassMethods ... end end Module#included'\nActiveSupport::Concernを使って簡略化 上記のような例を、ActiveSupport::Concernを使うことで簡略化できます。 簡略化ポイントとしては２点で、①extendする部分をわざわざ書かなくて良い、②読み込み先のクラスが依存関係を書かなくて良い、です。\nextendをわざわざ書かなくて良い 上記の例は、以下のように書けるようです\nrequire \u0026#39;active_support/concern\u0026#39; module M # Concernをextendする extend ActiveSupport::Concern # includedのブロックとして渡すと、includeされた時に定義される included do scope :disabled, -\u0026gt; { where(disabled: true) } end # Concernのclass_methodsにブロックを渡して評価する、すなわちクラスメソッドして扱えるようになる class_methods do ... end end includedやclass_methodにブロックとしてメソッドや変数を渡すことによって、自分でクラスメソッドのモジュールを作成して読み込むみたいな面倒なことをしなくて良い\n読み込み先のクラスが依存関係を書かなくて良い module Fooに依存しているmodule Barをclass Hostにmix-inしたい時、Hostは二つのmoduleをどちらもincludeしないといけない、面倒ですね\nmodule Foo def self.included(base) base.class_eval do def self.method_injected_by_foo ... end end end end module Bar def self.included(base) base.method_injected_by_foo end end class Host include Foo # We need to include this dependency for Bar include Bar # Bar is the module that Host really needs end moduleにConcernを入れておくと、classがわざわざ依存関係を知らなくて済む、便利ですね\nrequire \u0026#39;active_support/concern\u0026#39; module Foo extend ActiveSupport::Concern included do def self.method_injected_by_foo ... end end end module Bar extend ActiveSupport::Concern include Foo included do self.method_injected_by_foo end end class Host include Bar # It works, now Bar takes care of its dependencies end 参考 ActiveSupport::Concern github ","permalink":"http://localhost:1313/docs/2020/02/rails_active_concern/","summary":"\u003ch1 id=\"railsactivesupportconcern\"\u003e[rails]ActiveSupport::Concern\u003c/h1\u003e\n\u003ch2 id=\"moduleの問題点\"\u003eModuleの問題点\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"/docs/2020/02/ruby_module/\"\u003emodule\u003c/a\u003eをmix-inするときに、\u003ccode\u003einclude\u003c/code\u003e, \u003ccode\u003eextend\u003c/code\u003eが使えることを学んだけれど、\n別に全部が全部クラスメソッドにしたいわけじゃない、もしくはmodule自体をどっちで読み込めば良いのか悩むことがあると思う\u003c/p\u003e\n\u003cp\u003eそういう時は下記のように書く\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Module自体はincludeで読み込む\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e M\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# ここでクラスメソッドに指定したいものをextendsで読み込む\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# includedはmoduleがincludeされた時に呼び出されるRubyのメソッド\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eincluded\u003c/span\u003e(base)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    base\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eextend \u003cspan style=\"color:#66d9ef\"\u003eClassMethods\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    base\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eclass_eval \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      scope \u003cspan style=\"color:#e6db74\"\u003e:disabled\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e { where(\u003cspan style=\"color:#e6db74\"\u003edisabled\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e ClassMethods\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://docs.ruby-lang.org/ja/latest/method/Module/i/included.html\"\u003eModule#included\u003c/a\u003e'\u003c/p\u003e\n\u003ch2 id=\"activesupportconcernを使って簡略化\"\u003eActiveSupport::Concernを使って簡略化\u003c/h2\u003e\n\u003cp\u003e上記のような例を、ActiveSupport::Concernを使うことで簡略化できます。\n簡略化ポイントとしては２点で、①extendする部分をわざわざ書かなくて良い、②読み込み先のクラスが依存関係を書かなくて良い、です。\u003c/p\u003e\n\u003ch3 id=\"extendをわざわざ書かなくて良い\"\u003eextendをわざわざ書かなくて良い\u003c/h3\u003e\n\u003cp\u003e上記の例は、以下のように書けるようです\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erequire \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;active_support/concern\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e M\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# Concernをextendする\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eextend\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eActiveSupport\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eConcern\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# includedのブロックとして渡すと、includeされた時に定義される\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  included \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    scope \u003cspan style=\"color:#e6db74\"\u003e:disabled\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e { where(\u003cspan style=\"color:#e6db74\"\u003edisabled\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# Concernのclass_methodsにブロックを渡して評価する、すなわちクラスメソッドして扱えるようになる\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  class_methods \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eincludedやclass_methodにブロックとしてメソッドや変数を渡すことによって、自分でクラスメソッドのモジュールを作成して読み込むみたいな面倒なことをしなくて良い\u003c/p\u003e\n\u003ch3 id=\"読み込み先のクラスが依存関係を書かなくて良い\"\u003e読み込み先のクラスが依存関係を書かなくて良い\u003c/h3\u003e\n\u003cp\u003emodule Fooに依存しているmodule Barをclass Hostにmix-inしたい時、Hostは二つのmoduleをどちらもincludeしないといけない、面倒ですね\u003c/p\u003e","title":"[rails]ActiveSupport::Concern"},{"content":"[rails]config.eager_load railsを使っていてたまに聞く言葉としてeager_loadがあり、どういうものなのかよく認識していなかったので調査しました。 ActiveRecordでの関連テーブルの一括読み込みのeager loadingはまた別でまとめます。\nconfig.eager_loadは何か Rails Applicationを設定するでconfig.eager_loadにbool値が設定できます\nconfig.eager_load: trueにすると、config.eager_load_namespacesに登録された事前一括読み込み(eager loading)用の名前空間をすべて読み込みます。ここにはアプリケーション、エンジン、Railsフレームワ ークを含むあらゆる登録済み名前空間が含まれます。 Railsのアプリケーションを作成した時、デフォルトでは、development.rbはfalse, production.rbはtrueになっています。本番は迅速なレスポンスを返し、開発環境ではメモリ消費を抑えることを意識しているものと思います。\nconfig.eager_load = falseのとき、何が起こるのか 参考）Railsの config.eager_load はModelやControllerを読み込むタイミングを制御できる\nconfig.eager_load = falseの場合、クラスが呼び出されるまでクラスが定義として存在しません\n# 使用するまでUserクラスは存在しない irb(main):001:0\u0026gt; Object.const_defined?(\u0026#39;User\u0026#39;) # =\u0026gt; false irb(main):002:0\u0026gt; User.all User Load (6.8ms) SELECT \u0026#34;users\u0026#34;.* FROM \u0026#34;users\u0026#34; LIMIT $1 [[\u0026#34;LIMIT\u0026#34;, 11]] # =\u0026gt; #\u0026lt;ActiveRecord::Relation [#\u0026lt;User id: 1, name: \u0026#34;Rails Tutorial\u0026#34;,... ]\u0026gt; irb(main):003:0\u0026gt; Object.const_defined?(\u0026#39;User\u0026#39;) # =\u0026gt; true 試しにconfig.eager_load = trueにして再度rails consoleを立ち上げてみます\nirb(main):001:0\u0026gt; Object.const_defined?(\u0026#39;User\u0026#39;) # =\u0026gt; true Userクラスを実際に使用する前に、定義を確認することができました\nコードリーディング railties/lib/rails/application/finisher.rb\n... # initializerに名前とブロックを渡す initializer :eager_load! do if config.eager_load ActiveSupport.run_load_hooks(:before_eager_load, self) # Checks defined?(Zeitwerk) instead of zeitwerk_enabled? because we # want to eager load any dependency managed by Zeitwerk regardless of # the autoloading mode of the application. Zeitwerk::Loader.eager_load_all if defined?(Zeitwerk) config.eager_load_namespaces.each(\u0026amp;:eager_load!) end end ... このZeitwerkを使ったeager_load_allはZeitwerkモードで使用される処理で、これはRails6.0以降で導入されたもの。\nrails 4.2.7のとき\ninitializer :eager_load! do if config.eager_load ActiveSupport.run_load_hooks(:before_eager_load, self) config.eager_load_namespaces.each(\u0026amp;:eager_load!) end end namespacesごとのeager_loadを実行しているぽい、このeager_loadの実態は\n","permalink":"http://localhost:1313/docs/2020/02/rails_config_eager_load/","summary":"\u003ch1 id=\"railsconfigeager_load\"\u003e[rails]config.eager_load\u003c/h1\u003e\n\u003cp\u003erailsを使っていてたまに聞く言葉としてeager_loadがあり、どういうものなのかよく認識していなかったので調査しました。\nActiveRecordでの関連テーブルの一括読み込みのeager loadingはまた別でまとめます。\u003c/p\u003e\n\u003ch2 id=\"configeager_loadは何か\"\u003e\u003ccode\u003econfig.eager_load\u003c/code\u003eは何か\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://railsguides.jp/configuring.html\"\u003eRails Applicationを設定する\u003c/a\u003eで\u003ccode\u003econfig.eager_load\u003c/code\u003eにbool値が設定できます\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econfig.eager_load: trueにすると、config.eager_load_namespacesに登録された事前一括読み込み(eager loading)用の名前空間をすべて読み込みます。ここにはアプリケーション、エンジン、Railsフレームワ ークを含むあらゆる登録済み名前空間が含まれます。\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRailsのアプリケーションを作成した時、デフォルトでは、\u003ccode\u003edevelopment.rb\u003c/code\u003eは\u003ccode\u003efalse\u003c/code\u003e, \u003ccode\u003eproduction.rb\u003c/code\u003eは\u003ccode\u003etrue\u003c/code\u003eになっています。本番は迅速なレスポンスを返し、開発環境ではメモリ消費を抑えることを意識しているものと思います。\u003c/p\u003e\n\u003ch3 id=\"configeager_load--falseのとき何が起こるのか\"\u003e\u003ccode\u003econfig.eager_load = false\u003c/code\u003eのとき、何が起こるのか\u003c/h3\u003e\n\u003cp\u003e参考）\u003ca href=\"https://qiita.com/shakemurasan/items/305bd3d78d67b646bc06\"\u003eRailsの config.eager_load はModelやControllerを読み込むタイミングを制御できる\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003econfig.eager_load = false\u003c/code\u003eの場合、クラスが呼び出されるまでクラスが定義として存在しません\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 使用するまでUserクラスは存在しない\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eirb(main):\u003cspan style=\"color:#ae81ff\"\u003e001\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eObject\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003econst_defined?(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;User\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; false\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eirb(main):\u003cspan style=\"color:#ae81ff\"\u003e002\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eUser\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eall\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eUser\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eLoad\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003ems)  \u003cspan style=\"color:#66d9ef\"\u003eSELECT\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;users\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e* \u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;users\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eLIMIT\u003c/span\u003e $1  \u003cspan style=\"color:#f92672\"\u003e[[\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;LIMIT\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e]]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; #\u0026lt;ActiveRecord::Relation [#\u0026lt;User id: 1, name: \u0026#34;Rails Tutorial\u0026#34;,... ]\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eirb(main):\u003cspan style=\"color:#ae81ff\"\u003e003\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eObject\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003econst_defined?(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;User\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; true\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e試しに\u003ccode\u003econfig.eager_load = true\u003c/code\u003eにして再度\u003ccode\u003erails console\u003c/code\u003eを立ち上げてみます\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eirb(main):\u003cspan style=\"color:#ae81ff\"\u003e001\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eObject\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003econst_defined?(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;User\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; true\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eUserクラスを実際に使用する前に、定義を確認することができました\u003c/p\u003e\n\u003ch3 id=\"コードリーディング\"\u003eコードリーディング\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003erailties/lib/rails/application/finisher.rb\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# initializerに名前とブロックを渡す\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      initializer \u003cspan style=\"color:#e6db74\"\u003e:eager_load!\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e config\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eeager_load\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003eActiveSupport\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erun_load_hooks(\u003cspan style=\"color:#e6db74\"\u003e:before_eager_load\u003c/span\u003e, self)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#75715e\"\u003e# Checks defined?(Zeitwerk) instead of zeitwerk_enabled? because we\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#75715e\"\u003e# want to eager load any dependency managed by Zeitwerk regardless of\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#75715e\"\u003e# the autoloading mode of the application.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003eZeitwerk\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eLoader\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eeager_load_all \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e defined?(\u003cspan style=\"color:#66d9ef\"\u003eZeitwerk\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          config\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eeager_load_namespaces\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eeach(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e:eager_load!\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこのZeitwerkを使ったeager_load_allは\u003ca href=\"https://railsguides.jp/autoloading_and_reloading_constants.html#zeitwerk%E3%83%A2%E3%83%BC%E3%83%89%E3%82%92%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B\"\u003eZeitwerkモード\u003c/a\u003eで使用される処理で、これはRails6.0以降で導入されたもの。\u003c/p\u003e","title":"[rails]config.eager_load"},{"content":"[rails]Enumについて学ぶ railsの仕様として用意されているenumについてメモ\nhttps://railsguides.jp/active_record_querying.html#enums https://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html\n整数のカラムを値の集合にマッピングできる。 下記の例で言うと、availabilityと言う整数のカラムに対して、:available, :unavailableと言う値をマッピングさせている\nclass Book \u0026lt; ApplicationRecord enum availability: [:available, :unavailable] end こうすると、検索の時以下のように書ける\n# 下の両方の例で、利用可能な本を問い合わせている Book.available # または Book.where(availability: :available) book = Book.new(availability: :available) book.available? # =\u0026gt; true book.unavailable! # =\u0026gt; true book.available? # =\u0026gt; false 割り当てられる整数は自動で0から始まるけれど、一応任意で指定もできる。\nclass Conversation \u0026lt; ActiveRecord::Base enum status: { active: 0, archived: 1 } end ","permalink":"http://localhost:1313/docs/2020/10/rails_enum/","summary":"\u003ch1 id=\"railsenumについて学ぶ\"\u003e[rails]Enumについて学ぶ\u003c/h1\u003e\n\u003cp\u003erailsの仕様として用意されているenumについてメモ\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://railsguides.jp/active_record_querying.html#enums\"\u003ehttps://railsguides.jp/active_record_querying.html#enums\u003c/a\u003e\n\u003ca href=\"https://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html\"\u003ehttps://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e整数のカラムを値の集合にマッピングできる。\n下記の例で言うと、\u003ccode\u003eavailability\u003c/code\u003eと言う整数のカラムに対して、\u003ccode\u003e:available\u003c/code\u003e, \u003ccode\u003e:unavailable\u003c/code\u003eと言う値をマッピングさせている\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eBook\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eApplicationRecord\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  enum \u003cspan style=\"color:#e6db74\"\u003eavailability\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e:available\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e:unavailable\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこうすると、検索の時以下のように書ける\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 下の両方の例で、利用可能な本を問い合わせている\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eBook\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eavailable\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# または\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eBook\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewhere(\u003cspan style=\"color:#e6db74\"\u003eavailability\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e:available\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebook \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eBook\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enew(\u003cspan style=\"color:#e6db74\"\u003eavailability\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e:available\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebook\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eavailable?   \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; true\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebook\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eunavailable! \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; true\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebook\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eavailable?   \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; false\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e割り当てられる整数は自動で0から始まるけれど、一応任意で指定もできる。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eConversation\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eActiveRecord\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eBase\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  enum \u003cspan style=\"color:#e6db74\"\u003estatus\u003c/span\u003e: { \u003cspan style=\"color:#e6db74\"\u003eactive\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003earchived\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[rails]Enumについて学ぶ"},{"content":"[rake]初めてのrake RAKE – Ruby Makeについて調べました\nRakeとは Rakeとは、MakeのようなことをするためのRubyの実装、 Ruby + makeでrake\nとにかく使ってみる simple exampleを実行してみる\nRakefileを作成 task default: %w[test] task :test do ruby \u0026#34;test/unittest.rb\u0026#34; end 下記コマンドを実行すると\b…unittest.rbが実行される\nrake # ruby test/unittest.rb rake test # ruby test/unittest.rb # これも同じ結果になる rake taskを増やしたい task :test do ... end task :md_to_html do md_file = \u0026#34;new.md\u0026#34; html_file = \u0026#34;new.html\u0026#34; sh \u0026#34;pandoc -o #{html_file} #{md_file}\u0026#34; end rake md_to_html # pandoc -o new.html new.md 追加できた、色々描けるみたい\nfile task を追加する ファイルの作成をするためのタスクは、task ~ でなく、file ~　で始める。 https://github.com/ruby/rake/blob/master/doc/rakefile.rdoc#label-File+Tasks\n#Rakefile file \u0026#39;foo.txt\u0026#39; do touch \u0026#39;foo.txt\u0026#39; end rake foo.txt # touch foo.txt rake foo.txt # 二回目はもうやらない rm foo.txt rake foo.txt # touch foo.txt 正直、通常のtaskと何が違うのかよくわからなかった\n# Rakefile task \u0026#39;bar.txt\u0026#39; do touch \u0026#39;bar.txt\u0026#39; end rake bar.txt # touch bar.txt rake bar.txt # touch bar.txt # もう一度実行されるけど、中身をうわがいているわけではなさそうだった directory taskを追加する # Rakefile directory \u0026#34;testdata/examples/doc\u0026#34; rake testdata/examples/doc # mkdir -p testdata/examples/doc 並列実行 # Rakefile multitask copy_files: %w[copy_src copy_doc copy_bin] do puts \u0026#34;All Copies Complete\u0026#34; end task :copy_src do sh \u0026#34;cp bar.txt src/bar.txt\u0026#34; end task :copy_doc do sh \u0026#34;cp bar.txt doc/bar.txt\u0026#34; end task :copy_bin do sh \u0026#34;cp bar.txt bin/bar.txt\u0026#34; end rake copy_files cp bar.txt bin/bar.txt cp bar.txt src/bar.txt cp bar.txt doc/bar.txt All Copies Complete taskに引数を渡す # Rakefile task :name, [:first_name, :last_name] do |t, args| puts \u0026#34;First name is #{args.first}\u0026#34; puts \u0026#34;Last name is #{args.last}\u0026#34; end ちなみに、tについて\nThe first argument of the block “t” is always bound to the current task object.\nrake name[aaa,bbb] # First name is aaa # Last name is bbb Accessing Task programatically https://github.com/ruby/rake/blob/master/doc/rakefile.rdoc#label-Accessing+Task+Programmatically\nRake::Task[:taskname]で、他のタスクにアクセスできる\n# Rakefile task :doit do puts \u0026#34;DONE\u0026#34; end task :dont do Rake::Task[:doit].clear end Rules 特定のファイルに対するfileタスクがなくとも、ruleを設定しておくことによって、タスクを実行させることができる\n# Rakefile rule \u0026#39;.txt\u0026#39; do |task| puts \u0026#39;creating file: %s\u0026#39; % task.name touch task.name end rake helloworld.txt # creating file: helloworld.txt # touch helloworld.txt これうまくいかないけどなんでだろ\n# Rakefile rule \u0026#39;.html\u0026#39; =\u0026gt; \u0026#39;.md\u0026#39; do |t| sh \u0026#34;pandoc -o #{t.name} #{t.source}\u0026#34; end Namespaces db:migrateとかでよく見ている気がする\n# Rakefile namespace \u0026#34;main\u0026#34; do task :build do puts \u0026#34;this is main build\u0026#34; end end namespace \u0026#34;samples\u0026#34; do task :build do puts \u0026#34;this is sample build\u0026#34; end end task build: %w[main:build samples:build] rake main:build # this is main build rake samples:build # this is sample build rake build # this is main build # this is sample build 残った疑問 rubyっぽく見えるけどshellコマンドはどこまで投げられるの ファイル分けられないの？全部Rakefile？ ","permalink":"http://localhost:1313/docs/2020/04/rake_getting_started/","summary":"\u003ch1 id=\"rake初めてのrake\"\u003e[rake]初めてのrake\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://ruby.github.io/rake/\"\u003eRAKE – Ruby Make\u003c/a\u003eについて調べました\u003c/p\u003e\n\u003ch2 id=\"rakeとは\"\u003eRakeとは\u003c/h2\u003e\n\u003cp\u003eRakeとは、MakeのようなことをするためのRubyの実装、\nRuby + makeでrake\u003c/p\u003e\n\u003ch3 id=\"とにかく使ってみる\"\u003eとにかく使ってみる\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ruby/rake#label-Simple+Example\"\u003esimple example\u003c/a\u003eを実行してみる\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eRakefile\u003c/code\u003eを作成\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etask \u003cspan style=\"color:#e6db74\"\u003edefault\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e%w[test]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etask \u003cspan style=\"color:#e6db74\"\u003e:test\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ruby \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;test/unittest.rb\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e下記コマンドを実行すると\b…unittest.rbが実行される\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erake\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# ruby test/unittest.rb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erake test\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# ruby test/unittest.rb \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# これも同じ結果になる\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"rake-taskを増やしたい\"\u003erake taskを増やしたい\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etask \u003cspan style=\"color:#e6db74\"\u003e:test\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etask \u003cspan style=\"color:#e6db74\"\u003e:md_to_html\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  md_file \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;new.md\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  html_file \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;new.html\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  sh \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pandoc -o \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003ehtml_file\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003emd_file\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erake md_to_html\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# pandoc -o new.html new.md\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e追加できた、\u003ca href=\"https://github.com/ruby/rake/blob/master/doc/rakefile.rdoc#label-Multiple+Definitions\"\u003e色々描けるみたい\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"file-task-を追加する\"\u003efile task を追加する\u003c/h3\u003e\n\u003cp\u003eファイルの作成をするためのタスクは、\u003ccode\u003etask\u003c/code\u003e ~ でなく、\u003ccode\u003efile\u003c/code\u003e ~　で始める。\n\u003ca href=\"https://github.com/ruby/rake/blob/master/doc/rakefile.rdoc#label-File+Tasks\"\u003ehttps://github.com/ruby/rake/blob/master/doc/rakefile.rdoc#label-File+Tasks\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#Rakefile\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efile \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;foo.txt\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  touch \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;foo.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erake foo.txt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# touch foo.txt\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erake foo.txt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 二回目はもうやらない\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erm foo.txt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erake foo.txt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# touch foo.txt\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e正直、通常のtaskと何が違うのかよくわからなかった\u003c/p\u003e","title":"[rake]初めてのrake"},{"content":"[Rspec] 定数のスタブ RSpecでは定数をスタブすることができる. テストの時のみ、変更したい定数がある時など有効だと思う\nhttps://relishapp.com/rspec/rspec-mocks/docs/mutating-constants これを読む\nstubする 基本 stub_const(\u0026#34;Foo\u0026#34;, fake_foo) Foo # =\u0026gt; fake_foo ネスト moduleのネストは考慮されないので、ネストされている場合はそれを書く必要がある\nmodule A class B end end module A describe do it { stub_const(\u0026#39;B\u0026#39;, Class.new) } # B classが対象にならない it { stub_const(\u0026#39;A::B\u0026#39;, Class.new) } # ちゃんとフルで書く end end スタブしたClassの定数だけ参照する :transfer_nested_constants これは、サイトに載っているサンプルがわかりやすいのでそのまま参照しているのだけど、 スタブしたClassについて、定数を参照したい場合、:transfer_nested_constantsを利用するとその定数が使えるようになる。 例えば、外部ライブラリをモックした時などに使えそう\nclass CardDeck SUITS = [:Spades, :Diamonds, :Clubs, :Hearts] NUM_CARDS = 52 end fake_class = Class.new stub_const(\u0026#34;CardDeck\u0026#34;, fake_class) CardDeck # =\u0026gt; fake_class CardDeck::SUITS # =\u0026gt; raises uninitialized constant error CardDeck::NUM_CARDS # =\u0026gt; raises uninitialized constant error stub_const(\u0026#34;CardDeck\u0026#34;, fake_class, :transfer_nested_constants =\u0026gt; true) CardDeck::SUITS # =\u0026gt; [:Spades, :Diamonds, :Clubs, :Hearts] CardDeck::NUM_CARDS # =\u0026gt; 52 stub_const(\u0026#34;CardDeck\u0026#34;, fake_class, :transfer_nested_constants =\u0026gt; [:SUITS]) CardDeck::SUITS # =\u0026gt; [:Spades, :Diamonds, :Clubs, :Hearts] CardDeck::NUM_CARDS # =\u0026gt; raises uninitialized constant error 定数を隠す hide_const 環境変数が存在する場合/しない場合のテストに使えそう\nFOO = 42 hide_const(\u0026#34;FOO\u0026#34;) FOO # =\u0026gt; NameError: uninitialized constant FOO ","permalink":"http://localhost:1313/docs/2020/10/rspec_stub_constants/","summary":"\u003ch1 id=\"rspec-定数のスタブ\"\u003e[Rspec] 定数のスタブ\u003c/h1\u003e\n\u003cp\u003eRSpecでは定数をスタブすることができる.\nテストの時のみ、変更したい定数がある時など有効だと思う\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://relishapp.com/rspec/rspec-mocks/docs/mutating-constants\"\u003ehttps://relishapp.com/rspec/rspec-mocks/docs/mutating-constants\u003c/a\u003e\nこれを読む\u003c/p\u003e\n\u003ch2 id=\"stubする\"\u003estubする\u003c/h2\u003e\n\u003ch3 id=\"基本\"\u003e基本\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estub_const(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Foo\u0026#34;\u003c/span\u003e, fake_foo)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eFoo\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; fake_foo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"ネスト\"\u003eネスト\u003c/h4\u003e\n\u003cp\u003emoduleのネストは考慮されないので、ネストされている場合はそれを書く必要がある\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e A\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e A\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    describe \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        it { stub_const(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;B\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eClass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enew) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# B classが対象にならない\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        it { stub_const(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;A::B\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eClass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enew) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# ちゃんとフルで書く\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"スタブしたclassの定数だけ参照する-transfer_nested_constants\"\u003eスタブしたClassの定数だけ参照する \u003ccode\u003e:transfer_nested_constants\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eこれは、サイトに載っているサンプルがわかりやすいのでそのまま参照しているのだけど、\nスタブしたClassについて、定数を参照したい場合、\u003ccode\u003e:transfer_nested_constants\u003c/code\u003eを利用するとその定数が使えるようになる。\n例えば、外部ライブラリをモックした時などに使えそう\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCardDeck\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eSUITS\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e:Spades\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e:Diamonds\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e:Clubs\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e:Hearts\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eNUM_CARDS\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e52\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efake_class \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eClass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enew\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estub_const(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CardDeck\u0026#34;\u003c/span\u003e, fake_class)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eCardDeck\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; fake_class\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eCardDeck\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eSUITS\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; raises uninitialized constant error\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eCardDeck\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eNUM_CARDS\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; raises uninitialized constant error\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estub_const(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CardDeck\u0026#34;\u003c/span\u003e, fake_class, \u003cspan style=\"color:#e6db74\"\u003e:transfer_nested_constants\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eCardDeck\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eSUITS\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; [:Spades, :Diamonds, :Clubs, :Hearts]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eCardDeck\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eNUM_CARDS\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; 52\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estub_const(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CardDeck\u0026#34;\u003c/span\u003e, fake_class, \u003cspan style=\"color:#e6db74\"\u003e:transfer_nested_constants\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e:SUITS\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eCardDeck\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eSUITS\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; [:Spades, :Diamonds, :Clubs, :Hearts]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eCardDeck\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eNUM_CARDS\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; raises uninitialized constant error\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"定数を隠す-hide_const\"\u003e定数を隠す \u003ccode\u003ehide_const\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003e環境変数が存在する場合/しない場合のテストに使えそう\u003c/p\u003e","title":"[Rspec] 定数のスタブ"},{"content":"[Rspec]Mocks Basics RSpecのmockについて学びました\nhttps://relishapp.com/rspec/rspec-mocks/v/3-9/docs/basics/\nTest Doubles Doubleオブジェクトは、本当のオブジェクトの代替として使用できる。 ただし、このままだとメソッドを呼ぶことはできない。\nRSpec.describe \u0026#34;A test double\u0026#34; do it \u0026#34;raises errors when messages not allowed or expected are received\u0026#34; do dbl = double(\u0026#34;Some Collaborator\u0026#34;) # これはエラーになる dbl.foo end end Allowing messages double()でモックオブジェクトを作っただけだと、メソッドを代替して呼べたりはしないので、メッセージングがしたい場合は、allow().to receiveを使う必要がある。\nRSpec.describe \u0026#34;allow\u0026#34; do it \u0026#34;returns nil from allowed messages\u0026#34; do dbl = double(\u0026#34;Some Collaborator\u0026#34;) # dblのオブジェクトがfooメソッドを呼べるようになる allow(dbl).to receive(:foo) expect(dbl.foo).to be_nil end end Expecting messages メッセージを受け取れる（≒メソッドを呼べる）ようになったdoubleオブジェクトに対して、実際に呼ばれたかをテストすることができる。\nRSpec.describe \u0026#34;A fulfilled positive message expectation\u0026#34; do it \u0026#34;passes\u0026#34; do dbl = double(\u0026#34;Some Collaborator\u0026#34;) expect(dbl).to receive(:foo) dbl.foo end end Spies double()の代わりに、spy()を使うことで、全てのメソッドの使用を追うことができる。これは、allowが不要。\nRSpec.describe \u0026#34;have_received\u0026#34; do it \u0026#34;passes when the message has been received\u0026#34; do invitation = spy(\u0026#39;invitation\u0026#39;) invitation.deliver expect(invitation).to have_received(:deliver) end end また、通常のオブジェクトも、allowを使うことでメソッドを使ったかを追跡できる。\nclass Invitation def self.deliver; end end RSpec.describe \u0026#34;have_received\u0026#34; do it \u0026#34;passes when the expectation is met\u0026#34; do allow(Invitation).to receive(:deliver) Invitation.deliver expect(Invitation).to have_received(:deliver) end end ","permalink":"http://localhost:1313/docs/2020/03/rspec_mocks/","summary":"\u003ch1 id=\"rspecmocks-basics\"\u003e[Rspec]Mocks Basics\u003c/h1\u003e\n\u003cp\u003eRSpecのmockについて学びました\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/basics/\"\u003ehttps://relishapp.com/rspec/rspec-mocks/v/3-9/docs/basics/\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"test-doubles\"\u003eTest Doubles\u003c/h2\u003e\n\u003cp\u003eDoubleオブジェクトは、本当のオブジェクトの代替として使用できる。\nただし、このままだとメソッドを呼ぶことはできない。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eRSpec\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edescribe \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A test double\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  it \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;raises errors when messages not allowed or expected are received\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    dbl \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e double(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Some Collaborator\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# これはエラーになる\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    dbl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efoo\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"allowing-messages\"\u003eAllowing messages\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003edouble()\u003c/code\u003eでモックオブジェクトを作っただけだと、メソッドを代替して呼べたりはしないので、メッセージングがしたい場合は、\u003ccode\u003eallow().to receive\u003c/code\u003eを使う必要がある。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eRSpec\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edescribe \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;allow\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  it \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;returns nil from allowed messages\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    dbl \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e double(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Some Collaborator\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# dblのオブジェクトがfooメソッドを呼べるようになる\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    allow(dbl)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eto receive(\u003cspan style=\"color:#e6db74\"\u003e:foo\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    expect(dbl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efoo)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eto be_nil\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"expecting-messages\"\u003eExpecting messages\u003c/h2\u003e\n\u003cp\u003eメッセージを受け取れる（≒メソッドを呼べる）ようになったdoubleオブジェクトに対して、実際に呼ばれたかをテストすることができる。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eRSpec\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edescribe \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A fulfilled positive message expectation\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  it \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;passes\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    dbl \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e double(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Some Collaborator\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    expect(dbl)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eto receive(\u003cspan style=\"color:#e6db74\"\u003e:foo\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    dbl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efoo\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"spies\"\u003eSpies\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003edouble()\u003c/code\u003eの代わりに、\u003ccode\u003espy()\u003c/code\u003eを使うことで、全てのメソッドの使用を追うことができる。これは、\u003ccode\u003eallow\u003c/code\u003eが不要。\u003c/p\u003e","title":"[Rspec]Mocks Basics"},{"content":"[Rspec]Spyについて RspecのSpyという機能について調査しました\nSpyとは何か 公式ドキュメント\nYou can use any test double (or partial double) as a spy, but the double must be setup to spy on the messages you care about. Spies automatically spy on all messages, or you can allow a message to spy on it. 説明文のmessageというのが意味が取りづらい…けど、オブジェクト指向でいうところのmessageなのかな。\ndoubleオブジェクトの呼び出されたメソッドを全て監視することもできるし、特定のメソッドを監視することができる機能がSpy機能として捉えてます。\nオブジェクトの挙動の監視 https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/basics/spies#using-a-spy\nspyのオブジェクトが実行したどんなメソッドも追えていて、have_receivedで実行したことを確認できる。\nRSpec.describe \u0026#34;have_received\u0026#34; do it \u0026#34;passes when the message has been received\u0026#34; do spy_object = spy(\u0026#39;spy_object\u0026#39;) spy_object.do_something spy_object.do_something_else expect(spy_object).to have_received(:do_something) expect(spy_object).to have_received(:do_something_else) end end 特定のメソッドの実行を追う https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/basics/spies#spy-on-a-method-on-a-partial-double\nRSpec.describe User, type: :model do subject { User.new } it \u0026#39;do something\u0026#39; do # 呼ばれることを確認したいメソッドを指定する allow(subject).to receive(:update_attribute) subject.update_attribute(:email, \u0026#39;example+1@example.com\u0026#39;) expect(subject).to have_received(:update_attribute) end end 呼ばれた回数をチェックする RSpec.describe User, type: :model do subject { User.new } it \u0026#39;do something\u0026#39; do allow(subject).to receive(:update_attribute) subject.update_attribute(:email, \u0026#39;example+1@example.com\u0026#39;) # once expect(subject).to have_received(:update_attribute).once end end 参考リンク Rails tips: RSpecの「スパイ（spy）」の解説（翻訳）\n","permalink":"http://localhost:1313/docs/2020/03/rspec_spies/","summary":"\u003ch1 id=\"rspecspyについて\"\u003e[Rspec]Spyについて\u003c/h1\u003e\n\u003cp\u003eRspecのSpyという機能について調査しました\u003c/p\u003e\n\u003ch2 id=\"spyとは何か\"\u003eSpyとは何か\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/basics/spies\"\u003e公式ドキュメント\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eYou can use any test double (or partial double) as a spy, but the double must be setup to spy on the messages you care about. Spies automatically spy on all messages, or you can allow a message to spy on it.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e説明文の\u003ccode\u003emessage\u003c/code\u003eというのが意味が取りづらい…けど、\u003ca href=\"https://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0#%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8\"\u003eオブジェクト指向でいうところのmessage\u003c/a\u003eなのかな。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003edouble\u003c/code\u003eオブジェクトの呼び出されたメソッドを全て監視することもできるし、特定のメソッドを監視することができる機能がSpy機能として捉えてます。\u003c/p\u003e\n\u003ch3 id=\"オブジェクトの挙動の監視\"\u003eオブジェクトの挙動の監視\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/basics/spies#using-a-spy\"\u003ehttps://relishapp.com/rspec/rspec-mocks/v/3-9/docs/basics/spies#using-a-spy\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003espyのオブジェクトが実行したどんなメソッドも追えていて、have_receivedで実行したことを確認できる。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eRSpec\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edescribe \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;have_received\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  it \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;passes when the message has been received\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    spy_object \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e spy(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;spy_object\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    spy_object\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edo_something\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    spy_object\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edo_something_else\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    expect(spy_object)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eto have_received(\u003cspan style=\"color:#e6db74\"\u003e:do_something\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    expect(spy_object)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eto have_received(\u003cspan style=\"color:#e6db74\"\u003e:do_something_else\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"特定のメソッドの実行を追う\"\u003e特定のメソッドの実行を追う\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/basics/spies#spy-on-a-method-on-a-partial-double\"\u003ehttps://relishapp.com/rspec/rspec-mocks/v/3-9/docs/basics/spies#spy-on-a-method-on-a-partial-double\u003c/a\u003e\u003c/p\u003e","title":"[Rspec]Spyについて"},{"content":"[Rspec]Verifying doubles について学ぶ Relishのドキュメントを読んで、Verifying doublesについて学びました。\nhttps://relishapp.com/rspec/rspec-mocks/v/3-9/docs/verifying-doubles\nVerifying doublesとはなんなのか When using verifying doubles, RSpec will check that the methods being stubbed are actually present on the underlying object if it is available.\n元となるオブジェクトがあるかを検証しているので、検証doublesらしい。 通常のdoublesは代替元となるオブジェクトの存在有無を確かめずにテストを通すが、verifying doublesの場合、指定したオブジェクトやクラスが存在しない場合はfailする。\nVerifying doublesの種類について instance double https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/verifying-doubles/using-an-instance-double\ninstance_double()で\nrequire \u0026#39;unit_helper\u0026#39; require \u0026#39;user\u0026#39; RSpec.describe User, \u0026#39;#suspend!\u0026#39; do it \u0026#39;notifies the console\u0026#39; do # 引数にオブジェクトを渡しても良い notifier = instance_double(\u0026#34;ConsoleNotifier\u0026#34;) expect(notifier).to receive(:notify).with(\u0026#34;suspended as\u0026#34;) user = User.new(notifier) user.suspend! end end class double instance doubleと異なり、クラスメソッドの実装を保証する。\nrequire \u0026#39;user\u0026#39; require \u0026#39;console_notifier\u0026#39; RSpec.describe User, \u0026#39;#suspend!\u0026#39; do it \u0026#39;notifies the console\u0026#39; do notifier = class_double(\u0026#34;ConsoleNotifier\u0026#34;). as_stubbed_const(:transfer_nested_constants =\u0026gt; true) # notifyはCosoleNotifierのクラスメソッド expect(notifier).to receive(:notify).with(\u0026#34;suspended as\u0026#34;) expect(ConsoleNotifier::MAX_WIDTH).to eq(80) user = User.new user.suspend! end end object double object_double can be used to create a double from an existing \u0026ldquo;template\u0026rdquo; object, from which it verifies that any stubbed methods on the double also exist on the template.\n生成されたオブジェクトを引数として渡す\nDynamic classes Partial doubles ","permalink":"http://localhost:1313/docs/2020/07/rspec_verifying_double/","summary":"\u003ch1 id=\"rspecverifying-doubles-について学ぶ\"\u003e[Rspec]Verifying doubles について学ぶ\u003c/h1\u003e\n\u003cp\u003eRelishのドキュメントを読んで、Verifying doublesについて学びました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/verifying-doubles\"\u003ehttps://relishapp.com/rspec/rspec-mocks/v/3-9/docs/verifying-doubles\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"verifying-doublesとはなんなのか\"\u003eVerifying doublesとはなんなのか\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhen using verifying doubles, RSpec will check that the methods\nbeing stubbed are actually present on the underlying object if it is available.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e元となるオブジェクトがあるかを検証しているので、検証doublesらしい。\n通常のdoublesは代替元となるオブジェクトの存在有無を確かめずにテストを通すが、verifying doublesの場合、指定したオブジェクトやクラスが存在しない場合はfailする。\u003c/p\u003e\n\u003ch2 id=\"verifying-doublesの種類について\"\u003eVerifying doublesの種類について\u003c/h2\u003e\n\u003ch3 id=\"instance-double\"\u003einstance double\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://relishapp.com/rspec/rspec-mocks/v/3-9/docs/verifying-doubles/using-an-instance-double\"\u003ehttps://relishapp.com/rspec/rspec-mocks/v/3-9/docs/verifying-doubles/using-an-instance-double\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003einstance_double()\u003c/code\u003eで\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erequire \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;unit_helper\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erequire \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;user\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eRSpec\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edescribe \u003cspan style=\"color:#66d9ef\"\u003eUser\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;#suspend!\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  it \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;notifies the console\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 引数にオブジェクトを渡しても良い\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    notifier \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e instance_double(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ConsoleNotifier\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    expect(notifier)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eto receive(\u003cspan style=\"color:#e6db74\"\u003e:notify\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;suspended as\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    user \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eUser\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enew(notifier)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    user\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esuspend!\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"class-double\"\u003eclass double\u003c/h3\u003e\n\u003cp\u003einstance doubleと異なり、クラスメソッドの実装を保証する。\u003c/p\u003e","title":"[Rspec]Verifying doubles"},{"content":"[RSpec]メモ 参考リンク） https://magazine.rubyist.net/articles/0035/0035-RSpecInPractice.html\nRSpecとは Rubyのテスティングフレームワーク。minitestと比べて何がいいのかや、使い方について悩むところがあったのでメモ。\ndescribeとcontext 参考リンク\nテストコードに構造を作るために, itの上位階層としてdescribeとcontextを使用する\ndescribe \u0026#39;テストする対象（メソッド名など）\u0026#39; do context \u0026#39;テストするときの状況(〜の場合）\u0026#39; do it \u0026#39;求める結果\u0026#39; do expect(subject).to be true end end end subject shouldレシーバが省略できるというメリットの他に、subjectを利用することで、何をテストしているか？が明確になる\nletで可変部分を共通化 shared_contextの利用 複数のテストケースで共通のコンテキストを利用したい場合、shared_contextを利用するとDRYにかける。 shared_contextを利用する箇所にinclude_contextを含めるとOK\nコードの実行回数を数える ちゃんとメソッドが利用されているか？それは期待する数か？（メモ化されているか？） などを確認するために、メソッドの実行回数をテストできる\nhttps://techracho.bpsinc.jp/hachi8833/2018_04_02/54350\n# class_instanceのmethod_nameが一回以上呼ばれていることをテスト expect(class_instance).to have_received(:method_name).at_least(:once) 個人的な感覚だと先にclass_instanceをmock化するパターンが多いように思う\n終わり RSpecの書き方を忘れているので復習中\n","permalink":"http://localhost:1313/docs/2020/07/rspec_memo/","summary":"\u003ch1 id=\"rspecメモ\"\u003e[RSpec]メモ\u003c/h1\u003e\n\u003cp\u003e参考リンク）\n\u003ca href=\"https://magazine.rubyist.net/articles/0035/0035-RSpecInPractice.html\"\u003ehttps://magazine.rubyist.net/articles/0035/0035-RSpecInPractice.html\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"rspecとは\"\u003eRSpecとは\u003c/h2\u003e\n\u003cp\u003eRubyのテスティングフレームワーク。minitestと比べて何がいいのかや、使い方について悩むところがあったのでメモ。\u003c/p\u003e\n\u003ch3 id=\"describeとcontext\"\u003edescribeとcontext\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://magazine.rubyist.net/articles/0035/0035-RSpecInPractice.html#describe-%E3%81%A8-context\"\u003e参考リンク\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eテストコードに構造を作るために, itの上位階層としてdescribeとcontextを使用する\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edescribe \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;テストする対象（メソッド名など）\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    context \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;テストするときの状況(〜の場合）\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        it \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;求める結果\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            expect(subject)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eto be \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"subject\"\u003esubject\u003c/h3\u003e\n\u003cp\u003eshouldレシーバが省略できるというメリットの他に、subjectを利用することで、何をテストしているか？が明確になる\u003c/p\u003e\n\u003ch3 id=\"letで可変部分を共通化\"\u003eletで可変部分を共通化\u003c/h3\u003e\n\u003ch3 id=\"shared_contextの利用\"\u003eshared_contextの利用\u003c/h3\u003e\n\u003cp\u003e複数のテストケースで共通のコンテキストを利用したい場合、\u003ccode\u003eshared_context\u003c/code\u003eを利用するとDRYにかける。\nshared_contextを利用する箇所に\u003ccode\u003einclude_context\u003c/code\u003eを含めるとOK\u003c/p\u003e\n\u003ch3 id=\"コードの実行回数を数える\"\u003eコードの実行回数を数える\u003c/h3\u003e\n\u003cp\u003eちゃんとメソッドが利用されているか？それは期待する数か？（メモ化されているか？）\nなどを確認するために、メソッドの実行回数をテストできる\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://techracho.bpsinc.jp/hachi8833/2018_04_02/54350\"\u003ehttps://techracho.bpsinc.jp/hachi8833/2018_04_02/54350\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# class_instanceのmethod_nameが一回以上呼ばれていることをテスト\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eexpect(class_instance)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eto have_received(\u003cspan style=\"color:#e6db74\"\u003e:method_name\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eat_least(\u003cspan style=\"color:#e6db74\"\u003e:once\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e個人的な感覚だと先にclass_instanceをmock化するパターンが多いように思う\u003c/p\u003e\n\u003ch2 id=\"終わり\"\u003e終わり\u003c/h2\u003e\n\u003cp\u003eRSpecの書き方を忘れているので復習中\u003c/p\u003e","title":"[RSpec]メモ"},{"content":"[Ruby]Bundler周り調査 Bundlerとはなんなのか Gemの依存関係を解決するためのgem。 プロジェクトの依存関係を宣言したGemfileを元に、それらを取得する。\nどうやって取得するの？ rubygems.org（またはsourceに指定されている箇所）に接続して、Gemfileで指定した条件をすべて満たす必要なGemのリストを見つけてインストールします。 既に同じものがあった場合はそれを利用し、インストールしたすべてのバージョンをGemfile.lockに書き込む。\nGemfile.lockと環境の共有 Gemfile.lockが作成されることによって、他ユーザの環境や、開発環境に同じGemを入れることの保証ができる。 例えば、Gemfileにバージョン指定を\u0026gt;= 0.4として記載していた時、 1.5.2がインストールされたとする. これがGemfile.lockに記載され、それを元にインストールされるので、他の環境で勝手に2.0.0が入ったりしないということになる。\nbundle install bundle update bundle install https://bundler.io/v2.0/man/bundle-install.1.html bundle installは、\nGemfile.lockがなければ、依存関係を解決してGemをinstallする。 Gemfile.lockがあって、Gemfileに更新がなければ、Gemfile.lockにしたがってGemをinstallする bundle update bundle updateは、Gemfile.lockを無視して対象のGemの依存関係を解決してGemをインストールする\nbundle update --conservativeの方がいい場合があるのはどうして？ bundle updateは複数のGemが依存しているGemの更新も行ってしまうので、そのようなことを意図していない時は--conservativeオプションをつけた方が良い。（この辺が参考になる)\nリンク先の例に基づくと、gemのthinとrack-perftools-profilerはどちらもrackに依存している\nsource \u0026#34;https://rubygems.org\u0026#34; gem \u0026#34;thin\u0026#34; gem \u0026#34;rack-perftools-profiler\u0026#34; このGemfileがある状態でbundle installすると、thinはrack \u0026gt;= 1.0で、rack-perftools-profilerはrack ~\u0026gt; 1.0が条件なので、それを満たすrackがインストールされる\nFetching source index for https://rubygems.org/ Installing daemons (1.1.0) Installing eventmachine (0.12.10) with native extensions Installing open4 (1.0.1) Installing perftools.rb (0.4.7) with native extensions Installing rack (1.2.1) Installing rack-perftools_profiler (0.0.2) Installing thin (1.2.7) with native extensions Using bundler (1.0.0.rc.3) その後、thinのバージョンを上げたくなって、bundle update thinを実行すると、thinが依存しているGemであるdaemons eventmachine rackもアップデートされる。ただし、rack-perftools_profilerが依存している他のopen4やperftools.rbはアップデートされない。なので、rack-perftools_profilerが依存しているGemのバージョンを意図せず上げてしまった可能性がある。\nこれを防ぐためには、\nbundle updateを使わず、Gemfileに直接アップデートしたいバージョンを記載し、bundle installを実行すると、CONSERV ATIV　UPDATING機能により、daemonsやeventmachineは更新されるが、rackは更新されなくなる。 bundle update --conservativeを利用しても、やはり共有されている依存関係は変更されないようになる。 色々試す rails 4.1.0.rc2 gem -\u0026gt; actionpack 4.1.0.rc2 gem -\u0026gt; rack ~\u0026gt; 1.5.2 (which means \u0026gt;= 1.5.2 and \u0026lt; 1.6.0). rack-cache gem -\u0026gt; rack \u0026gt;= 0.4. # Gemfile ... gem \u0026#39;rails\u0026#39;, \u0026#39;4.1.0.rc2\u0026#39; gem \u0026#39;rack-cache\u0026#39;, \u0026#39;1.1\u0026#39; この時、両方のGemの条件を満たす、rack 1.5.5がインストールされる\nrack (1.5.5) 同じように条件を満たすrack 1.5.4をGemfileで指定した場合、通る？ # Gemfile ... gem \u0026#39;rails\u0026#39;, \u0026#39;4.1.0.rc2\u0026#39; gem \u0026#39;rack-cache\u0026#39;, \u0026#39;1.1\u0026#39; gem \u0026#39;rack\u0026#39;, \u0026#39;1.5.4\u0026#39; bundle installすると下記メッセージがでる Fetching gem metadata from https://rubygems.org/............. Fetching gem metadata from https://rubygems.org/. You have requested: rack = 1.5.4 The bundle currently has rack locked at 1.5.5. Try running `bundle update rack` If you are updating multiple gems in your Gemfile at once, try passing them all to `bundle update` 既に、Gemfile.lockでバージョン1.5.5でロックされているから、bundle updateを使わないといけない -\u0026gt; bundle update rackで実行、更新された\nrailsv6.0.2.2にすると、依存しているrackのバージョンが上がる…どうする？ rails 6.0.2.2 -\u0026gt; actionpack 6.0.2.2 -\u0026gt; rack \u0026ldquo;~\u0026gt; 2.0\u0026rdquo;, \u0026ldquo;\u0026gt;= 2.0.8\u0026rdquo; とりあえず上げてみる #Gemfile ... gem \u0026#39;rails\u0026#39;, \u0026#39; 6.0.2.2\u0026#39; gem \u0026#39;rack-cache\u0026#39;, \u0026#39;1.1\u0026#39; gem \u0026#39;rack\u0026#39;, \u0026#39;1.5.4\u0026#39; やはりrackが固定されているせいで引っかかる！\nBundler could not find compatible versions for gem \u0026#34;rack\u0026#34;: In snapshot (Gemfile.lock): rack (= 1.5.4) In Gemfile: rack (= 1.5.4) rails (= 6.0.2.2) was resolved to 6.0.2.2, which depends on actionpack (= 6.0.2.2) was resolved to 6.0.2.2, which depends on rack (~\u0026gt; 2.0, \u0026gt;= 2.0.8) Running `bundle update` will rebuild your snapshot from scratch, using only the gems in your Gemfile, which may resolve the conflict. どうすれば、6.0.2.2に上げられるか？ まず、Gemfileのrackのバージョンが縛りになっていることは間違いないので、これを2.0.8に上げてみる\ngem \u0026#39;rails\u0026#39;, \u0026#39; 6.0.2.2\u0026#39; gem \u0026#39;rack-cache\u0026#39;, \u0026#39;1.1\u0026#39; # rackを2.0.8にしてみる gem \u0026#39;rack\u0026#39;, \u0026#39;2.0.8\u0026#39; bundle update rack実行で成功\nrack-cacheについて、なんの調整もしていないけど、bundle update時の条件を満たせばそれでいい\ngemspecはなんなの？ gemspecはGemを作るときに依存関係を記述するファイル。\n","permalink":"http://localhost:1313/docs/2020/04/ruby_bundler_and_gemfile/","summary":"\u003ch1 id=\"rubybundler周り調査\"\u003e[Ruby]Bundler周り調査\u003c/h1\u003e\n\u003ch2 id=\"bundlerとはなんなのか\"\u003eBundlerとはなんなのか\u003c/h2\u003e\n\u003cp\u003eGemの依存関係を解決するためのgem。\nプロジェクトの依存関係を宣言した\u003ccode\u003eGemfile\u003c/code\u003eを元に、それらを取得する。\u003c/p\u003e\n\u003ch3 id=\"どうやって取得するの\"\u003eどうやって取得するの？\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003erubygems.org\u003c/code\u003e（またはsourceに指定されている箇所）に接続して、\u003ccode\u003eGemfile\u003c/code\u003eで指定した条件をすべて満たす必要なGemのリストを見つけてインストールします。\n既に同じものがあった場合はそれを利用し、インストールしたすべてのバージョンを\u003ccode\u003eGemfile.lock\u003c/code\u003eに書き込む。\u003c/p\u003e\n\u003ch3 id=\"gemfilelockと環境の共有\"\u003eGemfile.lockと環境の共有\u003c/h3\u003e\n\u003cp\u003eGemfile.lockが作成されることによって、他ユーザの環境や、開発環境に同じGemを入れることの保証ができる。\n例えば、Gemfileにバージョン指定を\u003ccode\u003e\u0026gt;= 0.4\u003c/code\u003eとして記載していた時、\n\u003ccode\u003e1.5.2\u003c/code\u003eがインストールされたとする.\nこれがGemfile.lockに記載され、それを元にインストールされるので、他の環境で勝手に\u003ccode\u003e2.0.0\u003c/code\u003eが入ったりしないということになる。\u003c/p\u003e\n\u003ch3 id=\"bundle-install-bundle-update\"\u003e\u003ccode\u003ebundle install\u003c/code\u003e \u003ccode\u003ebundle update\u003c/code\u003e\u003c/h3\u003e\n\u003ch4 id=\"bundle-install\"\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003e\u003ca href=\"https://bundler.io/v2.0/man/bundle-install.1.html\"\u003ehttps://bundler.io/v2.0/man/bundle-install.1.html\u003c/a\u003e\nbundle installは、\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eGemfile.lock\u003c/code\u003eがなければ、依存関係を解決してGemをinstallする。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eGemfile.lock\u003c/code\u003eがあって、\u003ccode\u003eGemfile\u003c/code\u003eに更新がなければ、\u003ccode\u003eGemfile.lock\u003c/code\u003eにしたがってGemをinstallする\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"bundle-update\"\u003e\u003ccode\u003ebundle update\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003ebundle updateは、\u003ccode\u003eGemfile.lock\u003c/code\u003eを無視して対象のGemの依存関係を解決してGemをインストールする\u003c/p\u003e\n\u003ch5 id=\"bundle-update---conservativeの方がいい場合があるのはどうして\"\u003e\u003ccode\u003ebundle update --conservative\u003c/code\u003eの方がいい場合があるのはどうして？\u003c/h5\u003e\n\u003cp\u003e\u003ccode\u003ebundle update\u003c/code\u003eは複数のGemが依存しているGemの更新も行ってしまうので、そのようなことを意図していない時は\u003ccode\u003e--conservative\u003c/code\u003eオプションをつけた方が良い。（\u003ca href=\"https://bundler.io/v2.0/man/bundle-update.1.html#OVERLAPPING-DEPENDENCIES\"\u003eこの辺\u003c/a\u003eが参考になる)\u003c/p\u003e\n\u003cp\u003eリンク先の例に基づくと、gemの\u003ccode\u003ethin\u003c/code\u003eと\u003ccode\u003erack-perftools-profiler\u003c/code\u003eはどちらも\u003ccode\u003erack\u003c/code\u003eに依存している\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esource \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://rubygems.org\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egem \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;thin\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egem \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;rack-perftools-profiler\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこのGemfileがある状態で\u003ccode\u003ebundle install\u003c/code\u003eすると、\u003ccode\u003ethin\u003c/code\u003eは\u003ccode\u003erack \u0026gt;= 1.0\u003c/code\u003eで、\u003ccode\u003erack-perftools-profiler\u003c/code\u003eは\u003ccode\u003erack ~\u0026gt; 1.0\u003c/code\u003eが条件なので、それを満たす\u003ccode\u003erack\u003c/code\u003eがインストールされる\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eFetching source index \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e https://rubygems.org/\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInstalling daemons \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e1.1.0\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInstalling eventmachine \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e0.12.10\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e with native extensions\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInstalling open4 \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e1.0.1\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInstalling perftools.rb \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e0.4.7\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e with native extensions\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInstalling rack \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e1.2.1\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInstalling rack-perftools_profiler \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e0.0.2\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInstalling thin \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e1.2.7\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e with native extensions\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eUsing bundler \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e1.0.0.rc.3\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eその後、\u003ccode\u003ethin\u003c/code\u003eのバージョンを上げたくなって、\u003ccode\u003ebundle update thin\u003c/code\u003eを実行すると、\u003ccode\u003ethin\u003c/code\u003eが依存しているGemである\u003ccode\u003edaemons\u003c/code\u003e \u003ccode\u003eeventmachine\u003c/code\u003e \u003ccode\u003erack\u003c/code\u003eもアップデートされる。ただし、\u003ccode\u003erack-perftools_profiler\u003c/code\u003eが依存している他の\u003ccode\u003eopen4\u003c/code\u003eや\u003ccode\u003eperftools.rb\u003c/code\u003eはアップデートされない。なので、\u003ccode\u003erack-perftools_profiler\u003c/code\u003eが依存しているGemのバージョンを意図せず上げてしまった可能性がある。\u003c/p\u003e","title":"[Ruby]Bundler周り調査"},{"content":"[Ruby]Moduleとは Moduleの使い方に悩んだので学んでみました\nModuleとClassの違い Moduleのインスタンスは作ることができない Moduleのサブクラスは作れない（継承できない） ClassはModuleのサブクラス Moduleはサブクラス作れないはずなのだが… Moduleの用途 1. 名前空間として利用 module A module B class C def foo end end end end # これは下記と同じなんだけど、よくない感じ # https://github.com/rubocop-hq/ruby-style-guide#namespace-definition module A module B end end class A::B::C def foo end end 2. mix-inとしての利用 moduleの機能をClassから呼べる module M def foo puts \u0026#34;module was called\u0026#34; end end class C include M end i = C.new i.foo # =\u0026gt; \u0026#34;module was called\u0026#34; i::foo # =\u0026gt; NameError (undefined local variable or method `i\u0026#39; for main:Object) あれ、クラスメソッドとしては使えない…と思ったけど、そもそもクラスメソッドとして定義していなかった\nmodule M def self.bar puts \u0026#34;this is class method\u0026#34; end end class C include M end C::bar # NoMethodError (undefined method `bar\u0026#39; for C:Class) M::bar # =\u0026gt; \u0026#34;this is class method\u0026#34; やっぱり無理だった 調べてみるとextendsだとクラスメソッドとして追加されそう\nmodule M def bar puts \u0026#34;this is class method\u0026#34; end end class C extend M end C::bar # =\u0026gt; this is class method # できた！ i = C.new i.bar # =\u0026gt; NoMethodError (undefined method `bar\u0026#39; for #\u0026lt;C:0x00007fa7cc6b70d0\u0026gt;) # インスタンスメソッドとしては呼べない こういうのは、特異メソッドとして追加される、というらしい 特異メソッド定義\nprepend ついでにprepend prependの意味は、メソッドを読み込む優先順位が分かっていないと多分わからない\nmodule M1 def foo puts \u0026#34;M1.foo\u0026#34; end end module M2 def foo puts \u0026#34;M2.foo\u0026#34; end end class C include M1, M2 def foo puts \u0026#34;C.foo\u0026#34; end end i = C.new i.foo # =\u0026gt; C.foo C.ancestors # =\u0026gt; [C, M1, M2...] こんなふうに、同名で定義されたメソッドが合った場合、クラスで定義されているものが使われる。 もしクラスに同名の定義がなかったら、ancestorsで並んだ順の通りに使用される。\nprependで読み込むとクラスでの定義を上書きできる。\nclass C prepend M1, M2 def foo puts \u0026#34;C.foo\u0026#34; end end i = C.new i.foo # =\u0026gt; M1.foo C.ancestors # =\u0026gt; [C, M1, M2...] モジュールとクラス変数、インスタンス変数 モジュールはクラスの変数にアクセスできるのか\nmodule M def instance_variable(i) @i = i end def singleton_variable(s) @@s = s end end class C include M def print_variables puts @i puts @@s end end i = C.new i.instance_variable(\u0026#34;aaaa\u0026#34;) i.singleton_variable(\u0026#34;bbbb\u0026#34;) i.print_variables # =\u0026gt; aaaa # =\u0026gt; bbbb j = C.new j.print_variables # =\u0026gt; # =\u0026gt; bbbb できた。 でもモジュール側でクラスの変数へアクセスするソースコード書くと密結合感ややある気がする 変数の持ち回しはしたいときありそうだけど…\n","permalink":"http://localhost:1313/docs/2020/02/ruby_module/","summary":"\u003ch1 id=\"rubymoduleとは\"\u003e[Ruby]Moduleとは\u003c/h1\u003e\n\u003cp\u003eModuleの使い方に悩んだので学んでみました\u003c/p\u003e\n\u003ch2 id=\"moduleとclassの違い\"\u003eModuleとClassの違い\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eModuleのインスタンスは作ることができない\u003c/li\u003e\n\u003cli\u003eModuleのサブクラスは作れない（継承できない）\u003c/li\u003e\n\u003cli\u003eClassはModuleのサブクラス\n\u003cul\u003e\n\u003cli\u003eModuleはサブクラス作れないはずなのだが…\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"moduleの用途\"\u003eModuleの用途\u003c/h2\u003e\n\u003ch3 id=\"1-名前空間として利用\"\u003e1. 名前空間として利用\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e A\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e B\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eC\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efoo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# これは下記と同じなんだけど、よくない感じ\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# https://github.com/rubocop-hq/ruby-style-guide#namespace-definition\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e A\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e B\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003eB\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003eC\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efoo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-mix-inとしての利用\"\u003e2. mix-inとしての利用\u003c/h3\u003e\n\u003ch4 id=\"moduleの機能をclassから呼べる\"\u003emoduleの機能をClassから呼べる\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e M\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efoo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        puts \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;module was called\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eC\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einclude\u003c/span\u003e M\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ei \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e C\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enew\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ei\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efoo\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; \u0026#34;module was called\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ei\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003efoo\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; NameError (undefined local variable or method `i\u0026#39; for main:Object)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eあれ、クラスメソッドとしては使えない…と思ったけど、そもそもクラスメソッドとして定義していなかった\u003c/p\u003e","title":"[Ruby]Moduleとは"},{"content":"[ruby]Object#itself https://docs.ruby-lang.org/ja/latest/method/Object/i/itself.html\nselfを返します…と書いてあるけれど、用途があまりわかっていない。\n1.itself # =\u0026gt; 1 \u0026#39;Hello\u0026#39;.itself # =\u0026gt; \u0026#39;Hello\u0026#39; object = Object.new object.object_id == object.itself.object_id # =\u0026gt; true ついに来ました！恒等関数: Kernel#itself に例があって、自分自身の値でグループ化したい時など綺麗にかける。\nvalues = [5, 7, 3, 7, 7, 5, 1, 1, 1, 0] # Ruby 2.2.0 未満 values.group_by{|x| x} # =\u0026gt; {5=\u0026gt;[5, 5], 7=\u0026gt;[7, 7, 7], 3=\u0026gt;[3], 1=\u0026gt;[1, 1, 1], 0=\u0026gt;[0]} # Ruby 2.2.0 以降 values.group_by(\u0026amp;:itself) # =\u0026gt; {5=\u0026gt;[5, 5], 7=\u0026gt;[7, 7, 7], 3=\u0026gt;[3], 1=\u0026gt;[1, 1, 1], 0=\u0026gt;[0]} 恒等関数とはなんぞやと思ったけれど、数学用語でf(x) = xとなるfを恒等関数というみたい。\n","permalink":"http://localhost:1313/docs/2020/07/ruby_object_itself/","summary":"\u003ch1 id=\"rubyobjectitself\"\u003e[ruby]Object#itself\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://docs.ruby-lang.org/ja/latest/method/Object/i/itself.html\"\u003ehttps://docs.ruby-lang.org/ja/latest/method/Object/i/itself.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eselfを返します…と書いてあるけれど、用途があまりわかっていない。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eitself       \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Hello\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eitself \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; \u0026#39;Hello\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eobject \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eObject\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enew\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eobject\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eobject_id \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e object\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eitself\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eobject_id \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; true\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://www.techscore.com/blog/2014/09/29/ruby-2-2-0-preview1-%E3%81%A4%E3%81%84%E3%81%AB%E6%9D%A5%E3%81%BE%E3%81%97%E3%81%9F%EF%BC%81%E6%81%92%E7%AD%89%E9%96%A2%E6%95%B0-kernelitself-%E3%81%AA%E3%81%A9%E3%81%AA%E3%81%A9/\"\u003eついに来ました！恒等関数: Kernel#itself\u003c/a\u003e\nに例があって、自分自身の値でグループ化したい時など綺麗にかける。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evalues \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Ruby 2.2.0 未満\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evalues\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egroup_by{\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003ex\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e x} \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; {5=\u0026gt;[5, 5], 7=\u0026gt;[7, 7, 7], 3=\u0026gt;[3], 1=\u0026gt;[1, 1, 1], 0=\u0026gt;[0]}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Ruby 2.2.0 以降\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evalues\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egroup_by(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e:itself\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; {5=\u0026gt;[5, 5], 7=\u0026gt;[7, 7, 7], 3=\u0026gt;[3], 1=\u0026gt;[1, 1, 1], 0=\u0026gt;[0]}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e恒等関数とはなんぞやと思ったけれど、数学用語で\u003ccode\u003ef(x) = x\u003c/code\u003eとなるfを恒等関数というみたい。\u003c/p\u003e","title":"[ruby]Object#itself"},{"content":"[Ruby]Procとlambdaについて学ぶ Procとは ブロックをオブジェクト化したもの。\np1 = Proc.new { |x, y| x + y } # こういう書き方もできる p2 = proc { |x, y| x + y } # callで呼び出せる p1.call(1, 2) p2.call(3, 4) p1.class # =\u0026gt; Proc \u0026lt; Object lambdaとは 同じようにProc型のオブジェクト。\nl1 = lambda { |x, y| x + y} # こういう書き方もできる l2 = -\u0026gt;(x, y) {x + y} l1.call(1, 2) l2.call(3, 4) l1.class # =\u0026gt; Proc \u0026lt; Object Procとlambdaの違いとは 1. 引数の制限があるかないか Procは引数の厳密な制限はない p = Proc.new { |x, y| print x, y} p.call(1) # =\u0026gt; 1nil p.call(1, 2, 3) # =\u0026gt; 12 # 3は無視される lambdaは引数の個数が違うと使えない p = lambda { |x, y| print x, y} p.call(1) p.call(1,2,3) # どちらもだめ # ArgumentError: wrong number of arguments (given 3, expected 2) 2. return, break時の挙動が違う Procではreturn, breakはブロック同様、字句的に囲われている処理が終了する def test_proc p = Proc.new { puts \u0026#34;doing\u0026#34;; return } puts \u0026#34;start\u0026#34; p.call puts \u0026#34;end\u0026#34; end test_proc # =\u0026gt; start # =\u0026gt; doing # endは出力されない lambdaではreturnするとlambda自身から戻る def test_lambda p = lambda { puts \u0026#34;doing\u0026#34;; return } puts \u0026#34;start\u0026#34; p.call puts \u0026#34;end\u0026#34; end test_lambda # =\u0026gt; \u0026#34;start\u0026#34; # =\u0026gt; \u0026#34;doing\u0026#34; # =\u0026gt; \u0026#34;end\u0026#34; # ちゃんとendまで出力される！ 結局どちらを使うのが良いのか どちらがよいという話は検索しても見当たらなく、どちらかというと性質の違いに触れたものが多かった。 特徴を大きくまとめると、Procはブロック的で、lambdaはメソッド的。 ブロックを持ち運べるオブジェクトを作るならProc,他の言語で期待されるようなラムダ式を作るときにはlambdaを使う方が近そう\n","permalink":"http://localhost:1313/docs/2020/01/proc_and_lambda/","summary":"\u003ch1 id=\"rubyprocとlambdaについて学ぶ\"\u003e[Ruby]Procとlambdaについて学ぶ\u003c/h1\u003e\n\u003ch2 id=\"procとは\"\u003eProcとは\u003c/h2\u003e\n\u003cp\u003eブロックをオブジェクト化したもの。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ep1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eProc\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enew { \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003ex, y\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e y }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# こういう書き方もできる\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ep2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e proc { \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003ex, y\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e y }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# callで呼び出せる\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ep1\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecall(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ep2\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecall(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ep1\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eclass\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; Proc \u0026lt; Object\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"lambdaとは\"\u003elambdaとは\u003c/h2\u003e\n\u003cp\u003e同じようにProc型のオブジェクト。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003el1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e lambda { \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003ex, y\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e y}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# こういう書き方もできる\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003el2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e(x, y) {x \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e y}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003el1\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecall(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003el2\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecall(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003el1\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eclass\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; Proc \u0026lt; Object\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"procとlambdaの違いとは\"\u003eProcとlambdaの違いとは\u003c/h2\u003e\n\u003ch3 id=\"1-引数の制限があるかないか\"\u003e1. 引数の制限があるかないか\u003c/h3\u003e\n\u003ch4 id=\"procは引数の厳密な制限はない\"\u003eProcは引数の厳密な制限はない\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ep \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eProc\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enew { \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003ex, y\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e print x, y}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ep\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecall(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; 1nil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ep\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecall(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; 12\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 3は無視される\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"lambdaは引数の個数が違うと使えない\"\u003elambdaは引数の個数が違うと使えない\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ep \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e lambda { \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003ex, y\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e print x, y}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ep\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecall(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ep\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecall(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# どちらもだめ\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# ArgumentError: wrong number of arguments (given 3, expected 2)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-return-break時の挙動が違う\"\u003e2. return, break時の挙動が違う\u003c/h3\u003e\n\u003ch4 id=\"procではreturn-breakはブロック同様字句的に囲われている処理が終了する\"\u003eProcではreturn, breakはブロック同様、字句的に囲われている処理が終了する\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etest_proc\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    p \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eProc\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enew { puts \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;doing\u0026#34;\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    puts \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;start\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    p\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecall\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    puts \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;end\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etest_proc\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; start\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; doing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# endは出力されない\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"lambdaではreturnするとlambda自身から戻る\"\u003elambdaではreturnするとlambda自身から戻る\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etest_lambda\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    p \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e lambda { puts \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;doing\u0026#34;\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    puts \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;start\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    p\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecall\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    puts \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;end\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etest_lambda\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; \u0026#34;start\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; \u0026#34;doing\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; \u0026#34;end\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# ちゃんとendまで出力される！\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"結局どちらを使うのが良いのか\"\u003e結局どちらを使うのが良いのか\u003c/h2\u003e\n\u003cp\u003eどちらがよいという話は検索しても見当たらなく、どちらかというと性質の違いに触れたものが多かった。\n特徴を大きくまとめると、Procはブロック的で、lambdaはメソッド的。\nブロックを持ち運べるオブジェクトを作るならProc,他の言語で期待されるようなラムダ式を作るときにはlambdaを使う方が近そう\u003c/p\u003e","title":"[Ruby]Procとlambda"},{"content":"[Ruby]Rubyのprivateメソッド Rubyのprivateメソッドが思っていたのと違った 元々Javaをやっていたので、\npublic -\u0026gt; 外部からアクセス可能 protected -\u0026gt; 外部からはアクセスできないが、サブクラスからアクセス可能 private -\u0026gt; クラス内のみ利用可能 と思っていたのですが、コーディングしていると、privateメソッドにサブクラスからアクセスできていて、あれ？となったので、改めてRubyのprivateメソッドについて調べました。\n確認 class A def public_method puts \u0026#34;public\u0026#34; end protected def protected_method puts \u0026#34;protected\u0026#34; end private def private_method puts \u0026#34;private\u0026#34; end end class B \u0026lt; A def test public_method protected_method private_method end end b = B.new b.public_method # =\u0026gt; public_method b.protected_method # =\u0026gt; NoMethodError b.private_method # =\u0026gt; NoMethodError b.test # =\u0026gt; public_method # =\u0026gt; protected_method # =\u0026gt; private_method やっぱりサブクラスからprivateメソッド呼べている\nRubyのpublic, protected, privateメソッド と思ったらやっぱり同じことが気になった人がいたようで、 Rubyのpublic, protected, privateメソッドについて書いてある記事があった。\nhttps://blog.jnito.com/entry/20120315/1331754912 https://docs.ruby-lang.org/ja/2.1.0/doc/spec=2fdef.html#limit\n現状としては、protectedはレシーバ経由でも使えるけど、privateメソッドは関数形式でしか呼べないというのが大きな違いな模様で、サブクラスからアクセスできるというポイントでは同じ。\nclass B \u0026lt; A def test_protected_receiver(a) a.protected_method end def test_private_receiver(a) a.private_method end end a = A.new b = B.new b.test_protected_receiver(a) # =\u0026gt; \u0026#34;protected_method\u0026#34; # protectedはレシーバ経由でも呼び出せる b.test_private_receiver(a) # NoMethodError # privateメソッドはレシーバ経由では呼び出せない そういえば、privateメソッドは多く使われてるなーと会社のソースコード見てても思いました。あんまりprotectedの出番はないのかもしれない。\n参考）https://docs.ruby-lang.org/ja/2.1.0/doc/spec=2fdef.html#limit\n","permalink":"http://localhost:1313/docs/2020/03/ruby_private_method/","summary":"\u003ch1 id=\"rubyrubyのprivateメソッド\"\u003e[Ruby]Rubyのprivateメソッド\u003c/h1\u003e\n\u003ch2 id=\"rubyのprivateメソッドが思っていたのと違った\"\u003eRubyのprivateメソッドが思っていたのと違った\u003c/h2\u003e\n\u003cp\u003e元々Javaをやっていたので、\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003epublic -\u0026gt; 外部からアクセス可能\u003c/li\u003e\n\u003cli\u003eprotected -\u0026gt; 外部からはアクセスできないが、サブクラスからアクセス可能\u003c/li\u003e\n\u003cli\u003eprivate -\u0026gt; クラス内のみ利用可能\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eと思っていたのですが、コーディングしていると、privateメソッドにサブクラスからアクセスできていて、あれ？となったので、改めてRubyのprivateメソッドについて調べました。\u003c/p\u003e\n\u003ch3 id=\"確認\"\u003e確認\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eA\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epublic_method\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        puts \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;public\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprotected\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprotected_method\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        puts \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;protected\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprivate_method\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        puts \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;private\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eB\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e A\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etest\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        public_method\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        protected_method\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        private_method\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eb \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e B\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enew\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eb\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epublic_method\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; public_method\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eb\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eprotected_method\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; NoMethodError\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eb\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eprivate_method\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; NoMethodError\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eb\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etest\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; public_method\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; protected_method\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; private_method\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eやっぱりサブクラスから\u003ccode\u003eprivate\u003c/code\u003eメソッド呼べている\u003c/p\u003e","title":"[Ruby]Rubyのprivateメソッド"},{"content":"[Ruby]メソッドの引数 通常 def foo(a) p a end foo(\u0026#34;good\u0026#34;) # =\u0026gt; good ブロック引数 ブロックは通常引数に指定しなくてもどんなメソッドにも渡せる\ndef foo yield end foo do puts \u0026#34;yield block\u0026#34; end # =\u0026gt; \u0026#34;yield block\u0026#34; ただし引数の中で明示する場合は下記のように指定する\n# \u0026amp;をつけた引数の指定でブロックを受け取る。ブロックの指定は必ず引数の順番として一番後ろにする def need_block(a, b, \u0026amp;my_block) my_block.call(a + b) end need_block(1, 2) do |num| puts \u0026#34;block called! #{num}\u0026#34; end # =\u0026gt; \u0026#34;block called! 3\u0026#34; need_block(1, 2) # =\u0026gt; NoMethodError (undefined method `call\u0026#39; for nil:NilClass) ただし、\u0026amp;をつけても必須になるというわけじゃないので、使わなかったら使わないでも良い\ndef non_need_block(a, \u0026amp;b) # blockを呼ばない puts a end non_need_block(\u0026#34;needless\u0026#34;) # =\u0026gt; \u0026#34;needless\u0026#34; # block以外のものを渡すとArgumentErrorになる non_need_block(1, 2) # =\u0026gt; ArgumentError (wrong number of arguments (given 2, expected 1)) 可変長引数 配列に展開する 引数に*をつけると配列として受け取れる\ndef variadic_function(a, *b) puts b end variadic_function(1, 2, 3) # =\u0026gt; 2 # =\u0026gt; 3 キーワード引数 指定した変数名を使える、デフォルト値の設定も\ndef keyword_arg_function(keyword: \u0026#39;default value\u0026#39;) puts keyword end keyword_arg_function(keyword: \u0026#39;new value\u0026#39;) # =\u0026gt; new value keyword_arg_function() # =\u0026gt; default value # デフォルト値がない場合…？ def no_default_function(keyword: ) puts keyword end no_default_function(keyword: \u0026#39;no default\u0026#39;) # =\u0026gt; no default no_default_function() # =\u0026gt; ArgumentError (missing keyword: keyword) 変数の展開 ハッシュ値を引数として展開できる\nRuby 2.7: ハッシュからキーワード引数への自動変換が非推奨に\ndef hash_func(key1:, key2:) puts key1 puts key2 end hash_words = { key1: \u0026#39;first keyword\u0026#39;, key2: \u0026#39;second keyword\u0026#39; } # **で展開 hash_func(**hash_words) # =\u0026gt; first keyword # =\u0026gt; second keyword 参考 https://techracho.bpsinc.jp/hachi8833/2017_04_06/38498\n","permalink":"http://localhost:1313/docs/2020/02/ruby_function_args/","summary":"\u003ch1 id=\"rubyメソッドの引数\"\u003e[Ruby]メソッドの引数\u003c/h1\u003e\n\u003ch2 id=\"通常\"\u003e通常\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efoo\u003c/span\u003e(a)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    p a\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efoo(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;good\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; good\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"ブロック引数\"\u003eブロック引数\u003c/h2\u003e\n\u003cp\u003eブロックは通常引数に指定しなくてもどんなメソッドにも渡せる\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efoo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eyield\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efoo \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e puts \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;yield block\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; \u0026#34;yield block\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eただし引数の中で明示する場合は下記のように指定する\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# \u0026amp;をつけた引数の指定でブロックを受け取る。ブロックの指定は必ず引数の順番として一番後ろにする\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eneed_block\u003c/span\u003e(a, b, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003emy_block)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    my_block\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecall(a \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e b)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eneed_block(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003enum\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e puts \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;block called! \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003enum\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; \u0026#34;block called! 3\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eneed_block(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; NoMethodError (undefined method `call\u0026#39; for nil:NilClass)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eただし、\u0026amp;をつけても必須になるというわけじゃないので、使わなかったら使わないでも良い\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enon_need_block\u003c/span\u003e(a, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eb)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# blockを呼ばない\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    puts a\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enon_need_block(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;needless\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; \u0026#34;needless\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# block以外のものを渡すとArgumentErrorになる\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enon_need_block(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; ArgumentError (wrong number of arguments (given 2, expected 1))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"可変長引数\"\u003e可変長引数\u003c/h2\u003e\n\u003ch3 id=\"配列に展開する\"\u003e配列に展開する\u003c/h3\u003e\n\u003cp\u003e引数に*をつけると配列として受け取れる\u003c/p\u003e","title":"[Ruby]メソッドの引数"},{"content":"[Ruby]メモ化とは たまにメモ化という言葉を聞くので、なんだろうと思って調査してみました\nメモ化とは 関数呼び出しの結果をキャッシュすることを指す関数プログラミング用語\nWikipedia メモ化 Rubyの機能ではなく、実装方針というか、開発手法の一つのようです\nlambdaを使ったメモ化 # すごく雑にかくとこういう感じと思う cache = {} cubed = lambda { |x| if cache.has_key?(x) puts \u0026#34;use cache\u0026#34; else cache[x] = x * x * x end cache[x] } cubed.call(3) # この時点でキャッシュはないので、計算された値が帰ってくる # =\u0026gt; 27 cubed.call(3) # キャッシュが既に作られているため、計算せずに帰ってくる # =\u0026gt; \u0026#34;use cache\u0026#34; # =\u0026gt; 27 cubed.call(4) # この値はキャッシュがないので、また計算された値が帰ってくる # =\u0026gt; 64 モジュールでメモ化 こちらでやっていたのが参考になった\nRailsにおけるメモ化 ActiveSupport::Memoizable こちらは現在は非推奨のモジュールになっており、代わりに @var ||= pattern instead... のような書き方を推奨している モジュールとしてどうしても使用したい場合、おすすめされているのは、memoist # memoistを使用した実装例 require \u0026#39;memoist\u0026#39; class Person extend Memoist def social_security puts \u0026#34;execute!\u0026#34; decrypt_social_security end memoize :social_security end こんな感じで使える\nメモ化のメリット/デメリットはなんなのか メリット キャッシュしておくことによる高速化と思われる\n上記の例だと計算量が少なくてあまりメリットが感じられないが、フィボナッチ関数の実装などだと効果が見えやすい\nデメリット デメリットというか、引数に関して必ず一定の値を返す関数でないと、メモ化は使えない\nまた、キャッシュしておくため、メモリの使用量などが大きい\n","permalink":"http://localhost:1313/docs/2020/01/memoization/","summary":"\u003ch1 id=\"rubyメモ化とは\"\u003e[Ruby]メモ化とは\u003c/h1\u003e\n\u003cp\u003eたまにメモ化という言葉を聞くので、なんだろうと思って調査してみました\u003c/p\u003e\n\u003ch2 id=\"メモ化とは\"\u003eメモ化とは\u003c/h2\u003e\n\u003cp\u003e関数呼び出しの結果をキャッシュすることを指す関数プログラミング用語\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://ja.wikipedia.org/wiki/%E3%83%A1%E3%83%A2%E5%8C%96\"\u003eWikipedia メモ化\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRubyの機能ではなく、実装方針というか、開発手法の一つのようです\u003c/p\u003e\n\u003ch3 id=\"lambdaを使ったメモ化\"\u003elambdaを使ったメモ化\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# すごく雑にかくとこういう感じと思う\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecache \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecubed \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e lambda { \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003ex\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e cache\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ehas_key?(x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        puts \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;use cache\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        cache\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ex\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e x\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cache\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ex\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecubed\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecall(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# この時点でキャッシュはないので、計算された値が帰ってくる\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; 27\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecubed\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecall(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# キャッシュが既に作られているため、計算せずに帰ってくる\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; \u0026#34;use cache\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; 27\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecubed\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecall(\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# この値はキャッシュがないので、また計算された値が帰ってくる\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# =\u0026gt; 64\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"モジュールでメモ化\"\u003eモジュールでメモ化\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://mickey24.hatenablog.com/entry/20100906/1283769623\"\u003eこちら\u003c/a\u003eでやっていたのが参考になった\u003c/p\u003e\n\u003ch2 id=\"railsにおけるメモ化\"\u003eRailsにおけるメモ化\u003c/h2\u003e\n\u003ch3 id=\"activesupportmemoizable\"\u003eActiveSupport::Memoizable\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eこちらは現在は\u003ca href=\"https://apidock.com/rails/ActiveSupport/Memoizable\"\u003e非推奨のモジュール\u003c/a\u003eになっており、代わりに \u003ccode\u003e@var ||= pattern instead...\u003c/code\u003e のような書き方を推奨している\u003c/li\u003e\n\u003cli\u003eモジュールとしてどうしても使用したい場合、\u003ca href=\"https://apidock.com/rails/ActiveSupport/Memoizable/memoize#1317-this-has-been-deprecated-replace-with-Memoist\"\u003eおすすめされている\u003c/a\u003eのは、\u003ca href=\"https://github.com/matthewrudy/memoist\"\u003ememoist\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# memoistを使用した実装例\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erequire \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;memoist\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eextend\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eMemoist\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esocial_security\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    puts \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;execute!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    decrypt_social_security\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  memoize \u003cspan style=\"color:#e6db74\"\u003e:social_security\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこんな感じで使える\u003c/p\u003e","title":"[Ruby]メモ化"},{"content":"[Ruby]自己代入 自己代入でよくみるのは… x += 1 y ||= 1 こんな例をよくみると思う\nいろんな自己代入 https://docs.ruby-lang.org/ja/latest/doc/spec=2foperator.html#selfassign\n自己代入の例 展開 x += y x = x + y x -= y x = x - y x *= y x = x * y x /= y x = x / y x %= y x = x % y x **= y x = x ** y x \u0026amp;\u0026amp;= y x = x \u0026amp;\u0026amp; y x ||= y x = x || y x \u0026amp;= y x = x \u0026amp; y x |= y x = x | y x ^= y x = x ^ y x \u0026laquo;= y x = x \u0026laquo; y x \u0026raquo;= y x = x \u0026raquo; y x += y 最もよく使われそう\nx = 3 x += 1 # =\u0026gt; 4 こういうパターンもあるかも\nx = [1, 2] x += [3, 4] # =\u0026gt; [1, 2, 3, 4] # 配列のマージもできる x ||= y xがnil,falseだった場合にyをxに代入する、初期化でよく使われる\n# resultsがnil、falseの場合、空の配列を代入する results ||= [] x **= y **は指数計算に使われる\nx = 3 x **= 2 # =\u0026gt; 9 # 3を２乗した値である9が入る x \u0026amp;\u0026amp;= y \u0026amp;\u0026amp;は||同様論理演算子なので、なんとなくわかる、ようで、結果がどうなるかピンとこない\nx, y = nil, 3 x \u0026amp;\u0026amp;= y # xはnilになる y \u0026amp;\u0026amp;= x # yはnilになる a, b = 2, 5 a \u0026amp;\u0026amp;= b # aは5になる x \u0026amp;\u0026amp;= y は x \u0026amp;\u0026amp; yがtrueならyの値が入って、falseならnilが入るようだ\nx \u0026amp;= y ん…？\u0026amp;ってなんだっけ…\nArrayの積演算\n配列に使えば良さそう\nx = [1, 3, 4] y = [2, 3, 4, 7] x \u0026amp;= y # =\u0026gt; [3, 4] x |= y \u0026amp;が分かっていればわかりやすそう\nx = [1, 3, 4] y = [2, 3, 4, 7] x |= y # =\u0026gt; [1, 3, 4, 2, 7] その他 ビット演算とかシフトとかはそもそもがよく分かっていないので別でやります\n","permalink":"http://localhost:1313/docs/2020/01/ruby_selfassign/","summary":"\u003ch1 id=\"ruby自己代入\"\u003e[Ruby]自己代入\u003c/h1\u003e\n\u003ch2 id=\"自己代入でよくみるのは\"\u003e自己代入でよくみるのは…\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ey \u003cspan style=\"color:#f92672\"\u003e||=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこんな例をよくみると思う\u003c/p\u003e\n\u003ch2 id=\"いろんな自己代入\"\u003eいろんな自己代入\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://docs.ruby-lang.org/ja/latest/doc/spec=2foperator.html#selfassign\"\u003ehttps://docs.ruby-lang.org/ja/latest/doc/spec=2foperator.html#selfassign\u003c/a\u003e\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e自己代入の例\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e展開\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ex += y\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ex = x + y\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ex -= y\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ex = x - y\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ex *= y\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ex = x * y\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ex /= y\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ex = x / y\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ex %= y\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ex = x % y\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ex **= y\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ex = x ** y\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ex \u0026amp;\u0026amp;= y\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ex = x \u0026amp;\u0026amp; y\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ex ||= y\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ex = x || y\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ex \u0026amp;= y\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ex = x \u0026amp; y\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ex |= y\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ex = x | y\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ex ^= y\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ex = x ^ y\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ex \u0026laquo;= y\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ex = x \u0026laquo; y\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ex \u0026raquo;= y\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ex = x \u0026raquo; y\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"x--y\"\u003ex += y\u003c/h3\u003e\n\u003cp\u003e最もよく使われそう\u003c/p\u003e","title":"[Ruby]自己代入"},{"content":"ペアプロ／モブプロについて学ぶ WEB+DB Press vol.102の特集「はじめてのペアプロ・モブプロ」を参考に、ペアプロ・モブプロについて学びました。\nペアプログラミング・モブプログラミングとは プログラミングとプログラムの改良を2人で行うことをペアプログラミングという。 これを複数人（3〜5人）でやる場合、モブプログラミングという。\nロールについて キーボードの前に実際に座っている人は「ドライバー」、ドライバーの隣に座り、ドライバーと会話しながら導く人を「ナビゲーター」と呼び、この「ドライバー」がメインでコーディングをしていく。「ナビゲーター」はドライバーと会話をしながら、ドライバーを導く。「ドライバー」は一人でずっとこなすのではなく、交代するのが普通。\nペアプロ／モブプロのメリット 作業への集中と質の向上 一人ではないので緊張感が生まれ、集中することができる 考えていることを口に出しながらプログラミングを行うため、発話による思考の整理ができる リアルタイムで指摘できるため、コードの可読性、保守性が向上する 他の人の目にふれるため、軽微なミスが減る 知識と学びの共有 新人教育などで利用すると、リアルタイムで知見が共有できる コードからだけでなく、コーディングの過程から学ぶことができる 複数人でコーディングするため、実装内容について情報が共有できる 楽しさとチームビルディング 在庫を減らし、スループットを最大化できる Pull Requestのレビューはプロジェクトの進行においてボトルネックになりがち Pull Requestがいくつも貯まると、以下の事象が発生する ベテランはコードを書くのをやめ、レビューに専念する レビュー速度を上げるため、一つ一つのレビュー時間をへらす その結果、ベテランがコードを書いて価値を還元できなくなったり、レビュー時間の短縮によって深い指摘ができなくなってしまう Pull Requestの在庫を作ることなく、リアルタイムにリリース可能なコードを作っていくことによって、スループットが最大化できるという考え方に基づいて、ペアプロ／モブプロが推進されている ペアプログラミング ペアプログラミングの進め方 コードを書く前に方向づけを行う 盛り上がりすぎて脱線したり、そもそもの目標を忘れたり…ということが発生するので、最初に方向付けを行う。\n最終目標を決める 機能の実装の区切りやバグの修正が完了するまで…など 大体二時間くらいで達成できそうな目標がよさそう TODOリストを作る スムーズに走り出すため、やることをTODOリストとして書き出す # TODOリストのイメージ - [x]複数ファイルをコマンドラインから指定する方法を決める - [x]ファイルの中身をマージするか個別に処理するか決める - [ ]コマンドライン引数の処理 - [ ]単一実績ファイル処理部分の切り出し - [ ]テストを書く - [ ]ステージングで動作確認 TODOリストから最初の目標を決める コードを書きながら会話し、考えを共有する ペアプログラミングで一番大事なのは会話。\nドライバーはコードを書くだけでなく、喋りながらコードを書く しゃべる内容は「今考えていること」 これから書こうと思っているコードのことや、迷ってモヤモヤしている設計判断のことなどをナビゲーターに喋りかける ナビゲーターの仕事は、まずドライバーの仕事をよく聞いて協力すること いい意見は褒め、あいまいさがあれば視点を変えて聞き返したりなど コーディング中に入る間違いは、隣で見ているナビゲーターのほうが気づきやすいので、些細なミスやtypoなどもすぐいう 設計に関して先回りしてかんがえておくことで、プログラミングを順調にすすめることができる ロールを交代する ドライバーはとにかく疲れるので、一定期間やステップ毎などの区切りで、交代するのがよい\nTDDをするとなおよい テストで予め目標をわかりやすくできる モブプログラミング ペアのデメリットとして、情報がペア内で収まってしまうという点がある。プログラミングを通して得られる情報を多くのメンバーで共有するため、多人数で行うモブプログラミングがある\nモブプログラミングの進め方 できる限り大画面のディスプレイを用意する 同時に解決する課題を1つに絞る 並行して複数の作業にとりくむと作業後に同期させる必要があるため、課題を絞る ドライバーは積極的に助けを求める ドライバーは「独り言」を言うのが大事 そうしないと、まわりのナビゲーターが助けられない 話しながら手を動かす必要がある ナビゲーターが手分けして調査する ナビゲーターは、ドライバーを見ながらなるべく円滑に問題を解決できるようにサポートする 情報検索用に個別PCを持ったりなどして、作業に必要な情報を自律的に動いて集める 途中まで実装するほうが議論しやすいときは、進めてみる 複数のやり方で悩んだ場合、シンプルですぐできるやり方はまず選んで、モブ全体が深みにハマるのを避ける 一度実装したほうが情報量が増える やってみて、どうもうまく行かない場合も、そういう情報が得られたと思って前向きにとらえる ドライバーを交代する モブプログラミングを支える文化 基本的に「チーム全体で課題を解決しよう」という考え方に基づいている できる限りリアリティを持った成果物を使って、仮説検証のループを高速に回していこうとする スモールチームで高速にすすめる 最適なモブの人数は3〜5人 作業を効率的にすすめるため、モブ内に必要となるすべてのスキルをあわせ、モブ内で作業を完結できるようにする 外部に依頼すると完了を待たなくてはいけなくなる 高速な意思決定をするために、人々の中央に情報を集める プロダクトに関係する要件、コード、人々を常にモブに集める 全員が持っている情報を同期する すべてのメンバーが状況に対して意見を言え、責任を負う モブプログラミングの実践ノウハウ 毎日固定時間モブ作業（5時間くらい） ドライバーはナビゲーターが実装したくなったタイミングで交代 モブへの出入りは自由 常にメインブランチでの開発（フィーチャーブランチなし） 作ったらすぐにデリバリ 雇用者への声を聞きに行き反映 リリースと意見反映のサイクルを早められて、アジャイル的 ","permalink":"http://localhost:1313/docs/2021/01/pair_programming_mob_programming/","summary":"\u003ch1 id=\"ペアプロモブプロについて学ぶ\"\u003eペアプロ／モブプロについて学ぶ\u003c/h1\u003e\n\u003cp\u003eWEB+DB Press vol.102の特集「はじめてのペアプロ・モブプロ」を参考に、ペアプロ・モブプロについて学びました。\u003c/p\u003e\n\u003ch2 id=\"ペアプログラミングモブプログラミングとは\"\u003eペアプログラミング・モブプログラミングとは\u003c/h2\u003e\n\u003cp\u003eプログラミングとプログラムの改良を2人で行うことをペアプログラミングという。\nこれを複数人（3〜5人）でやる場合、モブプログラミングという。\u003c/p\u003e\n\u003ch3 id=\"ロールについて\"\u003eロールについて\u003c/h3\u003e\n\u003cp\u003eキーボードの前に実際に座っている人は「ドライバー」、ドライバーの隣に座り、ドライバーと会話しながら導く人を「ナビゲーター」と呼び、この「ドライバー」がメインでコーディングをしていく。「ナビゲーター」はドライバーと会話をしながら、ドライバーを導く。「ドライバー」は一人でずっとこなすのではなく、交代するのが普通。\u003c/p\u003e\n\u003ch3 id=\"ペアプロモブプロのメリット\"\u003eペアプロ／モブプロのメリット\u003c/h3\u003e\n\u003ch4 id=\"作業への集中と質の向上\"\u003e作業への集中と質の向上\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e一人ではないので緊張感が生まれ、集中することができる\u003c/li\u003e\n\u003cli\u003e考えていることを口に出しながらプログラミングを行うため、発話による思考の整理ができる\u003c/li\u003e\n\u003cli\u003eリアルタイムで指摘できるため、コードの可読性、保守性が向上する\u003c/li\u003e\n\u003cli\u003e他の人の目にふれるため、軽微なミスが減る\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"知識と学びの共有\"\u003e知識と学びの共有\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e新人教育などで利用すると、リアルタイムで知見が共有できる\u003c/li\u003e\n\u003cli\u003eコードからだけでなく、コーディングの過程から学ぶことができる\u003c/li\u003e\n\u003cli\u003e複数人でコーディングするため、実装内容について情報が共有できる\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"楽しさとチームビルディング\"\u003e楽しさとチームビルディング\u003c/h4\u003e\n\u003ch4 id=\"在庫を減らしスループットを最大化できる\"\u003e在庫を減らし、スループットを最大化できる\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003ePull Requestのレビューはプロジェクトの進行においてボトルネックになりがち\u003c/li\u003e\n\u003cli\u003ePull Requestがいくつも貯まると、以下の事象が発生する\n\u003cul\u003e\n\u003cli\u003eベテランはコードを書くのをやめ、レビューに専念する\u003c/li\u003e\n\u003cli\u003eレビュー速度を上げるため、一つ一つのレビュー時間をへらす\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eその結果、ベテランがコードを書いて価値を還元できなくなったり、レビュー時間の短縮によって深い指摘ができなくなってしまう\u003c/li\u003e\n\u003cli\u003ePull Requestの在庫を作ることなく、リアルタイムにリリース可能なコードを作っていくことによって、スループットが最大化できるという考え方に基づいて、ペアプロ／モブプロが推進されている\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ペアプログラミング\"\u003eペアプログラミング\u003c/h2\u003e\n\u003ch3 id=\"ペアプログラミングの進め方\"\u003eペアプログラミングの進め方\u003c/h3\u003e\n\u003ch4 id=\"コードを書く前に方向づけを行う\"\u003eコードを書く前に方向づけを行う\u003c/h4\u003e\n\u003cp\u003e盛り上がりすぎて脱線したり、そもそもの目標を忘れたり…ということが発生するので、最初に方向付けを行う。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e最終目標を決める\n\u003cul\u003e\n\u003cli\u003e機能の実装の区切りやバグの修正が完了するまで…など\u003c/li\u003e\n\u003cli\u003e大体二時間くらいで達成できそうな目標がよさそう\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eTODOリストを作る\n\u003cul\u003e\n\u003cli\u003eスムーズに走り出すため、やることをTODOリストとして書き出す\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# TODOリストのイメージ\n- [x]複数ファイルをコマンドラインから指定する方法を決める\n- [x]ファイルの中身をマージするか個別に処理するか決める\n- [ ]コマンドライン引数の処理\n- [ ]単一実績ファイル処理部分の切り出し\n- [ ]テストを書く\n- [ ]ステージングで動作確認\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003eTODOリストから最初の目標を決める\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"コードを書きながら会話し考えを共有する\"\u003eコードを書きながら会話し、考えを共有する\u003c/h4\u003e\n\u003cp\u003eペアプログラミングで一番大事なのは会話。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eドライバーはコードを書くだけでなく、喋りながらコードを書く\u003c/li\u003e\n\u003cli\u003eしゃべる内容は「今考えていること」\n\u003cul\u003e\n\u003cli\u003eこれから書こうと思っているコードのことや、迷ってモヤモヤしている設計判断のことなどをナビゲーターに喋りかける\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eナビゲーターの仕事は、まずドライバーの仕事をよく聞いて協力すること\n\u003cul\u003e\n\u003cli\u003eいい意見は褒め、あいまいさがあれば視点を変えて聞き返したりなど\u003c/li\u003e\n\u003cli\u003eコーディング中に入る間違いは、隣で見ているナビゲーターのほうが気づきやすいので、些細なミスやtypoなどもすぐいう\u003c/li\u003e\n\u003cli\u003e設計に関して先回りしてかんがえておくことで、プログラミングを順調にすすめることができる\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"ロールを交代する\"\u003eロールを交代する\u003c/h4\u003e\n\u003cp\u003eドライバーはとにかく疲れるので、一定期間やステップ毎などの区切りで、交代するのがよい\u003c/p\u003e\n\u003ch4 id=\"tddをするとなおよい\"\u003eTDDをするとなおよい\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eテストで予め目標をわかりやすくできる\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"モブプログラミング\"\u003eモブプログラミング\u003c/h2\u003e\n\u003cp\u003eペアのデメリットとして、情報がペア内で収まってしまうという点がある。プログラミングを通して得られる情報を多くのメンバーで共有するため、多人数で行うモブプログラミングがある\u003c/p\u003e","title":"ペアプロ／モブプロについて学ぶ"},{"content":"[ruby]begin rubyの例外処理について学ぶ\nbegin do_something rescue recover else xxx ensure must_to_do end rescueの後ろには、エラータイプが指定できる。 エラータイプが省略された場合は、StandardErrorのサブクラスである全ての例外を補足する。\nelse節 本体の実行でエラーが発生しなかった場合に評価される\nensure節 begin 式を終了する直前に必ず ensure 節の本体を評価する begin式全体の評価値は、本体／rescue節／else節のうち最後に評価された文の値となる 各節において文が存在しなかったときの値はnilで、いずれにしてもensure節の値は無視される\nbeginはなしでもできる クラスやmoduleの定義の中では、begin句がなくてもrescue句を書くことができる\n","permalink":"http://localhost:1313/docs/2020/12/ruby_begin/","summary":"\u003ch1 id=\"rubybegin\"\u003e[ruby]begin\u003c/h1\u003e\n\u003cp\u003erubyの例外処理について学ぶ\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ebegin\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  do_something\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003erescue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  recover\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  xxx\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eensure\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  must_to_do\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003erescue\u003c/code\u003eの後ろには、エラータイプが指定できる。\nエラータイプが省略された場合は、StandardErrorのサブクラスである全ての例外を補足する。\u003c/p\u003e\n\u003ch2 id=\"else節\"\u003eelse節\u003c/h2\u003e\n\u003cp\u003e本体の実行でエラーが発生しなかった場合に評価される\u003c/p\u003e\n\u003ch2 id=\"ensure節\"\u003eensure節\u003c/h2\u003e\n\u003cp\u003ebegin 式を終了する直前に必ず ensure 節の本体を評価する\nbegin式全体の評価値は、\u003cstrong\u003e本体／rescue節／else節のうち最後に評価された文の値\u003c/strong\u003eとなる\n各節において文が存在しなかったときの値はnilで、いずれにしてもensure節の値は無視される\u003c/p\u003e\n\u003ch2 id=\"beginはなしでもできる\"\u003ebeginはなしでもできる\u003c/h2\u003e\n\u003cp\u003eクラスやmoduleの定義の中では、begin句がなくてもrescue句を書くことができる\u003c/p\u003e","title":"[ruby]begin"},{"content":"[Rails]N+1クエリ問題と解決方法 N+1クエリ問題について、よくわかっていなかったので調査してみました。\nN+1クエリ問題とは N+1クエリ問題とは、Tree 状の情報を DB から読み出す際、全レコードの取得に一つ＋各レコード分だけ SQL を発行してしまう問題\nhttp://akasata.com/articles/103\nUsers.where(active: true).each do |user| user.items.each do |item| # この時、select * from items where id = ... というクエリがレコード数だけ投げられる puts item.name end end railsでの対処方法(includes, preload, eager_load) この問題は、railsの公式ドキュメントでも触れられています。\nN+1クエリ問題を解決する\nhttps://moneyforward.com/engineers_blog/2019/04/02/activerecord-includes-preload-eagerload/\nincludes 公式ドキュメントでは、このN+1クエリ問題を解決するためにこのincludesを利用することを紹介しています。\nincludesを指定すると、Active Recordは指定されたすべての関連付けが最小限のクエリ回数で読み込まれるようにしてくれます。\nclients = Client.includes(:address).limit(10) clients.each do |client| puts client.address.postcode end このとき発行されるクエリはSELECT * FROM clients LIMIT 10と SELECT addresses.* FROM addresses WHERE (addresses.client_id IN (1,2,3,4,5,6,7,8,9,10))の2件なので、相当減ったと言えると思います。\nしかし、最小限のクエリ回数で読み込まれるというのはどういうことなのでしょうか。\nこれは、内部でpreload とeager_loadを場面によって使い分けているため、このように書かれているようです。\nそうなると、preloadとeager_loadとはなんなのか、という話になってきます。\npreload preloadは、関連テーブルを別クエリで取得する\nUser.preload(:posts) # SELECT \u0026#34;posts\u0026#34;.* FROM \u0026#34;posts\u0026#34; WHERE \u0026#34;posts\u0026#34;.\u0026#34;user_id\u0026#34; IN (1, 2, 3) メモリ使用量の点でeager_loadより有利なため、基本的にincludesを利用した際はpreloadが採用されるようです。\nhttps://techracho.bpsinc.jp/hachi8833/2020_03_11/89510\neager_load https://railsdoc.github.io/classes/ActiveRecord/QueryMethods.html#method-i-eager_load\neager_loadは、関連テーブルをLEFT OUTER JOINで取得する\nUser.eager_load(:posts) # SELECT \u0026#34;users\u0026#34;.\u0026#34;id\u0026#34; AS t0_r0, \u0026#34;users\u0026#34;.\u0026#34;name\u0026#34; AS t0_r1, ... # FROM \u0026#34;users\u0026#34; LEFT OUTER JOIN \u0026#34;posts\u0026#34; ON \u0026#34;posts\u0026#34;.\u0026#34;user_id\u0026#34; = # \u0026#34;users\u0026#34;.\u0026#34;id\u0026#34; joins LEFT OUTER JOINが出たので、では、INNER JOINにしたい場合はどうするかというと、joinsを利用します。\nUser.joins(:posts) # SELECT \u0026#34;users\u0026#34;.* # FROM \u0026#34;users\u0026#34; # INNER JOIN \u0026#34;posts\u0026#34; ON \u0026#34;posts\u0026#34;.\u0026#34;user_id\u0026#34; = \u0026#34;users\u0026#34;.\u0026#34;id\u0026#34; では、どれを使えばよいのか includesは、自身でどんなクエリを投げるか選択できないので、基本的には使わない方がよいでしょう、という意見が多く、それに同意します。 では、preloadとeager_loadについてはどちらがよいか？となるのですが、\nhttps://moneyforward.com/engineers_blog/2019/04/02/activerecord-includes-preload-eagerload/\nこちらだと、has_manyの場合は preload、has_one場合はeager_loadがよさそう、と一つの目安を上げています。 has_manyの場合にeager_loadをすると、スロークエリになりがちというのが主な理由です。\nただ、上記のサイトでもケースバイケースと述べられているので、 結局は一度クエリを投げてみてEXPLAINで見てみるのがいいんじゃないかな、と個人的には思います。\n","permalink":"http://localhost:1313/docs/2020/12/rails_active_record_n_plus_1/","summary":"\u003ch1 id=\"railsn1クエリ問題と解決方法\"\u003e[Rails]N+1クエリ問題と解決方法\u003c/h1\u003e\n\u003cp\u003eN+1クエリ問題について、よくわかっていなかったので調査してみました。\u003c/p\u003e\n\u003ch2 id=\"n1クエリ問題とは\"\u003eN+1クエリ問題とは\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eN+1クエリ問題とは、Tree 状の情報を DB から読み出す際、全レコードの取得に一つ＋各レコード分だけ SQL を発行してしまう問題\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003ca href=\"http://akasata.com/articles/103\"\u003ehttp://akasata.com/articles/103\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eUsers\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewhere(\u003cspan style=\"color:#e6db74\"\u003eactive\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eeach \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003euser\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  user\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eitems\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eeach \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003eitem\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# この時、select * from items where id = ... というクエリがレコード数だけ投げられる\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    puts item\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ename\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"railsでの対処方法includes-preload-eager_load\"\u003erailsでの対処方法(includes, preload, eager_load)\u003c/h2\u003e\n\u003cp\u003eこの問題は、railsの公式ドキュメントでも触れられています。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://railsguides.jp/active_record_querying.html#%E9%96%A2%E9%80%A3%E4%BB%98%E3%81%91%E3%82%92%E4%B8%80%E6%8B%AC%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E3%81%99%E3%82%8B\"\u003eN+1クエリ問題を解決する\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://moneyforward.com/engineers_blog/2019/04/02/activerecord-includes-preload-eagerload/\"\u003ehttps://moneyforward.com/engineers_blog/2019/04/02/activerecord-includes-preload-eagerload/\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"includes\"\u003eincludes\u003c/h3\u003e\n\u003cp\u003e公式ドキュメントでは、このN+1クエリ問題を解決するためにこのincludesを利用することを紹介しています。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eincludesを指定すると、Active Recordは指定されたすべての関連付けが最小限のクエリ回数で読み込まれるようにしてくれます。\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eclients \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eClient\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eincludes(\u003cspan style=\"color:#e6db74\"\u003e:address\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elimit(\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eclients\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eeach \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003eclient\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  puts client\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eaddress\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epostcode\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこのとき発行されるクエリは\u003ccode\u003eSELECT * FROM clients LIMIT 10\u003c/code\u003eと \u003ccode\u003eSELECT addresses.* FROM addresses WHERE (addresses.client_id IN (1,2,3,4,5,6,7,8,9,10))\u003c/code\u003eの2件なので、相当減ったと言えると思います。\u003c/p\u003e\n\u003cp\u003eしかし、\u003ccode\u003e最小限のクエリ回数で読み込まれる\u003c/code\u003eというのはどういうことなのでしょうか。\u003c/p\u003e\n\u003cp\u003eこれは、内部で\u003ccode\u003epreload\u003c/code\u003e と\u003ccode\u003eeager_load\u003c/code\u003eを場面によって使い分けているため、このように書かれているようです。\u003c/p\u003e\n\u003cp\u003eそうなると、\u003ccode\u003epreload\u003c/code\u003eと\u003ccode\u003eeager_load\u003c/code\u003eとはなんなのか、という話になってきます。\u003c/p\u003e\n\u003ch3 id=\"preload\"\u003epreload\u003c/h3\u003e\n\u003cp\u003epreloadは、関連テーブルを別クエリで取得する\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eUser\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epreload(\u003cspan style=\"color:#e6db74\"\u003e:posts\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# SELECT \u0026#34;posts\u0026#34;.* FROM \u0026#34;posts\u0026#34; WHERE \u0026#34;posts\u0026#34;.\u0026#34;user_id\u0026#34; IN (1, 2, 3)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eメモリ使用量の点でeager_loadより有利なため、基本的にincludesを利用した際はpreloadが採用されるようです。\u003c/p\u003e","title":"[rails]N+1クエリ問題と解決方法"},{"content":"[rails]Service Objectの導入と実装 Railsで実装を追加していてServiceというのを使っているのを発見したので、これについて調査\n導入する目的はなにか ActiveRecordモデルが肥大化して分割したい場合に使用する。 ModelがFatになった場合、たいてい「単一責任の原則」に反している場合が多いと思われる。（単一責任の原則とは、「1つのクラスは1つの責務を持つ」考え方で、「クラスに変更が起こる理由は、一つであるべき」とされている。変更に複数の理由があるような場合、それは複数のクラスに分割したほうが、責務が凝集する、この辺はよくわかっていないので、あとでやる）\nどういった場合に導入するのがよいか アクションが複雑になる場合 アクションが複数のモデルに渡って動作する場合 アクションから外部サービスとやり取りする場合 アクションが背後のモデルの中核をなすものでない場合 一定期間ごとに古くなったデータを消去する アクションの実行方法が多岐に渡る場合 どうやって導入するか Railsにおけるサービスクラスのオリジナルルール 参考にした記事でも、他の記事でも、ルールの通りに実装することが推奨される。 これは、このあとに示すようにアンチパターンに\n命名規則を1つに定める Service ObjectのClass命名ルールを定める。 orをつける (例　) 動詞+名詞+Serviceをつける 直接インスタンス化しない 基本的には呼び出し方法が固定なので、インスタンスを作ることに意義がない また、呼び出す動作を統一するためにも直接callを呼べるような実装にする\ndef self.call(*args) new(*args).call end この挙動をモジュール化して各Serviceに読み込ませるとより処理が統一できてよい\n呼び出し方法を1つに定める call, run, perform, executeなど、いずれかに呼びだし方法を統一する 責務を一つに絞り込む 呼び出し方法が統一されているので、絞り込まざるを得ない 例えば、DeleteやCreateなどいろんな動作をさせたい場合は、ManageUserのような汎用的な名前でなく、DeleteUserやCreateUserなどの複数のServiceに分けたほうがよい コンストラクタを複雑にしない 引数をserviceのインスタンス変数に保存する、など、限定的な動作に留める def initialize(user_id:) @user_id = user_id end callメソッドの引数をシンプルにする 結果はステートリーダー経由で返す callメソッドがServiceObject自身を返すようにするとより柔軟になる\ncallメソッドの可読性を下げないようにする callメソッドはService Objectの中心となるメソッドのため、できるだけ読みやすく保つ アンチパターンを考える Service Objectがアンチパターンである理由とよりよい代替手段（翻訳）\nService Objectを縛るルールが特にないので、メソッドが複雑化しやすい 俺が悪かった。素直に間違いを認めるから、もうサービスクラスとか作るのは止めてくれ\n無秩序になると、ただただロジックが蓄積していくだけの場所になりかねず、そうするとController, Modelとの差別化ができず、ソースコードを追うことが辛くなる。 これはModelに書くべきことじゃない、とわかっているものを、ルールにそってService Objectとして扱うのがよいと思う。\n感想 Service Objectは、Modelの責務外と思われるロジックを書くのに使うと良い その際には、各Service Objectには単一の責務だけを追わせるようにし、ルールに従うことで過剰なロジックを背負わないように気をつける Service Objectが肥大すると可読性が落ちるのはModelの肥大化と一緒、Classの責務について考えつつ実装をすすめる おまけ　Service Objectはどこからきたのか 使ってみた感想〜みたいな例を除くと、記事となっているのはこの辺り\nhttps://techracho.bpsinc.jp/hachi8833/2017_10_16/46482 https://techracho.bpsinc.jp/hachi8833/2013_11_19/14738 https://techracho.bpsinc.jp/hachi8833/2017_12_07/48363\nもしかしたらDDDにもService層という概念があるので、そのへんからきてるのかもしれない\n","permalink":"http://localhost:1313/docs/2020/07/rails_service_object/","summary":"\u003ch1 id=\"railsservice-objectの導入と実装\"\u003e[rails]Service Objectの導入と実装\u003c/h1\u003e\n\u003cp\u003eRailsで実装を追加していてServiceというのを使っているのを発見したので、これについて調査\u003c/p\u003e\n\u003ch2 id=\"導入する目的はなにか\"\u003e導入する目的はなにか\u003c/h2\u003e\n\u003cp\u003eActiveRecordモデルが肥大化して分割したい場合に使用する。\nModelがFatになった場合、たいてい「\u003ca href=\"http://objectclub.jp/technicaldoc/object-orientation/principle/principle03\"\u003e単一責任の原則\u003c/a\u003e」に反している場合が多いと思われる。（単一責任の原則とは、「1つのクラスは1つの責務を持つ」考え方で、「クラスに変更が起こる理由は、一つであるべき」とされている。変更に複数の理由があるような場合、それは複数のクラスに分割したほうが、責務が凝集する、この辺はよくわかっていないので、あとでやる）\u003c/p\u003e\n\u003ch2 id=\"どういった場合に導入するのがよいか\"\u003eどういった場合に導入するのがよいか\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eアクションが複雑になる場合\u003c/li\u003e\n\u003cli\u003eアクションが複数のモデルに渡って動作する場合\u003c/li\u003e\n\u003cli\u003eアクションから外部サービスとやり取りする場合\u003c/li\u003e\n\u003cli\u003eアクションが背後のモデルの中核をなすものでない場合\n\u003cul\u003e\n\u003cli\u003e一定期間ごとに古くなったデータを消去する\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eアクションの実行方法が多岐に渡る場合\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"どうやって導入するか\"\u003eどうやって導入するか\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://qiita.com/chrischris0801/items/58a12d17a440b842db02\"\u003eRailsにおけるサービスクラスのオリジナルルール\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e参考にした記事でも、他の記事でも、ルールの通りに実装することが推奨される。\nこれは、このあとに示すようにアンチパターンに\u003c/p\u003e\n\u003ch3 id=\"命名規則を1つに定める\"\u003e命名規則を1つに定める\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eService ObjectのClass命名ルールを定める。\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eor\u003c/code\u003eをつける (例　)\u003c/li\u003e\n\u003cli\u003e動詞+名詞+\u003ccode\u003eService\u003c/code\u003eをつける\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"直接インスタンス化しない\"\u003e直接インスタンス化しない\u003c/h3\u003e\n\u003cp\u003e基本的には呼び出し方法が固定なので、インスタンスを作ることに意義がない\nまた、呼び出す動作を統一するためにも直接\u003ccode\u003ecall\u003c/code\u003eを呼べるような実装にする\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ecall\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eargs)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eargs)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecall\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこの挙動をモジュール化して各Serviceに読み込ませるとより処理が統一できてよい\u003c/p\u003e\n\u003ch3 id=\"呼び出し方法を1つに定める\"\u003e呼び出し方法を1つに定める\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecall\u003c/code\u003e, \u003ccode\u003erun\u003c/code\u003e, \u003ccode\u003eperform\u003c/code\u003e, \u003ccode\u003eexecute\u003c/code\u003eなど、いずれかに呼びだし方法を統一する\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"責務を一つに絞り込む\"\u003e責務を一つに絞り込む\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e呼び出し方法が統一されているので、絞り込まざるを得ない\u003c/li\u003e\n\u003cli\u003e例えば、DeleteやCreateなどいろんな動作をさせたい場合は、\u003ccode\u003eManageUser\u003c/code\u003eのような汎用的な名前でなく、\u003ccode\u003eDeleteUser\u003c/code\u003eや\u003ccode\u003eCreateUser\u003c/code\u003eなどの複数のServiceに分けたほうがよい\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"コンストラクタを複雑にしない\"\u003eコンストラクタを複雑にしない\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e引数をserviceのインスタンス変数に保存する、など、限定的な動作に留める\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einitialize\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003euser_id\u003c/span\u003e:)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @user_id \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e user_id\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"callメソッドの引数をシンプルにする\"\u003e\u003ccode\u003ecall\u003c/code\u003eメソッドの引数をシンプルにする\u003c/h3\u003e\n\u003ch3 id=\"結果はステートリーダー経由で返す\"\u003e結果はステートリーダー経由で返す\u003c/h3\u003e\n\u003cp\u003ecallメソッドがServiceObject自身を返すようにするとより柔軟になる\u003c/p\u003e\n\u003ch3 id=\"callメソッドの可読性を下げないようにする\"\u003e\u003ccode\u003ecall\u003c/code\u003eメソッドの可読性を下げないようにする\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003ecallメソッドはService Objectの中心となるメソッドのため、できるだけ読みやすく保つ\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"アンチパターンを考える\"\u003eアンチパターンを考える\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://techracho.bpsinc.jp/hachi8833/2018_04_16/55130\"\u003eService Objectがアンチパターンである理由とよりよい代替手段（翻訳）\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eService Objectを縛るルールが特にないので、メソッドが複雑化しやすい\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://qiita.com/joker1007/items/25de535cd8bb2857a685\"\u003e俺が悪かった。素直に間違いを認めるから、もうサービスクラスとか作るのは止めてくれ\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e無秩序になると、ただただロジックが蓄積していくだけの場所になりかねず、そうするとController, Modelとの差別化ができず、ソースコードを追うことが辛くなる。\nこれはModelに書くべきことじゃない、とわかっているものを、ルールにそってService Objectとして扱うのがよいと思う。\u003c/p\u003e\n\u003ch2 id=\"感想\"\u003e感想\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eService Objectは、Modelの責務外と思われるロジックを書くのに使うと良い\u003c/li\u003e\n\u003cli\u003eその際には、各Service Objectには単一の責務だけを追わせるようにし、ルールに従うことで過剰なロジックを背負わないように気をつける\u003c/li\u003e\n\u003cli\u003eService Objectが肥大すると可読性が落ちるのはModelの肥大化と一緒、Classの責務について考えつつ実装をすすめる\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"おまけservice-objectはどこからきたのか\"\u003eおまけ　Service Objectはどこからきたのか\u003c/h2\u003e\n\u003cp\u003e使ってみた感想〜みたいな例を除くと、記事となっているのはこの辺り\u003c/p\u003e","title":"[rails]Service Objectの導入と実装"},{"content":"レビューについて これまであまりレビューしてこなかったので、WEB+DB PRESS vol.96のレビュー実践研修を読んで、レビュー文化について学ぶ\nレビューの目的 バグの早期発見 コードのクオリティを高める チームを強くする レビューをするときに大事なこと 人に対してでなく、コードに対してレビューする Gerald Winbergの「エゴレスプログラミング」の考え方を大事にする 良いものを作ろうというところにレビューする側・される側がお互いにフォーカスすることが大事 レビューの基本 レビュイーがレビューを依頼する前に心がけたいこと 自分でも見直して、表記の揺れや改めて修正すべきところがないか見直す 作業のゴールを明示する これは何をしている実装なのか？がわからないと、レビュワーも困る コミットを意味のある単位で分割する コミットの一単位があまり大きくなりすぎず、レビュイーの思考過程を追えるような内容だと、レビュワーが理解しやすい コードを分割する コード量が多すぎるとレビュワーがカバーするのが大変 また、差し戻された場合の修正量も多くなってしまうため、一度の修正量が1000行などだったら、複数のレビューに分割したほうが双方にとってよい 自分のしないこと、うまくいかなかったことなどもかいておくとよりお互いの認識の齟齬がなくなる 必要な実装と思われるものが入っていないと、レビュワーが気になる 今回はやらない、次の実装でやる、などがかいてあると、認識が共有できてGood 「このパターンはどうだろう」「それはやろうとしてできなかった」というやりとりは割と頻繁にある レビュイーの試行錯誤をかいておくと、レビュワーも認識が深まる レビュワーがレビューをするときに心がけること 期待する結果を明確に伝える 曖昧な言葉でいうと、正確な意図が把握できず、次のアクションが起こしづらくなる 期待する結果を伝える ここ、なんでこうなっちゃったんですかねぇ……。 ↓ - プロダクトが仕様を満たしていないので、満たすように変更してほしい - なぜそのような設計になったのか理解できないので、説明をうけて理解したい - 問題に対してもっと良い解決策があるので、相手にも知ってほしいし、実装を変更してほしい - 自分だったらこうするという実装例を示し 自分だったら、こういう実装じゃなくて、こうするかなあ。 （案を採用してほしいのか、知見を共有したいのかがわかりづらい） ↓ 自分はこんな実装を思いつきました。ですがこの実装も全く問題ないですね。もし私の案のほうがよさそうだったら採用してください。 認識のズレをへらすために\nFYIやIMO、SHOULD、MUSTなどの定型句を使うと、自分のレビューにあたっての意見が手短に伝わりやすくなる フィードバックには必ず理由を添える\nどういう理由で修正を求めるかわかりづらいと、レビュイーも修正の意図が汲めない レビューは命令ではないので、レビュイーの納得を得るための説明が必要 ダメ出しだけではない\nその他 フェーズを意識したレビュー チームで意識すること レビューの負荷が一人によらないようにする 自分より練度の高い相手もレビューする 可能な限り属人性を排除する 全体を通して レビューでは、レビュワーとレビュイーの目的意識を同じところに持っていくことが大事で、 そのための認識のズレの修正や、コミュニケーションにおける情報伝達を軽視しないようにすると、 よりよいレビューにつながりそうという意識になりました。\n","permalink":"http://localhost:1313/docs/2020/07/review/","summary":"\u003ch1 id=\"レビューについて\"\u003eレビューについて\u003c/h1\u003e\n\u003cp\u003eこれまであまりレビューしてこなかったので、WEB+DB PRESS vol.96のレビュー実践研修を読んで、レビュー文化について学ぶ\u003c/p\u003e\n\u003ch2 id=\"レビューの目的\"\u003eレビューの目的\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eバグの早期発見\u003c/li\u003e\n\u003cli\u003eコードのクオリティを高める\u003c/li\u003e\n\u003cli\u003eチームを強くする\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"レビューをするときに大事なこと\"\u003eレビューをするときに大事なこと\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e人に対してでなく、コードに対してレビューする\n\u003cul\u003e\n\u003cli\u003eGerald Winbergの「エゴレスプログラミング」の考え方を大事にする\u003c/li\u003e\n\u003cli\u003e良いものを作ろうというところにレビューする側・される側がお互いにフォーカスすることが大事\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"レビューの基本\"\u003eレビューの基本\u003c/h2\u003e\n\u003ch3 id=\"レビュイーがレビューを依頼する前に心がけたいこと\"\u003eレビュイーがレビューを依頼する前に心がけたいこと\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e自分でも見直して、表記の揺れや改めて修正すべきところがないか見直す\u003c/li\u003e\n\u003cli\u003e作業のゴールを明示する\n\u003cul\u003e\n\u003cli\u003eこれは何をしている実装なのか？がわからないと、レビュワーも困る\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eコミットを意味のある単位で分割する\n\u003cul\u003e\n\u003cli\u003eコミットの一単位があまり大きくなりすぎず、レビュイーの思考過程を追えるような内容だと、レビュワーが理解しやすい\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eコードを分割する\n\u003cul\u003e\n\u003cli\u003eコード量が多すぎるとレビュワーがカバーするのが大変\u003c/li\u003e\n\u003cli\u003eまた、差し戻された場合の修正量も多くなってしまうため、一度の修正量が1000行などだったら、複数のレビューに分割したほうが双方にとってよい\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e自分のしないこと、うまくいかなかったことなどもかいておくとよりお互いの認識の齟齬がなくなる\n\u003cul\u003e\n\u003cli\u003e必要な実装と思われるものが入っていないと、レビュワーが気になる\n\u003cul\u003e\n\u003cli\u003e今回はやらない、次の実装でやる、などがかいてあると、認識が共有できてGood\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e「このパターンはどうだろう」「それはやろうとしてできなかった」というやりとりは割と頻繁にある\n\u003cul\u003e\n\u003cli\u003eレビュイーの試行錯誤をかいておくと、レビュワーも認識が深まる\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"レビュワーがレビューをするときに心がけること\"\u003eレビュワーがレビューをするときに心がけること\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e期待する結果を明確に伝える\n\u003cul\u003e\n\u003cli\u003e曖昧な言葉でいうと、正確な意図が把握できず、次のアクションが起こしづらくなる\u003c/li\u003e\n\u003cli\u003e期待する結果を伝える\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eここ、なんでこうなっちゃったんですかねぇ……。\n↓\n- プロダクトが仕様を満たしていないので、満たすように変更してほしい\n- なぜそのような設計になったのか理解できないので、説明をうけて理解したい\n- 問題に対してもっと良い解決策があるので、相手にも知ってほしいし、実装を変更してほしい\n- 自分だったらこうするという実装例を示し\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e自分だったら、こういう実装じゃなくて、こうするかなあ。\n（案を採用してほしいのか、知見を共有したいのかがわかりづらい）\n↓\n自分はこんな実装を思いつきました。ですがこの実装も全く問題ないですね。もし私の案のほうがよさそうだったら採用してください。\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e認識のズレをへらすために\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFYIやIMO、SHOULD、MUSTなどの定型句を使うと、自分のレビューにあたっての意見が手短に伝わりやすくなる\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eフィードバックには必ず理由を添える\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eどういう理由で修正を求めるかわかりづらいと、レビュイーも修正の意図が汲めない\u003c/li\u003e\n\u003cli\u003eレビューは命令ではないので、レビュイーの納得を得るための説明が必要\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eダメ出しだけではない\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"その他\"\u003eその他\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eフェーズを意識したレビュー\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"チームで意識すること\"\u003eチームで意識すること\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eレビューの負荷が一人によらないようにする\u003c/li\u003e\n\u003cli\u003e自分より練度の高い相手もレビューする\u003c/li\u003e\n\u003cli\u003e可能な限り属人性を排除する\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"全体を通して\"\u003e全体を通して\u003c/h2\u003e\n\u003cp\u003eレビューでは、レビュワーとレビュイーの目的意識を同じところに持っていくことが大事で、\nそのための認識のズレの修正や、コミュニケーションにおける情報伝達を軽視しないようにすると、\nよりよいレビューにつながりそうという意識になりました。\u003c/p\u003e","title":"レビューについて"},{"content":"[circleci]ローカルマシンでcircleciのジョブを動かす こちらを参考にCircleCIのジョブをローカルで動かす\n日本語\nインストール macOSの場合は下記コマンド\ncurl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | bash # Starting installation. # Installing CircleCI CLI v0.1.7411 # Installing to /usr/local/bin # /usr/local/bin/circleci circleci version # 0.1.7411+93b9d40 (release) update circleci update circleci switch 設定 事前にAPI TOKENを作ってから、下記コマンドで自分のアカウントを設定する\ncircleci setup Configファイルのバリデーション circleci config validate 自分のマシンでコンテナを動かす https://circleci.com/docs/2.0/local-cli/#run-a-job-in-a-container-on-your-machine やっとここまできた\ncircleci local execute これでうまくいけば、万事OK…なのだけど、うまくいかない\n実行中にエラー ... ====\u0026gt;\u0026gt; Checkout code #!/bin/bash -eo pipefail mkdir -p /home/circleci/project \u0026amp;\u0026amp; cd /tmp/_circleci_local_build_repo \u0026amp;\u0026amp; git ls-files | tar -T - -c | tar -x -C /home/circleci/project \u0026amp;\u0026amp; cp -a /tmp/_circleci_local_build_repo/.git /home/circleci/project tar: circle.yml: Cannot stat: No such file or directory tar: Exiting with failure status due to previous errors Error: Exited with code exit status 2 Step failed Error: runner failed (exited with 101) Task failed Error: task failed 設定ファイルをコミットしたら解消した。その後はコミットしなくても反映されたので、謎だけど…\n","permalink":"http://localhost:1313/docs/2020/05/circleci_run_a_job_on_my_machine/","summary":"\u003ch1 id=\"circleciローカルマシンでcircleciのジョブを動かす\"\u003e[circleci]ローカルマシンでcircleciのジョブを動かす\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://circleci.com/docs/2.0/local-cli/\"\u003eこちら\u003c/a\u003eを参考にCircleCIのジョブをローカルで動かす\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://circleci.com/docs/ja/2.0/local-cli/\"\u003e日本語\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"インストール\"\u003eインストール\u003c/h2\u003e\n\u003cp\u003emacOSの場合は下記コマンド\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecurl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | bash\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Starting installation.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Installing CircleCI CLI v0.1.7411\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Installing to /usr/local/bin\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# /usr/local/bin/circleci\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecircleci version \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 0.1.7411+93b9d40 (release)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"update\"\u003eupdate\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecircleci update\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecircleci switch\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"設定\"\u003e設定\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://circleci.com/account/api\"\u003e事前にAPI TOKENを作って\u003c/a\u003eから、下記コマンドで自分のアカウントを設定する\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecircleci setup\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"configファイルのバリデーション\"\u003eConfigファイルのバリデーション\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecircleci config validate\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"自分のマシンでコンテナを動かす\"\u003e自分のマシンでコンテナを動かす\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://circleci.com/docs/2.0/local-cli/#run-a-job-in-a-container-on-your-machine\"\u003ehttps://circleci.com/docs/2.0/local-cli/#run-a-job-in-a-container-on-your-machine\u003c/a\u003e\nやっとここまできた\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecircleci local execute\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eこれでうまくいけば、万事OK…なのだけど、うまくいかない\u003c/p\u003e\n\u003ch3 id=\"実行中にエラー\"\u003e実行中にエラー\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e====\u003c/span\u003e\u0026gt;\u0026gt; Checkout code\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#!/bin/bash -eo pipefail\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emkdir -p /home/circleci/project \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e cd /tmp/_circleci_local_build_repo \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git ls-files | tar -T - -c | tar -x -C /home/circleci/project \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e cp -a /tmp/_circleci_local_build_repo/.git /home/circleci/project\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etar: circle.yml: Cannot stat: No such file or directory\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etar: Exiting with failure status due to previous errors\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eError:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExited with code exit status \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eStep failed\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eError: runner failed \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eexited with 101\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eTask failed\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eError: task failed\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e設定ファイルをコミットしたら解消した。その後はコミットしなくても反映されたので、謎だけど…\u003c/p\u003e","title":"[circleci]ローカルマシンでcircleciのジョブを動かす"},{"content":"[circleci]1から2へ移行する 下記のドキュメントを参考に、1から2へ移行する\nhttps://circleci.com/docs/ja/2.0/migrating-from-1-2/\ncircle.ymlの移行 これまで使用していたcircle.ymlファイルを.circleci/config.ymlに移行していくことになる。\nこのステップに従って変更する\n移行ステップ circle.ymlを新しい.circleciディレクトリに移動する circle.yml -\u0026gt; config.yml にリネーム version: 2 の記載をファイル先頭に追加する versionの記載の下に下記の二行を追加する。もしmachine: という構成があったら、それを以下と置き換える。 jobs: build: 5.dockerイメージの記述をする。以下のように言語・バージョンを指定していた場合、dockerイメージとそのバージョンに置き換える。\n# 移行前 ruby: version: # 移行後 docker: - image: circleci/ruby:2.3-jessie checkoutはstepsの配下にネストする。コマンドは - run: の後ろにかく # 移行前 checkout: post: - mkdir -p /tmp/test-data - echo \u0026#34;foo\u0026#34; \u0026gt; /tmp/test-data/foo # 移行後 steps: - checkout - run: mkdir -p /tmp/test-data - run: echo \u0026#34;foo\u0026#34; \u0026gt; /tmp/test-data/foo また、checkout: の記述がなくても、steps: は追加しなくてはならない\n(optional) 必要があれば add_ssh_keysを追加して、SSHができるようにしておく 出来上がったYAMLをバリデータ にかけてチェックする。 Workflowsを構成する https://circleci.com/docs/ja/2.0/workflows/\nTips https://circleci.com/docs/2.0/migration/\n参考 言語ガイド:Go 2.0 config.ymlの設定例 Tips for Migrating to 2.0 Configuring CircleCI\n","permalink":"http://localhost:1313/docs/2020/05/circleci_from_1_to_2/","summary":"\u003ch1 id=\"circleci1から2へ移行する\"\u003e[circleci]1から2へ移行する\u003c/h1\u003e\n\u003cp\u003e下記のドキュメントを参考に、1から2へ移行する\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://circleci.com/docs/ja/2.0/migrating-from-1-2/\"\u003ehttps://circleci.com/docs/ja/2.0/migrating-from-1-2/\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"circleymlの移行\"\u003ecircle.ymlの移行\u003c/h2\u003e\n\u003cp\u003eこれまで使用していた\u003ccode\u003ecircle.yml\u003c/code\u003eファイルを\u003ca href=\"https://circleci.com/docs/2.0/configuration-reference/\"\u003e\u003ccode\u003e.circleci/config.yml\u003c/code\u003e\u003c/a\u003eに移行していくことになる。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://circleci.com/docs/ja/2.0/migrating-from-1-2/#steps-to-configure-required-keys\"\u003eこのステップ\u003c/a\u003eに従って変更する\u003c/p\u003e\n\u003ch3 id=\"移行ステップ\"\u003e移行ステップ\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003ecircle.yml\u003c/code\u003eを新しい\u003ccode\u003e.circleci\u003c/code\u003eディレクトリに移動する\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecircle.yml\u003c/code\u003e -\u0026gt; \u003ccode\u003econfig.yml\u003c/code\u003e にリネーム\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eversion: 2\u003c/code\u003e の記載をファイル先頭に追加する\u003c/li\u003e\n\u003cli\u003eversionの記載の下に下記の二行を追加する。もし\u003ccode\u003emachine: \u003c/code\u003eという構成があったら、それを以下と置き換える。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yml\" data-lang=\"yml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003ejobs\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003ebuild\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e5.dockerイメージの記述をする。以下のように言語・バージョンを指定していた場合、dockerイメージとそのバージョンに置き換える。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yml\" data-lang=\"yml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 移行前\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eruby\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eversion\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yml\" data-lang=\"yml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 移行後\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003edocker\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ecircleci/ruby:2.3-jessie\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"6\"\u003e\n\u003cli\u003echeckoutはstepsの配下にネストする。コマンドは \u003ccode\u003e- run:\u003c/code\u003e の後ろにかく\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yml\" data-lang=\"yml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 移行前\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003echeckout\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#f92672\"\u003epost\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     - \u003cspan style=\"color:#ae81ff\"\u003emkdir -p /tmp/test-data\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     - \u003cspan style=\"color:#ae81ff\"\u003eecho \u0026#34;foo\u0026#34; \u0026gt; /tmp/test-data/foo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yml\" data-lang=\"yml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 移行後\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003esteps\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        - \u003cspan style=\"color:#ae81ff\"\u003echeckout\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        - \u003cspan style=\"color:#f92672\"\u003erun\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003emkdir -p /tmp/test-data\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        - \u003cspan style=\"color:#f92672\"\u003erun\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eecho \u0026#34;foo\u0026#34; \u0026gt; /tmp/test-data/foo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eまた、\u003ccode\u003echeckout:\u003c/code\u003e の記述がなくても、\u003ccode\u003esteps:\u003c/code\u003e は追加しなくてはならない\u003c/p\u003e\n\u003col start=\"7\"\u003e\n\u003cli\u003e(optional) 必要があれば \u003ccode\u003eadd_ssh_keys\u003c/code\u003eを追加して、SSHができるようにしておく\u003c/li\u003e\n\u003cli\u003e出来上がったYAMLを\u003ca href=\"http://codebeautify.org/yaml-validator\"\u003eバリデータ\u003c/a\u003e にかけてチェックする。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"workflowsを構成する\"\u003eWorkflowsを構成する\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://circleci.com/docs/ja/2.0/workflows/\"\u003ehttps://circleci.com/docs/ja/2.0/workflows/\u003c/a\u003e\u003c/p\u003e","title":"[circleci]1から2へ移行する"},{"content":"[Rubymine][VSCode]デバッガを使う RubymineとVSCodeを比較中のため、どちらにもデバッガを導入しています\n環境 MacOS Catalina 10.15.3 Rubymine https://pleiades.io/help/ruby/debugging-code.html https://pleiades.io/help/ruby/starting-the-debugger-session.html https://pleiades.io/help/ruby/running-applications.html\n必要なgemのインストール 私の場合はGemfileには追加できないので直接追加します\ncd /path/to/project gem install debase gem install ruby-debug-ide 実行/デバッグ構成を作成 https://pleiades.io/help/ruby/run-debug-configuration.html\n私の場合は環境変数を設定したいので、別でConfigurationを自分で作成 RAILS_ENVの変更なので選択肢がdevelopment production testしか選べないのつらいと思ったけど普通に環境変数として追加すればOKだった 実行 https://pleiades.io/help/ruby/starting-the-debugger-session.html ブレークポイントをセットして指定のConfigurationでDebug開始すると止まる！\nVSCode 必要なGemのインストール これはRubymineと同じ\nConfigurationを作成 https://code.visualstudio.com/docs/editor/debugging#_launch-configurations この辺を参考にlaunch.jsonを作成する\nlaunch.json { \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Debug fril_api\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Ruby\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;cwd\u0026#34;: \u0026#34;${workspaceRoot}\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${workspaceRoot}/bin/rails\u0026#34;, \u0026#34;showDebuggerOutput\u0026#34;: true, // useBundlerオプションはGemfileにdebase, ruby-debug-ideを追加している人だけで、gem installで入れたような場合には不要だった // \u0026#34;useBundler\u0026#34;: true, \u0026#34;pathToRDebugIDE\u0026#34;: \u0026#34;/Users/USERNAME/.rbenv/versions/2.3.1/bin/rdebug-ide\u0026#34;, \u0026#34;args\u0026#34;: [\u0026#34;server\u0026#34;] } ] } 実行 うごいた\n感想など 導入 導入自体はRubymineのほうが設定値も少なくて楽と思う とはいえVSCodeもネット上に文献が多いのでそんなに苦労しなかった 使い心地 個人的には、Rubymineのほうが変数の一覧はみやすいかなと思った ただ、RubymineでDebuggerを立ち上げるとMacbookが唸りだすので、VSCodeのほうが軽いかなという気はした ","permalink":"http://localhost:1313/docs/2020/03/rubymine_vscode_debug/","summary":"\u003ch1 id=\"rubyminevscodeデバッガを使う\"\u003e[Rubymine][VSCode]デバッガを使う\u003c/h1\u003e\n\u003cp\u003eRubymineとVSCodeを比較中のため、どちらにもデバッガを導入しています\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e環境\n\u003cul\u003e\n\u003cli\u003eMacOS Catalina 10.15.3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"rubymine\"\u003eRubymine\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://pleiades.io/help/ruby/debugging-code.html\"\u003ehttps://pleiades.io/help/ruby/debugging-code.html\u003c/a\u003e\n\u003ca href=\"https://pleiades.io/help/ruby/starting-the-debugger-session.html\"\u003ehttps://pleiades.io/help/ruby/starting-the-debugger-session.html\u003c/a\u003e\n\u003ca href=\"https://pleiades.io/help/ruby/running-applications.html\"\u003ehttps://pleiades.io/help/ruby/running-applications.html\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"必要なgemのインストール\"\u003e必要なgemのインストール\u003c/h3\u003e\n\u003cp\u003e私の場合はGemfileには追加できないので直接追加します\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-zsh\" data-lang=\"zsh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd /path/to/project\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egem install debase\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egem install ruby-debug-ide\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"実行デバッグ構成を作成\"\u003e実行/デバッグ構成を作成\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://pleiades.io/help/ruby/run-debug-configuration.html\"\u003ehttps://pleiades.io/help/ruby/run-debug-configuration.html\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e私の場合は環境変数を設定したいので、別でConfigurationを自分で作成\u003c/li\u003e\n\u003cli\u003eRAILS_ENVの変更なので選択肢が\u003ccode\u003edevelopment\u003c/code\u003e \u003ccode\u003eproduction\u003c/code\u003e \u003ccode\u003etest\u003c/code\u003eしか選べないのつらいと思ったけど普通に環境変数として追加すればOKだった\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"実行\"\u003e実行\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://pleiades.io/help/ruby/starting-the-debugger-session.html\"\u003ehttps://pleiades.io/help/ruby/starting-the-debugger-session.html\u003c/a\u003e\nブレークポイントをセットして指定のConfigurationでDebug開始すると止まる！\u003c/p\u003e\n\u003ch2 id=\"vscode\"\u003eVSCode\u003c/h2\u003e\n\u003ch3 id=\"必要なgemのインストール-1\"\u003e必要なGemのインストール\u003c/h3\u003e\n\u003cp\u003eこれはRubymineと同じ\u003c/p\u003e\n\u003ch3 id=\"configurationを作成\"\u003eConfigurationを作成\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://code.visualstudio.com/docs/editor/debugging#_launch-configurations\"\u003ehttps://code.visualstudio.com/docs/editor/debugging#_launch-configurations\u003c/a\u003e\nこの辺を参考にlaunch.jsonを作成する\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003elaunch.json\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0.2.0\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;configurations\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Debug fril_api\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;type\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Ruby\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;request\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;launch\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;cwd\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;${workspaceRoot}\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;program\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;${workspaceRoot}/bin/rails\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;showDebuggerOutput\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// useBundlerオプションはGemfileにdebase, ruby-debug-ideを追加している人だけで、gem installで入れたような場合には不要だった\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e            \u003cspan style=\"color:#75715e\"\u003e// \u0026#34;useBundler\u0026#34;: true,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;pathToRDebugIDE\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/Users/USERNAME/.rbenv/versions/2.3.1/bin/rdebug-ide\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026#34;args\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;server\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"実行-1\"\u003e実行\u003c/h3\u003e\n\u003cp\u003eうごいた\u003c/p\u003e\n\u003ch2 id=\"感想など\"\u003e感想など\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e導入\n\u003cul\u003e\n\u003cli\u003e導入自体はRubymineのほうが設定値も少なくて楽と思う\u003c/li\u003e\n\u003cli\u003eとはいえVSCodeもネット上に文献が多いのでそんなに苦労しなかった\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e使い心地\n\u003cul\u003e\n\u003cli\u003e個人的には、Rubymineのほうが変数の一覧はみやすいかなと思った\u003c/li\u003e\n\u003cli\u003eただ、RubymineでDebuggerを立ち上げるとMacbookが唸りだすので、VSCodeのほうが軽いかなという気はした\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"[Rubymine][VSCode]デバッガを使う"},{"content":"VSCodeを利用してRubyのDebugを行う Remote Development機能でデバッグ試してみる うまく行かなかった docker-compose.ymlのcommandをbundle exec rdebug-ide --debug --host 0.0.0.0 --port 1234 -- rails s -p 3000 -b 0.0.0.0では、Railsサーバは立ち上がっていないようだった 参考文献 debugging-Ruby-on-Rails　最も参考になるけどうまくいかなっかった ruby debugging in vscode 参考になる Debugging a Rails server in Visual Studio Code ruby-debug-ide Debugging in a container ","permalink":"http://localhost:1313/docs/2020/03/vscode_docker_debug/","summary":"\u003ch1 id=\"vscodeを利用してrubyのdebugを行う\"\u003eVSCodeを利用してRubyのDebugを行う\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eRemote Development機能でデバッグ試してみる\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"うまく行かなかった\"\u003eうまく行かなかった\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003edocker-compose.ymlの\u003ccode\u003ecommand\u003c/code\u003eを\u003ccode\u003ebundle exec rdebug-ide --debug --host 0.0.0.0 --port 1234 -- rails s -p 3000 -b 0.0.0.0\u003c/code\u003eでは、Railsサーバは立ち上がっていないようだった\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考文献\"\u003e参考文献\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vscode-recipes/tree/master/debugging-Ruby-on-Rails\"\u003edebugging-Ruby-on-Rails\u003c/a\u003e　最も参考になるけどうまくいかなっかった\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dev.to/dnamsons/ruby-debugging-in-vscode-3bkj\"\u003eruby debugging in vscode\u003c/a\u003e 参考になる\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/microsoft/vscode-recipes/tree/master/debugging-Ruby-on-Rails\"\u003eDebugging a Rails server in Visual Studio Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/ruby-debug/ruby-debug-ide\"\u003eruby-debug-ide\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://code.visualstudio.com/docs/remote/containers#_debugging-in-a-container\"\u003eDebugging in a container\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"VSCodeを利用してRubyのDebugを行う"},{"content":"[Sidekiq]はじめてのSidekiq これを参考に学ぶ\nSidekiqとは RubyのBackground処理を行うためのフレームワーク。\nはじめてみる Workerを作る class HardWorker include Sidekiq::Worker def perform(name, count) # do something end end Workerを実行する 呼び出すときは、performじゃなく、perform_asyncとかperform_inとかを使う rails cとかirbで下記のように呼び出すと実行できる\nHardWorker.perform_async(\u0026#39;bob\u0026#39;, 5) perform_in(interval, *args) 指定した時間後に実行する perform_at(timestamp, *args)　指定した時間に実行する Basics https://github.com/mperham/sidekiq/wiki/The-Basics\nClient 下記の書き方で、ジョブを追加することができる。 Workerの処理を実行する書き方として、２つは同じ\nMyWorker.perform_async(1, 2, 3) Sidekiq::Client.push(\u0026#39;class\u0026#39; =\u0026gt; MyWorker, \u0026#39;args\u0026#39; =\u0026gt; [1, 2, 3]) # Lower-level generic API Redis https://github.com/mperham/sidekiq/wiki/Using-Redis\nジョブをRedisに蓄積します。\n初期設定 # config/initializers/sidekiq.rb Sidekiq.configure_server do |config| config.redis = { url: \u0026#39;redis://redis.example.com:7372/0\u0026#39; } end Sidekiq.configure_client do |config| config.redis = { url: \u0026#39;redis://redis.example.com:7372/0\u0026#39; } end Server sidekiqサーバがRedisに追加されたジョブを監視して、実行\nBest Practice Workerに渡せる引数は文字列や数値、配列、ハッシュ（Rubyオブジェクトなどは渡せない） Workerには冪等性があるべき Error Handling https://github.com/mperham/sidekiq/wiki/Error-Handling あとでよむ\nAdvanced Options https://github.com/mperham/sidekiq/wiki/Advanced-Options あとでよむ\nWorkers options sidekiq_optionsによって、Workerの挙動をかえられる\nqueue: キュー名を設定 retry: true falseまたは最大リトライ数を設定できる backtrace: pool: Redisのコネクションプール class HardWorker include Sidekiq::Worker sidekiq_options queue: :crawler, retry: false, backtrace: true def perform(name, count) end end ","permalink":"http://localhost:1313/docs/2020/03/sidekiq_getting_started/","summary":"\u003ch1 id=\"sidekiqはじめてのsidekiq\"\u003e[Sidekiq]はじめてのSidekiq\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/mperham/sidekiq/wiki/Getting-Started\"\u003eこれ\u003c/a\u003eを参考に学ぶ\u003c/p\u003e\n\u003ch2 id=\"sidekiqとは\"\u003eSidekiqとは\u003c/h2\u003e\n\u003cp\u003eRubyのBackground処理を行うためのフレームワーク。\u003c/p\u003e\n\u003ch2 id=\"はじめてみる\"\u003eはじめてみる\u003c/h2\u003e\n\u003ch3 id=\"workerを作る\"\u003eWorkerを作る\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHardWorker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003einclude\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eSidekiq\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eWorker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eperform\u003c/span\u003e(name, count)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# do something\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"workerを実行する\"\u003eWorkerを実行する\u003c/h3\u003e\n\u003cp\u003e呼び出すときは、\u003ccode\u003eperform\u003c/code\u003eじゃなく、\u003ccode\u003eperform_async\u003c/code\u003eとか\u003ccode\u003eperform_in\u003c/code\u003eとかを使う\nrails cとかirbで下記のように呼び出すと実行できる\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eHardWorker\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eperform_async(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;bob\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eperform_in(interval, *args) 指定した時間後に実行する\u003c/li\u003e\n\u003cli\u003eperform_at(timestamp, *args)　指定した時間に実行する\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"basics\"\u003eBasics\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/mperham/sidekiq/wiki/The-Basics\"\u003ehttps://github.com/mperham/sidekiq/wiki/The-Basics\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"client\"\u003eClient\u003c/h4\u003e\n\u003cp\u003e下記の書き方で、ジョブを追加することができる。\nWorkerの処理を実行する書き方として、２つは同じ\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eMyWorker\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eperform_async(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eSidekiq\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eClient\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epush(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;class\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eMyWorker\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;args\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e)  \u003cspan style=\"color:#75715e\"\u003e# Lower-level generic API\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"redis\"\u003eRedis\u003c/h4\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/mperham/sidekiq/wiki/Using-Redis\"\u003ehttps://github.com/mperham/sidekiq/wiki/Using-Redis\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eジョブをRedisに蓄積します。\u003c/p\u003e\n\u003ch5 id=\"初期設定\"\u003e初期設定\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# config/initializers/sidekiq.rb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eSidekiq\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003econfigure_server \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003econfig\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  config\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eredis \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { \u003cspan style=\"color:#e6db74\"\u003eurl\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;redis://redis.example.com:7372/0\u0026#39;\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eSidekiq\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003econfigure_client \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003econfig\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  config\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eredis \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { \u003cspan style=\"color:#e6db74\"\u003eurl\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;redis://redis.example.com:7372/0\u0026#39;\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"server\"\u003eServer\u003c/h4\u003e\n\u003cp\u003esidekiqサーバがRedisに追加されたジョブを監視して、実行\u003c/p\u003e\n\u003ch3 id=\"best-practice\"\u003eBest Practice\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eWorkerに渡せる引数は文字列や数値、配列、ハッシュ（Rubyオブジェクトなどは渡せない）\u003c/li\u003e\n\u003cli\u003eWorkerには冪等性があるべき\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"error-handling\"\u003eError Handling\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/mperham/sidekiq/wiki/Error-Handling\"\u003ehttps://github.com/mperham/sidekiq/wiki/Error-Handling\u003c/a\u003e\nあとでよむ\u003c/p\u003e\n\u003ch3 id=\"advanced-options\"\u003eAdvanced Options\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/mperham/sidekiq/wiki/Advanced-Options\"\u003ehttps://github.com/mperham/sidekiq/wiki/Advanced-Options\u003c/a\u003e\nあとでよむ\u003c/p\u003e","title":"[Sidekiq]はじめてのSidekiq"},{"content":"[Ruby]ブロックについて学ぶ ブロック…？ Rubyを学び始めて、ブロックという概念が出てきて戸惑ったので、色々調べてみました\nブロックってなんだっけ ブロックというのは、メソッド呼び出しのときに渡すことのできる処理の塊のこと。 一番よく見るのはイテレート\n[1, 2, 3].each do |i| puts i end これのdoからendの部分がブロック\n[1, 2, 3].each { |i| puts i } こういう書き方も可能、この場合は{}内が全てブロック\nイテレート以外でも メソッド呼び出しの際に渡す処理なので、イテレートじゃなくてもyieldを使えば、渡したブロックを呼び出してあげられる\ndef block_test yield(100) end block_test do |num| puts num * num end # 10000 多分なんのメソッドに対しても渡せる、渡しても何も起きないだけと思われる\ndef aaa puts \u0026#34;Hello\u0026#34; end aaa do puts \u0026#34;World\u0026#34; end # yieldがないのでブロックの中身は実行されない # \u0026#34;Hello\u0026#34; ブロックがある時もあれば、ない時もありそう block_given?でブロックが渡されてるかわかるので、処理を分岐させることも可能\nブロックはProcとは違うのか Procはオブジェクトだが、ブロックはオブジェクトでない。 ブロックをカプセル化したものがProc\nブロックでのreturnの扱い ブロック内でreturnすると、ブロックを呼び出しているメソッドを字句的に囲っているメソッドが終了する\ndef count_up_from_1_to_3 yield(1) yield(2) yield(3) end def test_return count_up_from_1_to_3 do |i| return if i == 2 puts i end puts \u0026#34;end\u0026#34; end test_return \b # 1 # returnするとそこでtest_returnメソッド自体が終了する... def test_next count_up_from_1_to_3 do |i| # returnをnextに変更 next if i == 2 puts i end puts \u0026#34;end\u0026#34; end test_next # 1 # 3 # end # test_nextの最後まで処理が終わった ","permalink":"http://localhost:1313/docs/2020/01/about_block/","summary":"\u003ch1 id=\"rubyブロックについて学ぶ\"\u003e[Ruby]ブロックについて学ぶ\u003c/h1\u003e\n\u003ch2 id=\"ブロック\"\u003eブロック…？\u003c/h2\u003e\n\u003cp\u003eRubyを学び始めて、ブロックという概念が出てきて戸惑ったので、色々調べてみました\u003c/p\u003e\n\u003ch2 id=\"ブロックってなんだっけ\"\u003eブロックってなんだっけ\u003c/h2\u003e\n\u003cp\u003eブロックというのは、メソッド呼び出しのときに渡すことのできる処理の塊のこと。\n一番よく見るのはイテレート\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e].\u003c/span\u003eeach \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   puts i \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこれの\u003ccode\u003edo\u003c/code\u003eから\u003ccode\u003eend\u003c/code\u003eの部分がブロック\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e].\u003c/span\u003eeach { \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e puts i }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこういう書き方も可能、この場合は\u003ccode\u003e{}\u003c/code\u003e内が全てブロック\u003c/p\u003e\n\u003ch3 id=\"イテレート以外でも\"\u003eイテレート以外でも\u003c/h3\u003e\n\u003cp\u003eメソッド呼び出しの際に渡す処理なので、イテレートじゃなくてもyieldを使えば、渡したブロックを呼び出してあげられる\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eblock_test\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eyield\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eblock_test \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003enum\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  puts num \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e num\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 10000\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e多分なんのメソッドに対しても渡せる、渡しても何も起きないだけと思われる\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaaa\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  puts \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eaaa \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e puts \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;World\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# yieldがないのでブロックの中身は実行されない\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# \u0026#34;Hello\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"ブロックがある時もあればない時もありそう\"\u003eブロックがある時もあれば、ない時もありそう\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eblock_given?\u003c/code\u003eでブロックが渡されてるかわかるので、処理を分岐させることも可能\u003c/p\u003e\n\u003ch2 id=\"ブロックはprocとは違うのか\"\u003eブロックはProcとは違うのか\u003c/h2\u003e\n\u003cp\u003eProcはオブジェクトだが、ブロックはオブジェクトでない。\n\u003ca href=\"https://docs.ruby-lang.org/en/2.6.0/Proc.html\"\u003eブロックをカプセル化したものがProc\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"ブロックでのreturnの扱い\"\u003eブロックでのreturnの扱い\u003c/h2\u003e\n\u003cp\u003eブロック内でreturnすると、ブロックを呼び出しているメソッドを字句的に囲っているメソッドが終了する\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecount_up_from_1_to_3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eyield\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eyield\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eyield\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etest_return\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  count_up_from_1_to_3 \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    puts i\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  puts \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;end\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etest_return\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\b\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# returnするとそこでtest_returnメソッド自体が終了する...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etest_next\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  count_up_from_1_to_3 \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# returnをnextに変更\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003enext\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    puts i\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  puts \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;end\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etest_next\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# test_nextの最後まで処理が終わった\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[Ruby]ブロックについて学ぶ"},{"content":"VSCodeでのRuby開発 VSCodeでRubyの開発をするための環境を整えたいと思います\ndocker環境で開発する 私の場合はローカル環境での開発は、Ruby用のコンテナを作ってそこで動かしているので、その中で作業できると便利と思いました\nVSCodeは少し前にリモート環境での開発環境についてリリースがあり、これを使ってみたいと思います\n参考リンク https://code.visualstudio.com/docs/remote/containers\nやったこと ちなみに mac OSです\n事前準備 下記をinstallしておきます\nDocker VSCode Remote Development extenstion pack 早速コンテナにattachする VSCodeのcommand pallet でRemote-Containers: Attach to Running Containerを選択する 接続したいコンテナを選択する 終わり かんたん！\n各Extensionをコンテナ内で使えるようにする これはあとの作業になりますが、VSCodeのExtensionをコンテナ内で使うためには、各Extensionを有効にする必要があります VSCodeにExtensionを追加 Solargraph コードの補完機能とか、ジャンプとかドキュメンテーションの参照とかができるようになるRubyのLanguage Serverです\ngem install solargraph 事前にsolargraphをgem installしておきます 私の場合はGemfileに追加してインストールします、そうするとdockerなのでイメージをbuildし直す必要があります\n# Gemfile group :development do gem \u0026#34;solargraph\u0026#34; end $ bundle install $ bundle exec solargraph -v 0.38 # 入った VSCodeにExtension追加 VSCodeのExtensionsから「Ruby Solargraph」を選択してインストール 設定ファイルを修正しておきます # setting.json \u0026#34;solargraph.autoformat\u0026#34;: true, \u0026#34;solargraph.useBundler\u0026#34;: true, # bundle経由で使用する場合はtrue \u0026#34;solargraph.diagnostics\u0026#34;: true # rubocopによる警告など出したい場合はtrue .solargraph.yml この辺を参考に.solargraph.ymlをワークスペースのルートに追加 # .solargraph.yml include: - \u0026#34;**/*.rb\u0026#34; exclude: - spec/**/* - test/**/* - vendor/**/* - \u0026#34;.bundle/**/*\u0026#34; require: [] domains: [] reporters: - rubocop - require_not_found max_files: 5000 全部終わったらVSCodeを再起動すると使用できると思います\n感想 VSCodeの良いところ Remote Developmentの機能を使えば、ローカル環境に色々インストールしなくてもよくなる 特にエディタ周りはコンテナとエディタのLintツールとかのバージョンの差異とかを管理しなくて良くなる（コンテナに開発環境が整ってるのに、エディタ側で文法チェックしたくてローカル環境にも結局同じバージョンをインストールしなきゃいけないとかあって嫌だった） solargraphを使えばコードの補完とかジャンプとか普通にできる 悩ましいところ Remote Developmentの機能、VSCodeをコンテナにアタッチするのがちょっと時間がかかるかも あと、開発しているとコンテナ内にも色々欲しくなってくる vimとかzshにしたいとか… そうなると、ローカル環境のままで良かったのでは感 Railsに特化した形の補完はRubymineの方が強そう その他 debuggerまで手が回らなかったのであとで調べたいです この辺の設定をあとでhttps://github.com/castwide/solargraph/issues/87 ","permalink":"http://localhost:1313/docs/2020/01/vscode-with-ruby/","summary":"\u003ch1 id=\"vscodeでのruby開発\"\u003eVSCodeでのRuby開発\u003c/h1\u003e\n\u003cp\u003eVSCodeでRubyの開発をするための環境を整えたいと思います\u003c/p\u003e\n\u003ch2 id=\"docker環境で開発する\"\u003edocker環境で開発する\u003c/h2\u003e\n\u003cp\u003e私の場合はローカル環境での開発は、Ruby用のコンテナを作ってそこで動かしているので、その中で作業できると便利と思いました\u003c/p\u003e\n\u003cp\u003eVSCodeは少し前に\u003ca href=\"https://code.visualstudio.com/docs/remote/remote-overview\"\u003eリモート環境での開発環境\u003c/a\u003eについてリリースがあり、これを使ってみたいと思います\u003c/p\u003e\n\u003cp\u003e参考リンク\n\u003ca href=\"https://code.visualstudio.com/docs/remote/containers\"\u003ehttps://code.visualstudio.com/docs/remote/containers\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"やったこと\"\u003eやったこと\u003c/h3\u003e\n\u003cp\u003eちなみに mac OSです\u003c/p\u003e\n\u003ch4 id=\"事前準備\"\u003e事前準備\u003c/h4\u003e\n\u003cp\u003e下記をinstallしておきます\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDocker\u003c/li\u003e\n\u003cli\u003eVSCode\u003c/li\u003e\n\u003cli\u003eRemote Development extenstion pack\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"早速コンテナにattachする\"\u003e早速コンテナにattachする\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eVSCodeのcommand pallet で\u003ccode\u003eRemote-Containers: Attach to Running Container\u003c/code\u003eを選択する\u003c/li\u003e\n\u003cli\u003e接続したいコンテナを選択する\u003c/li\u003e\n\u003cli\u003e終わり\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eかんたん！\u003c/p\u003e\n\u003ch4 id=\"各extensionをコンテナ内で使えるようにする\"\u003e各Extensionをコンテナ内で使えるようにする\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eこれはあとの作業になりますが、VSCodeのExtensionをコンテナ内で使うためには、各Extensionを有効にする必要があります\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"vscodeにextensionを追加\"\u003eVSCodeにExtensionを追加\u003c/h2\u003e\n\u003ch3 id=\"solargraph\"\u003eSolargraph\u003c/h3\u003e\n\u003cp\u003eコードの補完機能とか、ジャンプとかドキュメンテーションの参照とかができるようになるRubyのLanguage Serverです\u003c/p\u003e\n\u003ch4 id=\"gem-install-solargraph\"\u003egem install solargraph\u003c/h4\u003e\n\u003cp\u003e事前にsolargraphをgem installしておきます\n私の場合はGemfileに追加してインストールします、そうするとdockerなのでイメージをbuildし直す必要があります\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# Gemfile\n\ngroup  :development  do\n\tgem  \u0026#34;solargraph\u0026#34;\nend\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ bundle install\n$ bundle exec solargraph -v\n0.38 # 入った\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"vscodeにextension追加\"\u003eVSCodeにExtension追加\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eVSCodeのExtensionsから「Ruby Solargraph」を選択してインストール\u003c/li\u003e\n\u003cli\u003e設定ファイルを修正しておきます\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# setting.json\n\u0026#34;solargraph.autoformat\u0026#34;: true, \n\u0026#34;solargraph.useBundler\u0026#34;: true, # bundle経由で使用する場合はtrue\n\u0026#34;solargraph.diagnostics\u0026#34;: true # rubocopによる警告など出したい場合はtrue\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"solargraphyml\"\u003e.solargraph.yml\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://solargraph.org/guides/configuration\"\u003eこの辺\u003c/a\u003eを参考に.solargraph.ymlをワークスペースのルートに追加\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# .solargraph.yml\ninclude:\n- \u0026#34;**/*.rb\u0026#34;\nexclude:\n- spec/**/*\n- test/**/*\n- vendor/**/*\n- \u0026#34;.bundle/**/*\u0026#34;\nrequire: []\ndomains: []\nreporters:\n- rubocop\n- require_not_found\nmax_files: 5000\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e全部終わったらVSCodeを再起動すると使用できると思います\u003c/p\u003e","title":"VSCodeでのRuby開発"}]